H1_leftside_heading,H1_rightside_heading,H2,H3,All_para,li,div,div_2
XML ,Tutorial,"Why Study XML?,What You Will Learn,Important XML Standards,Learn by Examples,XML Quiz Test","XML Example 1,XML Example 2","XML plays an important role in many different IT systems.,XML is often used for distributing data over the Internet.,It is important (for all types of software developers!) to have a good understanding of XML.,This tutorial will give you a solid understanding of XML:,This tutorial will also dig deep into the following important XML standards:,Examples are better than 1000 words. Examples are often easier to understand 
than text explanations.,This tutorial supplements all explanations with clarifying ""Try it Yourself"" examples.,Test your XML skills at W3Schools!","What is XML?,How does XML work?,How can I use XML?,What can I use XML for?","
<?xml version=""1.0"" encoding=""UTF-8""?>,
<note>,  <to>Tove</to>,
  <from>Jani</from>,
  <heading>Reminder</heading>,
  <body>Don't forget me this weekend!</body>,
</note>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,<breakfast_menu>,
<food>,    <name>Belgian Waffles</name>,    
<price>$5.95</price>,    <description>,   Two of our famous 
Belgian Waffles with plenty of real maple syrup,   </description>,    
<calories>650</calories>,</food>,<food>,    
<name>Strawberry Belgian Waffles</name>,    
<price>$7.95</price>,    <description>,    Light Belgian 
waffles covered with strawberries and whipped cream,    </description>,    
<calories>900</calories>,</food>,<food>,    
<name>Berry-Berry Belgian Waffles</name>,    
<price>$8.95</price>,    <description>,    Belgian 
waffles covered with assorted fresh berries and whipped 
cream,    </description>,    <calories>900</calories>,
</food>,<food>,    <name>French Toast</name>,    
<price>$4.50</price>,    <description>,    Thick slices made 
from our homemade sourdough bread,    </description>,    
<calories>600</calories>,</food>,<food>,    <name>Homestyle 
Breakfast</name>,    <price>$6.95</price>,    
<description>,    Two eggs, bacon or sausage, toast, and our ever-popular hash 
browns,    </description>,    <calories>950</calories>,
</food>,</breakfast_menu>
",
AJAX ,XML Example,"AJAX XML Example,Example Explained,The XML File","Example,LoadXMLDoc()","AJAX can be used for interactive communication with an XML file.,The following example will demonstrate how a web page can fetch information 
from an XML file with AJAX:,When a user clicks on the ""Get CD info"" button above, the loadDoc() 
function is executed.,The loadDoc() function creates an XMLHttpRequest object, adds the function 
to be executed when the server response is ready, and sends the request off to the server.,When the server response is ready, an HTML 
table is built, nodes (elements) are extracted from the XML file, and it finally updates the 
element ""demo"" with the HTML table filled with XML data:,The XML file used in the example above looks like this: "","".",,,
AJAX - Server ,Response,"The onreadystatechange Property,Using a Callback Function,Server Response Properties,Server Response Methods,The responseText Property,The responseXML Property,The getAllResponseHeaders() Method,The getResponseHeader() Method","Example,Example,Example,Example,Example,Example","The , property holds the status of the XMLHttpRequest.,The , property defines a function to be executed when the readyState changes.,The , property and the , property holds the status of the XMLHttpRequest object.,The onreadystatechange function is called every time the readyState changes. ,When readyState is 4 and status is 200, the response is ready:,The ""ajax_info.txt"" file used in the example above, is a simple text file and looks like this:,A callback function is a function passed as a parameter to another function.,If you have more than one AJAX task in a website, you should create one function for 
executing the XMLHttpRequest object, and one callback function for each 
AJAX task.,The function call should contain the URL and what function to call when the 
response is ready.,The , property returns the server response as a 
JavaScript string, and you can use it accordingly:,The XML HttpRequest object has an in-built XML parser.,The , property returns the server response as an XML DOM object.,Using this property you can parse the response as an XML DOM object:,The , method returns all header information from the server response.,The , method returns specific header information from the server response.",,"
  <h1>AJAX</h1>,<p>AJAX is not a programming language.</p>,<p>AJAX is a 
  technique for accessing web servers from a web page.</p>,<p>AJAX stands for 
  Asynchronous JavaScript And XML.</p>
",
AJAX ,Database Example,"AJAX Database Example,Example Explained - The showCustomer() Function,The AJAX Server Page","Example,showCustomer","AJAX can be used for interactive communication with a database.,The following example will demonstrate how a web page can fetch 
information from a database with AJAX:,When a user selects a customer in the dropdown list above, a function called ""showCustomer()"" is executed. The 
function is triggered by the ""onchange"" event:,The showCustomer() function does the following:,The page on the server called by the JavaScript above is an PHP file called ""getcustomer.php"".,The source code in ""getcustomer.php"" runs a query against a database, and returns the result in an HTML 
table:","Check if a customer is selected,Create an XMLHttpRequest object,Create the function to be executed when the server response is ready,Send the request off to a file on the server,Notice that a parameter (q) is added to the URL (with the content of the dropdown list)",,
AJAX ,Examples,,,"
,
Create a simple XMLHttpRequest, and retrieve data from a TXT file.
,
,
Create a XMLHttpRequest with a callback function, and retrieve data from a TXT file.
,
,
,
,
,
,
Create an XMLHttpRequest to retrieve data from an XML file.
,
,
Create an XMLHttpRequest to retrieve data from an XML file and display the data in an HTML table.
,
,
How a web page can communicate with a web server while a user type characters in an input field.
,
,
How a web page can communicate with a web server while a user type characters in an input field.
,
,
How a web page can fetch information from a database with AJAX.
,
,
,
,
,
,
",,,
XML ,Applications,"The XML Document Used,Display XML Data in an HTML Table,Display the First CD in an HTML div Element,Navigate Between the CDs,Show Album Information When Clicking On a CD","Example,Example,Example,Example","This chapter demonstrates some HTML applications using 
XML, HTTP, DOM, and JavaScript.,In this chapter we will use the XML file called ,.,This example loops through each <CD> element, and displays the values of the <ARTIST> and the 
<TITLE> elements in an HTML table:,For more information about using JavaScript and the XML DOM, go to
,This example uses a function to display the first CD element in an HTML element with id=""showCD"":,To navigate between the CDs, in the example above, add a 
next() and previous() function:,
The last example shows how you can display album information when the user clicks on a CD:",,"
<html>,<head>,<style>,table, th, td {,
  border: 1px solid black;,  border-collapse:collapse;,
},th, td {,  padding: 5px;,},</style>,
</head>,<body>,
  ,<button type=""button"" onclick=""loadXMLDoc()"">Get my CD collection</button>,
  <br><br>,<table id=""demo""></table>,<script>,function loadXMLDoc() {,  
var xmlhttp = new XMLHttpRequest();,  xmlhttp.onreadystatechange = 
function() {,    if (this.readyState == 4 && this.status == 200) {,      myFunction(this);,    
},  };,  xmlhttp.open(""GET"", ""cd_catalog.xml"", true);,  
xmlhttp.send();,},function myFunction(xml) {,  var i;,  
var xmlDoc = xml.responseXML;,  var table=""<tr><th>Artist</th><th>Title</th></tr>"";,  
var x = xmlDoc.getElementsByTagName(""CD"");,  for (i = 0; i <x.length; 
i++) { ,    table += ""<tr><td>"" +,    x[i].getElementsByTagName(""ARTIST"")[0].childNodes[0].nodeValue 
+,    ""</td><td>"" +,    x[i].getElementsByTagName(""TITLE"")[0].childNodes[0].nodeValue 
+,    ""</td></tr>"";,  },  
document.getElementById(""demo"").innerHTML = table;,},</script>,
,
</body>,
</html>",
AJAX ,ASP Example,"AJAX ASP Example,Example Explained,The ASP File - ""gethint.asp""","Example,Example","AJAX is used to create more interactive applications.,The following example will demonstrate how a web page can communicate with a 
web server while a user type characters in an input field:,In the example above, when a user types a character in the input field, a function 
called ""showHint()"" is executed.,The function is triggered by the onkeyup event.,Here is the HTML code:,Code explanation:,First, check if the input field is empty (str.length == 0). If it is, clear the 
content of the txtHint placeholder and exit the function.,However, if the input field is not empty, do the following:,The ASP file checks an array of names, and returns the corresponding name(s) to the 
browser:","Create an XMLHttpRequest object,Create the function to be executed when the server response is ready,Send the request off to an ASP file (gethint.asp) on the server,Notice that q parameter is added gethint.asp?q=""+str,The str variable holds the content of the input field","
<html>,<head>,<script>,function showHint(str) {,    
if (str.length == 0) { ,        
document.getElementById(""txtHint"").innerHTML = """";,        
return;,    } else {,        var xmlhttp = new 
XMLHttpRequest();,        xmlhttp.onreadystatechange = function() 
{,            if (this.readyState == 4 && 
this.status == 200) {,                document.getElementById(""txtHint"").innerHTML = 
this.responseText;,            
},        };,        xmlhttp.open(""GET"", ""gethint.asp?q="" + str, true);,        xmlhttp.send();,    
},},</script>,</head>,<body>,<p><b>Start typing a name in the 
input field below:</b></p>,<form> ,First name: <input type=""text"" 
onkeyup=""showHint(this.value)"">,</form>,<p>Suggestions: <span id=""txtHint""></span></p>,
</body>,</html>",
XML DOM ,Nodes,"DOM Example,Text is Always Stored in Text Nodes,The XML DOM Node Tree,Node Parents, Children, and Siblings,First Child - Last Child",,"According to the XML DOM, everything in an XML document is a ,:,Look at the following XML file (,):,The root node in the XML above is named <bookstore>.,All other nodes in the document are contained within <bookstore>.,The root node <bookstore> holds 4 <book> nodes.,The first <book> node holds the child nodes: <title>, <author>, <year>, and <price>.,The child nodes contain one text node each, ""Everyday Italian"", ""Giada 
De Laurentiis"", ""2005"", and ""30.00"".,A common error in DOM processing is to expect an element node to contain text. ,However, the text of an element node is stored in a text node.,In this example: ,, the element node <year> holds a text node with the value ""2005"". ,""2005"" is , the value of the <year> element!,The XML DOM views an XML document as a tree-structure. The tree structure is called a ,All nodes can be accessed through the tree. Their contents can be 
modified or deleted, and new elements can be created.,The node tree shows the set of nodes, and the connections between them. The tree starts at 
the root node and branches out to the text nodes at the lowest level of the tree:,The image above represents the XML file ,.,The nodes in the node tree have a hierarchical relationship to each other.,The terms parent, child, and sibling are used to describe the relationships. Parent nodes have 
children. Children on the same level are called siblings (brothers or sisters).,The following image illustrates a part of the node tree and the relationship between the nodes:,Because the XML data is structured in a tree form, it can be traversed without  
knowing the exact structure of the tree and without knowing the type of data contained within. ,You will learn more about traversing the node tree in a later chapter of this tutorial.,Look at the following XML fragment:,In the XML above, the <title> element is the first child of the <book> 
element, and the <price> element is the last child of the <book> element.,Furthermore, the <book> element is the parent node of the <title>, 
<author>, <year>, and <price> elements.","The entire document is a document node,Every XML element is an element node,The text in the XML elements are text nodes,Every attribute is an attribute node,Comments are comment nodes,In a node tree, the top node is called the root,Every node, except the root, has exactly one parent node,A node can have any number of children,A leaf is a node with no children,Siblings are nodes with the same parent","
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore>,
 
<book category=""cooking"">,
     
  <title lang=""en"">Everyday Italian</title>,
     
  <author>Giada De Laurentiis</author>,
     
  <year>2005</year>,
     
  <price>30.00</price>,
 
</book>,
 
<book category=""children"">,
     
  <title lang=""en"">Harry Potter</title>,
     
  <author>J K. Rowling</author>,
     
  <year>2005</year>,
     
  <price>29.99</price>,
 
</book>,
 
<book category=""web"">,
     
  <title lang=""en"">XQuery Kick Start</title>,
     
  <author>James McGovern</author>,
     
  <author>Per Bothner</author>,
     
  <author>Kurt Cagle</author>,
     
  <author>James Linn</author>,
     
  <author>Vaidyanathan Nagarajan</author>,
     
  <year>2003</year>,
     
  <price>49.99</price>,
 
</book>,
 
<book category=""web"" cover=""paperback"">,
     
  <title lang=""en"">Learning XML</title>,
     
  <author>Erik T. Ray</author>,
     
  <year>2003</year>,
     
  <price>39.95</price>,
 
</book>,
</bookstore>
,
<bookstore>,
   
  <book category=""cooking"">,
       
    <title lang=""en"">Everyday Italian</title>,
       
    <author>Giada De Laurentiis</author>,
       
    <year>2005</year>,
       
    <price>30.00</price>,
   
  </book>,
</bookstore>
",
"AJAX - Send a , To a Server",Request,"Send a Request To a Server,GET or POST?,GET Requests,POST Requests,The url - A File On a Server,Asynchronous - True or False?,The onreadystatechange Property,Synchronous Request","Example,Example,Example,Example,Example,Example,Example","The XMLHttpRequest object is used to exchange data with a 
server.,To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:,GET is simpler and faster than POST, and can be used in most cases.,However, always use POST requests when:,A simple GET request:,In the example above, you may get a cached result. To avoid this, add a unique ID to the URL:,If you want to send information with the GET method, add the information to the URL:,A simple POST request:,To POST data like an HTML form, add an HTTP header with setRequestHeader(). 
Specify the data you want to send in the send() method:,The url parameter of the open() method, is an address to a file on a server:,The file can be any kind of file, like .txt and 
.xml, or server scripting files like .asp and .php (which can perform  
actions on the server before sending the response back).,Server requests should be sent asynchronously.,The async parameter of the open() 
method should be set to true:,By sending asynchronously, the 
JavaScript does not have to wait for the server response, but can instead:,With the XMLHttpRequest object you can define a function to be executed when 
the request receives an answer.,The function is defined in the , property of the XMLHttpResponse object:,The ""ajax_info.txt"" file used in the example above, is a simple text file and looks like this:,You will learn more about onreadystatechange in a later chapter.,
,To execute a synchronous request, change the third parameter in the open() method to false:,Sometimes async = false are used for quick testing. You will also find 
synchronous requests in older JavaScript code.,Since the code will wait for server completion, there is no need for an onreadystatechange 
function:","A cached file is not an option (update a file or database on the server).,Sending a large amount of data to the server (POST has no size limitations).,Sending user input (which can contain unknown characters), POST is more robust and secure than GET.,execute other scripts while waiting for server response,deal with the response after the response is ready","
  <h1>AJAX</h1>,<p>AJAX is not a programming language.</p>,<p>AJAX is a 
  technique for accessing web servers from a web page.</p>,<p>AJAX stands for 
  Asynchronous JavaScript And XML.</p>
",
XML DOM ,Tutorial,"What is the DOM?,The HTML DOM,The XML DOM,Get the Value of an XML Element,Loading an XML File,
Example Explained,Loading an XML String,Programming Interface,XML DOM Properties,XML DOM Methods","Example,Example,Example,Example,Example","The DOM defines a standard for accessing and manipulating documents:,The HTML DOM defines a standard way for accessing and manipulating HTML documents. 
It presents an HTML document as a tree-structure.,The XML DOM defines a standard way for accessing and manipulating XML documents. 
It presents an XML document as a tree-structure.,
All 
HTML elements can be accessed through the HTML DOM.,This example changes the value of an HTML element with id=""demo"":,This example changes the value of the first <h1> element in an HTML document:, Even if the HTML document contains 
only ONE <h1> element you still have to specify the array index [0], 
because the getElementsByTagName() method always returns an array. ,
You can learn a lot more about the HTML DOM in our ,.,
All XML elements can be accessed through the XML DOM.,The XML DOM is:,In other words: ,This code retrieves the text value of the first <title> element in an 
XML document:,The XML file used in the examples below is ,.,This example reads ""books.xml"" into xmlDoc and retrieves the text value of the first <title> element in 
books.xml:,This example loads a text string into an XML DOM object, and  
extracts the info from it with JavaScript:,The DOM models XML as a set of node objects. The nodes can be accessed with 
JavaScript or other programming languages. In this tutorial we use JavaScript.,The programming interface to the DOM is defined by a set standard properties 
and methods., are often referred to as something that is (i.e. nodename 
is ""book"")., are often referred to as something that is done (i.e. delete 
""book"").,These are some typical DOM properties:,Note: In the list above, x is a node object.,Note: In the list above, x is a node object.","A standard object model for XML,A standard programming interface for XML,Platform- and language-independent,A W3C standard, - the XML DOM object created by the parser., - get the first <title> element, - the first child of the <title> element (the text node), - the value of the node (the text itself),x.nodeName - the name of x,x.nodeValue - the value of x,x.parentNode - the parent node of x,x.childNodes - the child nodes of x,x.attributes - the attributes nodes of x,x.getElementsByTagName(,) - get all elements with a specified tag name,x.appendChild(,) - insert a child node to x,x.removeChild(,) - remove a child node from x","
<h1 id=""demo"">This is a Heading</h1>,<script>,
document.getElementById(""demo"").innerHTML = ""Hello World!"";,</script>,
    <h1>This is a Heading</h1>,<h1>This is a Heading</h1>,<script>,
 document.getElementsByTagName(""h1"")[0].innerHTML = ""Hello World!"";,
 </script>,
<!DOCTYPE html>,
<html>,
<body>,
<p id=""demo""></p>,
<script>,
var xhttp = new XMLHttpRequest();,
xhttp.onreadystatechange = function() {,
    
if (this.readyState == 4 && this.status == 200) {,
    
myFunction(this);,
    },
};,
xhttp.open(""GET"", ""books.xml"", true);,
xhttp.send();,
function myFunction(xml) {,    var xmlDoc = xml.responseXML;,
    document.getElementById(""demo"").innerHTML =,
    xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue;,
},
</script>,
</body>,
</html>
,
 <html>,<body>,<p id=""demo""></p>,<script>,var text, parser, 
 xmlDoc;,text = ""<bookstore><book>"" +,""<title>Everyday 
 Italian</title>"" +,""<author>Giada De Laurentiis</author>"" +,
 ""<year>2005</year>"" +,""</book></bookstore>"";,parser = new DOMParser();,
 xmlDoc = parser.parseFromString(text,""text/xml"");,
 document.getElementById(""demo"").innerHTML =,;,
 </script>,</body>,</html>
",
AJAX ,PHP Example,"AJAX PHP Example,Example Explained,The PHP File - ""gethint.php""","Example,Example","AJAX is used to create more interactive applications.,The following example demonstrates how a web page can communicate with a 
web server while a user types characters in an input field:,In the example above, when a user types a character in the input field, a function 
called ""showHint()"" is executed.,The function is triggered by the onkeyup event.,Here is the HTML code:,Code explanation:,First, check if the input field is empty (str.length == 0). If it is, clear the 
content of the txtHint placeholder and exit the function.,However, if the input field is not empty, do the following:,The PHP file checks an array of names, and returns the corresponding name(s) to the 
browser:","Create an XMLHttpRequest object,Create the function to be executed when the server response is ready,Send the request off to a PHP file (gethint.php) on the server,Notice that q parameter is added gethint.php?q=""+str,The str variable holds the content of the input field","
<html>,<head>,<script>,function showHint(str) {,    
if (str.length == 0) { ,        
document.getElementById(""txtHint"").innerHTML = """";,        
return;,    } else {,        var xmlhttp = new 
XMLHttpRequest();,        xmlhttp.onreadystatechange = function() 
{,            if (this.readyState == 4 && 
this.status == 200) {,                document.getElementById(""txtHint"").innerHTML = 
this.responseText;,            
},        };,        xmlhttp.open(""GET"", ""gethint.php?q="" + str, true);,        xmlhttp.send();,    
},},</script>,</head>,<body>,<p><b>Start typing a name in the 
input field below:</b></p>,<form> ,First name: <input type=""text"" 
onkeyup=""showHint(this.value)"">,</form>,<p>Suggestions: <span id=""txtHint""></span></p>,
</body>,</html>",
AJAX ,Introduction,"Try it Yourself Examples in Every Chapter,AJAX Example Explained,What is AJAX?,How AJAX Works","AJAX Example,HTML Page,Function loadDoc()","In every chapter, you can edit the examples online, and click on a button to 
view the result. ,The HTML page contains a <div> section and a <button>.,The <div> 
section is used to display information from a server.,The <button> calls a function (if it is clicked).,The function requests data from a web 
server and displays it:,The ""ajax_info.txt"" file used in the example above, is a simple text file and looks like this:,AJAX = ,synchronous ,avaScript ,nd
,ML.,AJAX is not a programming language.,AJAX just uses a combination of:,AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes.
This means that it is possible to update parts of a web page, without reloading the whole page.","Update a web page without reloading the page,Request data from a server - after the page has loaded,Receive data from a server - after the page has loaded,Send data to a server - in the background,A browser built-in XMLHttpRequest object (to request data from a web server),JavaScript and HTML DOM (to display or use the data),1. An event occurs in a web page (the page is loaded, a button is clicked),2. An XMLHttpRequest object is created by JavaScript,3. The XMLHttpRequest object sends a request to a web server,4. The server processes the request,5. The server sends a response back to the web page,6. The response is read by JavaScript,7. Proper action (like page update) is performed by JavaScript","
<!DOCTYPE html>,<html>,
<body>,
<div id=""demo"">,  <h2>Let AJAX change this text</h2>, 
<button type=""button"" onclick=""loadDoc()"">Change Content</button>,
 </div>,
</body>,
</html>
,
  <h1>AJAX</h1>,<p>AJAX is not a programming language.</p>,<p>AJAX is a 
  technique for accessing web servers from a web page.</p>,<p>AJAX stands for 
  Asynchronous JavaScript And XML.</p>
",
AJAX - The XMLHttpRequest Object,,"The XMLHttpRequest Object,Create an XMLHttpRequest Object,Access Across Domains,XMLHttpRequest Object Methods,XMLHttpRequest Object Properties",Example,"The keystone of AJAX is the XMLHttpRequest object.,All modern browsers support the XMLHttpRequest object.,The XMLHttpRequest object can be used to exchange data with a server behind the 
scenes. This means that it is possible to update parts of a web page, without 
reloading the whole page.,All modern browsers (Chrome, Firefox, Edge (and IE7+), Safari, Opera) have a built-in XMLHttpRequest object.,Syntax for creating an XMLHttpRequest object:,The ""ajax_info.txt"" file used in the example above, is a simple text file and looks like this:,For security reasons, modern browsers do not allow access across domains.,This means that both the web page and the XML file it tries to load, must be located on the same server.,The examples on W3Schools all open XML files located on the W3Schools domain.,If you want to use the example above on one of your own web pages,
the XML files you load must be located on your own server.",,"
  <h1>AJAX</h1>,<p>AJAX is not a programming language.</p>,<p>AJAX is a 
  technique for accessing web servers from a web page.</p>,<p>AJAX stands for 
  Asynchronous JavaScript And XML.</p>
",
W3Schools ,XML Certificate,How Does It Work?,,,"Study for free at W3Schools.com,Study at your own speed,Test your skills with W3Schools online quizzes,Apply for your certificate by paying an exam fee,Take your exam online, at any time, and from any location",,
XML ,Quiz,"The Test,Count Your Score",,"You can test your XML skills with W3Schools' Quiz.,The test contains 25 questions and there is no time limit.,The test is not official, it's just a nice way to see how much you know, or don't know, about XML.,You will get 1 point for each correct answer. At the end of the Quiz,
your total score will be displayed. Maximum score is 25 points.",,,
XML ,Examples,,,"
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
,
",,,
"XSLT, XPath, and XQuery ,Functions Reference",Functions,XSLT Functions,,"XSLT 2.0, XPath 2.0, and XQuery 1.0, share the same functions library., Functions are often called with the fn: prefix, such as fn:string(). 
However, since fn: is the default prefix of the namespace, the function names do 
not need to be prefixed when called.,Component Extraction Functions on Durations, Dates and Times ,General Functions on Sequences,Functions That Test the Cardinality of Sequences ,Equals, Union, Intersection and Except ,Aggregate Functions,Functions that Generate Sequences,In addition, there are the following built-in XSLT functions:",,,
XSLT ,Elements Reference,XSLT Elements,,"The XSLT elements from the W3C Recommendation (XSLT Version 1.0).,The links in the ""Element"" column point to attributes and more
useful information about each specific element.",,,
XML DOM ,Parser Errors,XML Parser Error,Example,"When trying to open an XML document, a parser-error may occur.,If the parser encounters an error, it may load an XML 
document containing the error description.,The code example below tries to load an XML document that is not well-formed.
,You can read more about well-formed XML in ,.,Look at the XML file: ",,,
"XML DOM - The , Object",Comment,"The Comment object,Comment Object Properties,Comment Object Methods",,"The examples below use the XML file ,. ,
,The Comment object represents the content of comment nodes in a document.",,,
"XML DOM - The , Object",CDATASection,"The CDATASection object,CDATASection Object Properties,CDATASection Object Methods",,"The examples below use the XML file ,. ,
,The CDATASection object represents a CDATA section in a document.,A CDATA section contains text that will NOT be parsed by a parser. Tags inside a CDATA section will NOT be treated as markup and entities will not be expanded. 
The primary purpose is for including material such as XML fragments, without needing to escape all the delimiters.,The only delimiter that is recognized in a CDATA section is ""]]>"" - which indicates the end of the CDATA section. CDATA sections cannot be nested.",,,
"The , Object",XMLHttpRequest,"The XMLHttpRequest Object,XMLHttpRequest Object Methods,XMLHttpRequest Object Properties",,"With the XMLHttpRequest object you can update parts of a web 
page, without reloading the whole page.,
Create a simple XMLHttpRequest, and retrieve data from a TXT file.,
Retrieve header information of a resource (file).,
Retrieve specific header information of a resource (file).,
How a web page can communicate with a web server while a user type characters in an input field.,
How a web page can fetch information from a database with the XMLHttpRequest object.,
Create an XMLHttpRequest to retrieve data from an XML file and display the data in an HTML table.,The XMLHttpRequest object is used to exchange data with a server behind the scenes.,The XMLHttpRequest object is ,, because you can:","Update a web page without reloading the page,Request data from a server after the page has loaded ,Receive data from a server after the page has loaded,Send data to a server in the background",,
"XML DOM - The , Object",Text,"The Text object,Text Object Properties,Text Object Methods",,The Text object represents the textual content of an element or attribute.,,,
"XML DOM - The , Object",Attr,"The Attr object,Attr Object Properties",,"The Attr object represents an attribute of an Element object. The allowable 
values for attributes are usually defined in a DTD. ,Because the Attr object is also a Node, it inherits the Node object's properties and methods. However, 
an attribute does not have a parent node and is not considered to be a child node of an element, and will return 
null for many of the Node properties.",,,
"XML DOM - The , Object",Element,"The Element object,Element Object Properties,Element Object Methods",,"The Element object represents an element in an XML document. Elements may contain attributes,
other elements, or text. If an element contains text, the text is represented in a text-node., Text is always stored in text nodes. A common error in DOM 
processing is to navigate to an element node and expect it to contain the text. 
However, even the simplest element node has a text node under it. For example, 
in <year>2005</year>, there is an element node (year), and a text node under it, 
which contains the text (2005).,Because the Element object is also a Node, it inherits the Node object's properties and methods. ",,,
"XML DOM - The , Object",Document,"The XML Document Object,Document Object Properties,Document Object Methods,DocumentType Object Properties,DocumentImplementation Object Methods,ProcessingInstruction Object Properties",,"The Document object represents the entire XML document.,The Document object is the root of an XML document tree, and gives us the primary access to the document's data.,Since element nodes, text nodes, comments, processing instructions, etc. 
cannot exist outside the document, the Document object also contains methods to 
create these objects. The Node objects have a ownerDocument property which 
associates them with the Document where they were created.,Each document has a DOCTYPE attribute that whose value is either null or a DocumentType object.,The DocumentType object provides an interface to the entities defined for an 
XML document.,The DOMImplementation object performs 
operations that are independent of any particular instance of the document 
object model.,The ProcessingInstruction object represents a processing instruction.,A processing instruction is used as a way to keep 
processor-specific information in the text of the XML document.",,,
"XML DOM - The , Object",NamedNodeMap,"The NamedNodeMap object,NamedNodeMap Object Properties,NamedNodeMap Object Methods",,"The NamedNodeMap object represents an unordered list of nodes. ,The nodes in the NamedNodeMap can be accessed through their name.,The NamedNodeMap keeps itself up-to-date. If an element is deleted or added,
in the node list or the XML document, the list is automatically updated., In a named node map, the nodes are not returned in any particular order.",,,
"XML DOM - The , Object",NodeList,"The NodeList object,NodeList Object Properties,NodeList Object Methods",,"The NodeList object represents an ordered list of nodes. ,The nodes in the node list can be accessed through their index number (starting from 0).,The node list keeps itself up-to-date. If an element is deleted or added, in the node list or the XML document,
the list is automatically updated., In a node list, the nodes are returned in the order in which they are specified in the XML 
document.",,,
"XML DOM - The , Object",Node,"The Node Object,Node Object Properties,Node Object Methods",,"The Node object represents a single node in the document tree.,A node can be an element node, an attribute node, a text node, or any other of the node types explained in the 
, chapter.,Notice that while all objects inherits the Node properties / methods for 
dealing with parents and children, not all objects can have parents or children. 
For example, Text nodes may not have children, and adding children to such nodes results in a DOM error.",,,
XML DOM ,Node Types,"Node Types,Node Types - Return Values,NodeTypes - Named Constants",,"The DOM presents a document as a hierarchy of node objects.,The examples below use the XML file ,. ,The following table lists the different W3C node types, and which node types they 
may have as children:,The following table lists what the nodeName and the nodeValue properties will return for each node type:",,,
XML ,RSS,"What is RSS?,Why use RSS?,Who Should use RSS?,Benefits of RSS,The History of RSS,What RSS Version Should I Use?,Is RSS a Web Standard?,How RSS Works,RSS Example,Comments in RSS,RSS is Written in XML,The RSS <channel> Element,The <category> Element,The <copyright> Element,The <image> Element,The <language> Element,The <item> Element,The <author> Element,The <comments> Element,The <enclosure> Element,Get Your RSS Feed Up On The Web,Can I Manage my RSS Feed Myself?,Automated RSS,RSS Readers,I have an RSS Reader. Now what?,RSS Examples,RSS Reference,RSS <channel> Element,RSS <item> Element",RSS Document Example,"With RSS it is possible to distribute up-to-date web content from one web site to thousands of other web sites around the world.,RSS allows fast browsing for news and updates.,RSS was designed to show selected data.,Without RSS, users will have to check your site daily for new 
updates. This may be too time-consuming for many users. With an RSS feed (RSS is 
often called a News feed or RSS feed) they can 
check your site faster using an RSS aggregator (a site or program that 
gathers and sorts out RSS feeds).,Since RSS data is small and fast-loading, it can easily be used 
with services like cell phones or PDA's. ,Web-rings with similar information can easily share data on their web sites to make 
them better and more useful.,Webmasters who seldom update their web sites do not need RSS!,RSS is useful for web sites that are updated frequently, 
like:,Here are some benefits of using RSS:,
With RSS you can choose to view the news you want, the news that interest you and are relevant to your work.,
With RSS you can (finally) separate wanted information from unwanted information (spam)!,
With RSS you can create your own news channel, and publish it to the Internet!,RSS 1.0 is the only version that was developed using the W3C RDF (Resource Description Framework) standard.,The idea behind RDF was to help create a Semantic Web. However, this does not matter too much for ordinary users,
but by using web standards it will be easier for persons and applications to exchange data.,RSS 0.91 and RSS 2.0 are easier to understand than RSS 1.0. Our tutorial is based on RSS 2.0.,The syntax rules of RSS 2.0 are very simple and very strict.,There is no official standard for RSS.,RSS is used to share content between websites.,With RSS, you register your content with companies called aggregators.,So, to be a part of it: First, create an RSS document and save it with an .xml extension. Then, upload the file to your 
website. Next, register with an RSS aggregator. Each day the aggregator searches the registered websites for RSS documents, verifies the link, and displays 
information about the feed so clients can link to documents that interests them., Read our RSS Publishing chapter to view free RSS aggregation services.,RSS documents use a self-describing and simple syntax.,Here is a simple RSS document:,The first line in the document - the XML declaration - defines
the XML version and the character encoding used in the document. In this case the document conforms to the 1.0 specification
of XML and uses the UTF-8 character set.,The next line is the RSS declaration which identifies that this is an RSS document (in this case, RSS version 2.0).,The next line contains the <channel> element. This element is used to describe the RSS feed.,The <channel> element has three required child elements:,Each <channel> element can have one or more <item> elements.,Each <item> element defines an article or ""story"" in the RSS feed.,The <item> element has three required child elements:,Finally, the two last lines close the <channel> and <rss> elements.,The syntax for writing comments in RSS is similar to that of HTML:,Because RSS is XML, keep in mind that:,The RSS <channel> element describes the RSS feed.,Look at the following RSS document:,As mentioned before, the <channel> element describes the RSS feed, and has three required child elements:,The <channel> element usually contains one or more <item> elements. Each <item> element defines an article 
or ""story"" in the RSS feed.,Furthermore, there are several optional child elements of <channel>. We will explain the most important ones below.,The <category> child element is used to specify a category for your feed.,The <category> element makes it possible for RSS aggregators to group sites based on category.,The category for the RSS document above could be:,The <copyright> child element notifies about copyrighted material.,The copyright for the RSS document above could be:,The <image> child element allows an image to be displayed when aggregators present a feed.,The <image> element has three required child elements:,The image for the RSS document above could be:,The <language> child element is used to specify the language used to write your document.,The <language> element makes it possible for RSS aggregators to group sites based on language.,The language for the RSS document above could be:,Each <item> element defines an article or ""story"" in 
an RSS feed.,Look at the following RSS document:,As mentioned before, each <item> element defines an article or ""story"" in the RSS feed.,The <item> element has three required child elements:,Furthermore, there are several optional child elements of <item>. We will explain the most important ones below.,The <author> child element is used to specify the e-mail address of the author of an item., To prevent spam e-mails, some developers do not include the <author> element.,The author of the item in the RSS document above could be:,The <comments> child element allows an item to link to comments about that item.,A comment of the item in the RSS document above could be:,The <enclosure> child element allows a media-file to be included with an item.,The <enclosure> element has three required attributes:,A media-file included in the item in the RSS document above could be:,Having an RSS document is not useful if other people cannot 
reach it. ,Now it's time to get your RSS file up on the web. Here are the steps:,1. Name your RSS file. Notice that the file must have an .xml extension.,2. Validate your RSS file (a good validator can be found at
,).,3. Upload the RSS file to your web directory on your web server.,4. Copy the little orange , or
, button to your web directory.,5. Put the little orange ""RSS"" or ""XML"" button on the page where you will 
offer RSS to the world (e.g. on your home page). Then add a link to the button 
that links to the RSS file. The code will look something like this:,
<a href=""https://www.w3schools.com/xml/myfirstrss.xml"">,
<img src=""https://www.w3schools.com/xml/pic_rss.gif"" width=""36"" height=""14"">,
</a>.,6. Submit your RSS feed to the RSS Feed Directories (you can Google or Yahoo 
for ""RSS Feed Directories""). Note! The URL to 
your feed is not your home page, it is the URL to your feed, like 
""https://www.w3schools.com/xml/myfirstrss.xml"". Here is a free RSS aggregation service:,7. Register your feed with the major search engines:,8. Update your feed - After registering your RSS feed, you must make sure that you update your content frequently 
and that your RSS feed is constantly available.,The best way to ensure your RSS feed works 
the way you want, is to manage it yourself.,However, this can be very time consuming, 
especially for pages with lot of updates.,An alternative is to use a third-party automated RSS.,For users who only need an RSS feed for their personal website, some of the most popular blog (Web Log) managers 
that offer built-in RSS services are:,An RSS Reader is used to read RSS Feeds!,RSS readers are available for many different devices and OS.,There are a lot of different RSS readers. Some work as web services, and some are limited to windows (or Mac, PDA or UNIX):, Most browsers have a built-in RSS Reader. If you go to a web site that offers RSS feeds, you will see 
an RSS icon
, in the address bar, 
or toolbar. Click on the icon to view a list of the different feeds. Choose the feed you want to read.,Click on the little , or 
, button next to the RSS feed you 
want to read. Copy The URL you get in the browser window and paste it in your RSS reader.,These examples demonstrate RSS using our RSS reader to view the 
results.,
,
,
,
,
,
,
,
,
,
,
,
,
,The links in the ""Element"" column point to more information about each 
specific element.","RSS stands for ,eally ,imple ,yndication,RSS allows you to syndicate your site content,RSS defines an easy way to share and view headlines and content,RSS files can be automatically updated,RSS allows personalized views for different sites,RSS is written in XML,News sites - Lists news with title, date and descriptions,Companies - Lists news and new products,Calendars - Lists upcoming events and important days,Site changes - Lists changed pages or new pages,1997 - Dave Winer at UserLand develops scriptingNews. RSS was born,1999 - Netscape develops RSS 0.90 (which supported scriptingNews),1999 - Dave Winer develops scriptingNews 2.0b1 (which included RSS 0.90 features),1999 - Netscape develops RSS 0.91 (which included most features from scriptingNews 2.0b1),1999 - UserLand gets rid of scriptingNews and uses only RSS 0.91,1999 - Netscape stops their RSS development,2000 - UserLand releases the official RSS 0.91 specification,2000 - O'Reilly develops RSS 1.0. This format uses RDF and namespaces.,2000 - Dave Winer at UserLand develops RSS 0.92,2002 - Dave Winer develops RSS 2.0 after leaving UserLand,2003 - The official RSS 2.0 specification is released,About 50 % of all RSS feeds use RSS 0.91,About 25 % use RSS 1.0,The last 25 % is split between RSS 0.9x versions and RSS 2.0,<title> - Defines the title of the channel (e.g. W3Schools Home Page),<link> - Defines the hyperlink to the channel (e.g. https://www.w3schools.com),<description> - Describes the channel (e.g. Free web building tutorials),<title> - Defines the title of the item (e.g. RSS Tutorial),<link> - Defines the hyperlink to the item (e.g. https://www.w3schools.com/xml/xml_rss.asp),<description> - Describes the item (e.g. New RSS tutorial on W3Schools),All elements must have a closing tag,Elements are case sensitive,Elements must be properly nested,Attribute values must always be quoted,<title> - Defines the title of the channel (e.g. W3Schools Home Page),<link> - Defines the hyperlink to the channel (e.g. https://www.w3schools.com),<description> - Describes the channel (e.g. Free web building tutorials),<url> - Defines the URL to the image,<title> - Defines the text to display if the image could not be shown,<link> - Defines the hyperlink to the website that offers the channel,<title> - Defines the title of the item (e.g. RSS Tutorial),<link> - Defines the hyperlink to the item (e.g. https://www.w3schools.com/xml/xml_rss.asp),<description> - Describes the item (e.g. New RSS tutorial on W3Schools),url - Defines the URL to the media file,length - Defines the length (in bytes) of the media file,type - Defines the type of media file,: ,Google -,
 ,Bing - , - FREE! 
  QuiteRSS is an open-source, cross-platform RSS/Atom news reader. It is 
  versatile, and has a full set of options. QuietRSS has a rich set of social 
  sharing options (Email/Twitter/Facebook/.../Pocket/Etc). QuietRSS is fast 
  starting, and navigation is quick, - FREE! Simple, straightforward feed reader that easily handles large number of feeds. Has the essential options (not a lot of confusing ones). Does not require Java. Import or export OPML files. Option to open links in an external browser, - FREE! Windows-based RSS reader. Supports RSS versions 0.9x, 1.0 and 2.0 and Atom 0.1, 0.2 and 0.3, - FREE! An RSS reader plug-in for Internet Explorer and 
  Microsoft Outlook","
<?xml version=""1.0"" encoding=""UTF-8"" ?>,
<rss version=""2.0"">,
<channel>,
   
  <title>W3Schools Home Page</title>,
   
  <link>https://www.w3schools.com</link>,
   
  <description>Free web building tutorials</description>,
   
  <item>,
       
    <title>RSS Tutorial</title>,
       
    <link>https://www.w3schools.com/xml/xml_rss.asp</link>,
       
    <description>New RSS tutorial on W3Schools</description>,
   
  </item>,
   
  <item>,
       
    <title>XML Tutorial</title>,
       
    <link>https://www.w3schools.com/xml</link>,
       
    <description>New XML tutorial on W3Schools</description>,
   
  </item>,
</channel>,
</rss>
,
<?xml version=""1.0"" encoding=""UTF-8"" ?>,
<rss version=""2.0"">,
<channel>,
   
  <title>W3Schools Home Page</title>,
   
  <link>https://www.w3schools.com</link>,
   
  <description>Free web building tutorials</description>,
   
  <item>,
       
    <title>RSS Tutorial</title>,
       
    <link>https://www.w3schools.com/xml/xml_rss.asp</link>,
       
    <description>New RSS tutorial on W3Schools</description>,
   
  </item>,
   
  <item>,
       
    <title>XML Tutorial</title>,
       
    <link>https://www.w3schools.com/xml</link>,
       
    <description>New XML tutorial on W3Schools</description>,
   
  </item>,
</channel>,
</rss>,
<!-- This is an RSS comment -->,
<?xml version=""1.0"" encoding=""UTF-8"" ?>,
<rss version=""2.0"">,
<channel>,
   
  <title>W3Schools Home Page</title>,
   
  <link>https://www.w3schools.com</link>,
   
  <description>Free web building tutorials</description>,
   
  <item>,
       
    <title>RSS Tutorial</title>,
       
    <link>https://www.w3schools.com/xml/xml_rss.asp</link>,
       
    <description>New RSS tutorial on W3Schools</description>,
   
  </item>,
</channel>,
</rss>,
<category>Web development</category>,
<copyright>2006 Refsnes Data as. All rights reserved.</copyright>,
<image>,
   
  <url>https://www.w3schools.com/images/logo.gif</url>,
   
  <title>W3Schools.com</title>,
   
  <link>https://www.w3schools.com</link>,
</image>,
<language>en-us</language>,
<?xml version=""1.0"" encoding=""UTF-8"" ?>,
<rss version=""2.0"">,
<channel>,
   
  <title>W3Schools Home Page</title>,
   
  <link>https://www.w3schools.com</link>,
   
  <description>Free web building tutorials</description>,
   
  <item>,
       
    <title>RSS Tutorial</title>,
       
    <link>https://www.w3schools.com/xml/xml_rss.asp</link>,
       
    <description>New RSS tutorial on W3Schools</description>,
   
  </item>,
</channel>,
</rss>,
<author>hege@refsnesdata.no</author>,
<comments>https://www.w3schools.com/comments</comments>,
<enclosure url=""https://www.w3schools.com/xml/rss.mp3"",
length=""5000"" type=""audio/mpeg"" />",
XML ,RDF,"What is RDF?,RDF - Examples of Use,RDF is Designed to be Read by Computers,RDF is Written in XML,RDF and ""The Semantic Web"",RDF Resource, Property, and Property Value,RDF Statements,RDF Example,RDF Online Validator,RDF Elements,The <rdf:RDF> Element,The <rdf:Description> Element,Properties as Attributes,Properties as Resources,RDF Containers,The <rdf:Bag> Element,The <rdf:Seq> Element,The <rdf:Alt> Element,RDF Terms,RDF Collections,The rdf:parseType=""Collection"" Attribute,RDF Schema and Application Classes,RDF Schema (RDFS),RDFS Example,Example Abbreviated,The Dublin Core,RDF Example,RDF Reference,RDFS / RDF Classes,RDFS / RDF Properties,RDF Attributes",RDF Document Example,"RDF was designed to provide a common way to describe information so it can be 
read and understood by computer applications.,RDF descriptions are not designed to be displayed on the web.,RDF documents are written in XML. The 
XML language used by RDF is called RDF/XML. ,By using XML, RDF information can easily be exchanged between different types 
of computers using different types of operating systems and application 
languages.,The RDF language is a part of the 
W3C's Semantic Web Activity. W3C's ""Semantic Web Vision"" is a future where:,RDF uses Web identifiers (URIs) to identify resources.,RDF describes resources with properties and property values.,RDF identifies things using Web identifiers (URIs), and describes resources with properties and property values.,Explanation of Resource, Property, and Property value:,The following RDF document could describe the resource ""https://www.w3schools.com/rdf"":,The combination of a Resource, a Property, and a Property value forms a , (known as the , of a Statement).,Let's look at some example statements to get a better understanding:,Statement: ""The author of https://www.w3schools.com/rdf is Jan Egil Refsnes"".,Statement: ""The homepage of https://www.w3schools.com/rdf is https://www.w3schools.com"".,Here are two records from a CD-list:,Below is a few lines from an RDF document:,The first line of the RDF document is the XML declaration. The XML declaration is followed by the root element of RDF documents: ,.,The , namespace, specifies that elements with the rdf prefix are from the namespace ""http://www.w3.org/1999/02/22-rdf-syntax-ns#"".,The , namespace, specifies that elements with the cd prefix are from the namespace ""http://www.recshop.fake/cd#"".,The , element contains the description of the resource identified by the , attribute.,The elements:, etc. are properties of the resource., is useful when learning RDF. Here you can experiment with RDF files.,The online RDF Validator parses your RDF document, checks your syntax, and generates tabular and graphical views of your RDF document.,Copy and paste the example below into W3C's RDF validator:,When you parse the example above, 
,.,The main elements of RDF are the root element, <RDF>, and the <Description> element, which identifies a resource.,<rdf:RDF> is the root element of an RDF document. It defines the XML document to be an RDF document. It also contains a reference to the RDF namespace:,The <rdf:Description> element identifies a resource with the about attribute.,The <rdf:Description> element contains elements that describe the resource:,The elements, artist, country, company, price, and year, are defined in the http://www.recshop.fake/cd# 
namespace. This namespace is outside RDF (and not a part of RDF). RDF defines only the 
framework. The elements, artist, country, company, price, and year, must be defined by someone else (company, 
organization, person, etc).,The property elements can also be defined as attributes (instead of elements):,The property elements can also be defined as resources:,In the example above, the property artist does not have a value, but a reference to a resource containing information about the artist.,RDF containers are used to describe group of things.,The following RDF elements are used to describe groups: <Bag>, <Seq>, and <Alt>.,The <rdf:Bag> element is used to describe a list of values that do 
not have to be in a specific order.,The <rdf:Bag> element may contain duplicate values.,The <rdf:Seq> element is used to describe an ordered list of values (For example, in alphabetical order).,The <rdf:Seq> element may contain duplicate values.,The <rdf:Alt> element is used to describe a list of alternative values (the user can select only one of the values).,In the examples above we have talked about ""list of values"" when describing 
the container elements. In RDF these ""list of values"" are called members.,So, we have the following:,RDF collections describe groups that can ONLY contain the specified members.,As seen in the previous chapter, a container says that the containing resources are members - it does not say 
that other members are not allowed.,RDF collections are used to describe groups that can ONLY contain the specified members.,A collection is described by the attribute rdf:parseType=""Collection"".,RDF Schema (RDFS) is an extension to RDF.,RDF describes resources with classes, properties, and values.,In addition, RDF also needs a way to define application-specific classes and properties. Application-specific classes and properties must be defined using extensions to RDF.,One such extension is RDF Schema.,RDF Schema does not provide actual application-specific classes and properties.,Instead RDF Schema provides the framework to describe application-specific classes and properties.,Classes in RDF Schema are much like classes in object oriented programming languages. This allows resources to be defined as instances of classes, and subclasses of classes.,The following example demonstrates some of the RDFS facilities:,In the example above, the resource ""horse"" is a subclass of the class ""animal"".,Since an RDFS class is an RDF resource we can abbreviate the example above by 
using rdfs:Class instead of rdf:Description, and drop the rdf:type information:,That's it!,The Dublin Core Metadata Initiative (DCMI) has created some 
predefined properties for describing documents.,RDF is metadata (data about data). RDF is used to describe information resources.,The Dublin Core is a set of predefined properties for describing documents.,The first Dublin Core properties were defined at the , in 1995 and is currently maintained by the
,.,A quick look at the table above indicates that RDF is ideal for representing Dublin Core information.,The following example demonstrates the use of some of the Dublin Core 
properties in an RDF document:,The RDF namespace  (xmlns:rdf) is:
,The RDFS namespace  (xmlns:rdfs ) is:
,The recommended file extension for RDF files is ,. However, the 
extension , is 
often used to provide compatibility with old xml parsers.,The MIME type should be ,.","RDF stands for ,esource ,escription ,ramework,RDF is a framework for describing resources on the web,RDF is designed to be read and understood by computers,RDF is not designed for being displayed to people,RDF is written in XML,RDF is a part of the W3C's Semantic Web Activity,RDF is a W3C Recommendation from 10. February 2004,Describing properties for shopping items, such as price and availability,Describing time schedules for web events,Describing information about web pages (content, author, created and modified date),Describing content and rating for web pictures,Describing content for search engines,Describing electronic libraries,Web information has exact meaning ,Web information can be understood and processed by computers ,Computers can integrate information from the web ,A , is anything that can have a URI, such as ""https://www.w3schools.com/rdf"",A , is a Resource that has a name, such as ""author"" or ""homepage"",A , is the value of a Property, such as ""Jan Egil Refsnes"" or ""https://www.w3schools.com"" (note that a property value can be another resource),The subject of the statement above is: https://www.w3schools.com/rdf,The predicate is: author,The object is: Jan Egil Refsnes,The subject of the statement above is: https://www.w3schools.com/rdf,The predicate is: homepage,The object is: https://www.w3schools.com,A container is a resource that contains things,The contained things are called members (not list of values)","
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:si=""https://www.w3schools.com/rdf/"">,
  <rdf:Description rdf:about=""https://www.w3schools.com"">,
     
    <si:title>W3Schools</si:title>,
 
    <si:author>Jan Egil Refsnes</si:author>,
  </rdf:Description>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<RDF>,
   
  <Description about=""https://www.w3schools.com/rdf"">,
       
    <author>Jan Egil Refsnes</author>,
       
    <homepage>https://www.w3schools.com</homepage>,
   
  </Description>,
</RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:cd=""http://www.recshop.fake/cd#"">,
<rdf:Description,
 rdf:about=""http://www.recshop.fake/cd/Empire Burlesque"">,
   
  <cd:artist>Bob Dylan</cd:artist>,
   
  <cd:country>USA</cd:country>,
   
  <cd:company>Columbia</cd:company>,
   
  <cd:price>10.90</cd:price>,
   
  <cd:year>1985</cd:year>,
</rdf:Description>,
<rdf:Description,
 rdf:about=""http://www.recshop.fake/cd/Hide your heart"">,
   
  <cd:artist>Bonnie Tyler</cd:artist>,
   
  <cd:country>UK</cd:country>,
   
  <cd:company>CBS Records</cd:company>,
   
  <cd:price>9.90</cd:price>,
   
  <cd:year>1988</cd:year>,
</rdf:Description>,
.,
.,
.,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:si=""https://www.w3schools.com/rdf/"">,
  <rdf:Description rdf:about=""https://www.w3schools.com"">,
     
    <si:title>W3Schools.com</si:title>,
 
    <si:author>Jan Egil Refsnes</si:author>,
  </rdf:Description>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"">,
 
...,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:cd=""http://www.recshop.fake/cd#"">,
<rdf:Description,
 rdf:about=""http://www.recshop.fake/cd/Empire Burlesque"">,
   
  <cd:artist>Bob Dylan</cd:artist>,
   
  <cd:country>USA</cd:country>,
   
  <cd:company>Columbia</cd:company>,
   
  <cd:price>10.90</cd:price>,
   
  <cd:year>1985</cd:year>,
</rdf:Description>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:cd=""http://www.recshop.fake/cd#"">,
<rdf:Description,
 rdf:about=""http://www.recshop.fake/cd/Empire Burlesque"",
  cd:artist=""Bob Dylan""  cd:country=""USA"",
  cd:company=""Columbia""  cd:price=""10.90"",
  cd:year=""1985"" />,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:cd=""http://www.recshop.fake/cd#"">,
<rdf:Description,
 rdf:about=""http://www.recshop.fake/cd/Empire Burlesque"">,
   
  <cd:artist rdf:resource=""http://www.recshop.fake/cd/dylan"" />,
   
  ...,
   
  ...,
</rdf:Description>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:cd=""http://www.recshop.fake/cd#"">,
<rdf:Description,
 rdf:about=""http://www.recshop.fake/cd/Beatles"">,
  
 <cd:artist>,
      
   <rdf:Bag>,
          
     <rdf:li>John</rdf:li>,
          
     <rdf:li>Paul</rdf:li>,
          
     <rdf:li>George</rdf:li>,
          
     <rdf:li>Ringo</rdf:li>,
      
   </rdf:Bag>,
   
  </cd:artist>,
</rdf:Description>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:cd=""http://www.recshop.fake/cd#"">,
<rdf:Description,
 rdf:about=""http://www.recshop.fake/cd/Beatles"">,
  
 <cd:artist>,
      
   <rdf:Seq>,
          
     <rdf:li>George</rdf:li>,
          
     <rdf:li>John</rdf:li>,
          
     <rdf:li>Paul</rdf:li>,
          
     <rdf:li>Ringo</rdf:li>,
      
   </rdf:Seq>,
   
  </cd:artist>,
</rdf:Description>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:cd=""http://www.recshop.fake/cd#"">,
<rdf:Description,
 rdf:about=""http://www.recshop.fake/cd/Beatles"">,
  
 <cd:format>,
      
   <rdf:Alt>,
          
     <rdf:li>CD</rdf:li>,
          
     <rdf:li>Record</rdf:li>,
          
     <rdf:li>Tape</rdf:li>,
      
   </rdf:Alt>,
   
  </cd:format>,
</rdf:Description>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:cd=""http://recshop.fake/cd#"">,
<rdf:Description,
rdf:about=""http://recshop.fake/cd/Beatles"">,
 
<cd:artist rdf:parseType=""Collection"">,
   
<rdf:Description rdf:about=""http://recshop.fake/cd/Beatles/George""/>,
   
<rdf:Description rdf:about=""http://recshop.fake/cd/Beatles/John""/>,
   
<rdf:Description rdf:about=""http://recshop.fake/cd/Beatles/Paul""/>,
   
<rdf:Description rdf:about=""http://recshop.fake/cd/Beatles/Ringo""/>,
 
</cd:artist>,
</rdf:Description>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:rdfs=""http://www.w3.org/2000/01/rdf-schema#"",
xml:base=""http://www.animals.fake/animals#"">,
<rdf:Description rdf:ID=""animal"">,
   
  <rdf:type
   rdf:resource=""http://www.w3.org/2000/01/rdf-schema#Class""/>,
</rdf:Description>,
<rdf:Description rdf:ID=""horse"">,
   
  <rdf:type
   rdf:resource=""http://www.w3.org/2000/01/rdf-schema#Class""/>,
   
  <rdfs:subClassOf rdf:resource=""#animal""/>,
</rdf:Description>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:rdfs=""http://www.w3.org/2000/01/rdf-schema#"",
xml:base=""http://www.animals.fake/animals#"">,
<rdfs:Class rdf:ID=""animal"" />,
<rdfs:Class rdf:ID=""horse"">,
   
  <rdfs:subClassOf rdf:resource=""#animal""/>,
</rdfs:Class>,
</rdf:RDF>
,
<?xml version=""1.0""?>,
<rdf:RDF,
xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#"",
xmlns:dc= ""http://purl.org/dc/elements/1.1/"">,
<rdf:Description rdf:about=""https://www.w3schools.com"">,
   
  <dc:description>W3Schools - Free tutorials</dc:description>,
   
  <dc:publisher>Refsnes Data as</dc:publisher>,
   
  <dc:date>2008-09-01</dc:date>,
   
  <dc:type>Web Development</dc:type>,
   
  <dc:format>text/html</dc:format>,
   
  <dc:language>en</dc:language>,
</rdf:Description>,
</rdf:RDF>
",
XML ,Soap,"Why SOAP?,SOAP Building Blocks,Syntax Rules,Skeleton SOAP Message,The SOAP Envelope Element,The xmlns:soap Namespace,The encodingStyle Attribute,The SOAP Header Element,The mustUnderstand Attribute,The actor Attribute,The encodingStyle Attribute,The SOAP Body Element,The SOAP Fault Element,The HTTP Protocol,SOAP Binding,Content-Type,Content-Length,A SOAP Example",,"It is important for web applications to be able to communicate over the Internet.,The best way to communicate between applications is over HTTP,
because HTTP is supported by all Internet browsers and
servers. SOAP was created to accomplish this.,SOAP provides a way to communicate between applications running on different
operating systems, with different technologies and programming
languages.,A SOAP message is an ordinary XML document containing the following elements:,All the elements above are declared in the default namespace for the SOAP envelope:,and the default namespace for SOAP encoding and data types is:,Here are some important syntax rules:,The required SOAP Envelope element is the root element of a SOAP message. This element defines the XML document as a SOAP message.,Notice the xmlns:soap namespace in the example above. It should always have the value of: ""http://www.w3.org/2003/05/soap-envelope/"".,The namespace defines the Envelope as a SOAP Envelope.,If a different namespace is used, the application generates an error and discards the message.,The encodingStyle attribute is used to define the data types used in the 
document. This attribute may appear on any SOAP element, and applies to the element's contents and all child elements.,A SOAP message has no default encoding.,The optional  SOAP Header element contains application-specific information (like authentication, payment, etc) about the SOAP message.,If the Header element is present, it must be the first child element of the Envelope element., All immediate child elements of the Header element must be namespace-qualified.,The example above contains a header with a ""Trans"" element, a ""mustUnderstand"" 
attribute with a value of 1, and a value of 234.,SOAP defines three attributes in the default namespace. These attributes are: mustUnderstand, 
actor, and encodingStyle.,The attributes defined in the SOAP Header defines how a recipient should process the SOAP message.,The SOAP mustUnderstand attribute can be used to indicate whether a header entry is mandatory or optional for the recipient to process.,If you add mustUnderstand=""1"" to a child element of the Header element it indicates that the receiver processing the Header must recognize the element. If 
the receiver does not recognize the element it will fail when processing the Header.,A SOAP message may travel from a sender to a receiver by passing different 
endpoints along the message path. However, not all parts of a SOAP message may be intended for the ultimate 
endpoint, instead, it may be intended for one or more of the endpoints on the message path.,The SOAP actor attribute is used to address the Header element to a specific endpoint.,The encodingStyle attribute is used to define the data types used in the 
document. This attribute may appear on any SOAP element, and it will apply to that 
element's contents and all child elements.,A SOAP message has no default encoding.,The required SOAP Body element contains the actual SOAP message intended for the ultimate endpoint of the message. ,Immediate child elements of the SOAP Body element may be namespace-qualified.,The example above requests the price of apples. Note that the m:GetPrice and 
the Item elements above are application-specific elements. They are not a part of the SOAP namespace. ,A SOAP response could look something like this:,The optional SOAP Fault element is used to indicate error 
messages.,The  SOAP Fault element holds errors and 
status information for a SOAP message.,If a Fault element is present, it must appear as a child element
of the Body element. A Fault element can only appear once in a SOAP message.,The SOAP Fault element has the following sub elements:,The faultcode values defined below must be used in the faultcode element when 
describing faults:,HTTP communicates over TCP/IP. An HTTP client connects to an HTTP server using TCP. After establishing a connection, the client can send an HTTP request message to the server:,The server then processes the request and sends an HTTP response back to the client. The response contains a status code that indicates the status of the request:,In the example above, the server returned a status code of 200. This is the standard success code for HTTP.,If the server could not decode the request, it could have returned something like this:,The SOAP specification defines the structure of the SOAP messages, not how 
they are exchanged. This gap is filled by what is called ""SOAP Bindings"". SOAP 
bindings are mechanisms which allow SOAP messages to be effectively exchanged 
using a transport protocol.,Most SOAP implementations provide bindings for common transport protocols, 
such as HTTP or SMTP.,HTTP is synchronous and widely used. A SOAP HTTP request specifies at least two HTTP headers: Content-Type and Content-Length.,SMTP is asynchronous and is used in last resort or particular cases.,Java implementations of SOAP usually provide a specific binding for the JMS 
(Java Messaging System) protocol.,The Content-Type header for a SOAP request and response defines the MIME type for the message and the 
character encoding (optional) used for the XML body of the request or response.,The Content-Length header for a SOAP request and response specifies the number of bytes in the body of the request or response.,In the example below, a GetStockPrice request is sent to a server. The request has a StockName parameter,
and a Price parameter that will be returned in the response. The namespace for the function is defined in ""http://www.example.org/stock"".","SOAP stands for ,imple ,bject ,ccess 
  ,rotocol,SOAP is an application communication protocol,SOAP is a format for sending and receiving messages,SOAP is platform independent,SOAP is based on XML,SOAP is a W3C recommendation,An Envelope element that identifies the XML document as a SOAP message,A Header element that contains header information,A Body element that contains call and response information,A Fault element containing errors and status information,A SOAP message MUST be encoded using XML,A SOAP message MUST use the SOAP Envelope namespace,A SOAP message must NOT contain a DTD reference,A SOAP message must NOT contain XML Processing Instructions","
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
<soap:Header>,
  ...,
</soap:Header>,
<soap:Body>,
  ...,
   
  <soap:Fault>,
     
    ...,
   
  </soap:Fault>,
</soap:Body>,
</soap:Envelope>
,
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
   
  ...,
   
  Message information goes here,
   
  ...,
</soap:Envelope>
,
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
   
  ...,
   
  Message information goes here,
   
  ...,
</soap:Envelope>
,
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
<soap:Header>,
 
<m:Trans xmlns:m=""https://www.w3schools.com/transaction/"",
 
soap:mustUnderstand=""1"">234,
 
</m:Trans>,
</soap:Header>,...,
...,
</soap:Envelope>
,
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
<soap:Header>,
 
<m:Trans xmlns:m=""https://www.w3schools.com/transaction/"",
 
soap:mustUnderstand=""1"">234,
 
</m:Trans>,
</soap:Header>,
...,
...,
</soap:Envelope>
,
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
<soap:Header>,
 
<m:Trans xmlns:m=""https://www.w3schools.com/transaction/"",
 
soap:actor=""https://www.w3schools.com/code/"">234,
 
</m:Trans>,
</soap:Header>,...,
...,</soap:Envelope>
,
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
<soap:Body>,
    
   <m:GetPrice xmlns:m=""https://www.w3schools.com/prices"">,
         
      <m:Item>Apples</m:Item>,
    
   </m:GetPrice>,
</soap:Body>,
</soap:Envelope>
,
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
<soap:Body>,
    
   <m:GetPriceResponse xmlns:m=""https://www.w3schools.com/prices"">,
         
      <m:Price>1.90</m:Price>,
    
   </m:GetPriceResponse>,
</soap:Body>,
</soap:Envelope>
,
POST /InStock HTTP/1.1,
Host: www.example.org,
Content-Type: application/soap+xml; charset=utf-8,
Content-Length: nnn,
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
  <soap:Body xmlns:m=""http://www.example.org/stock"">,
   <m:GetStockPrice>,
         
      <m:StockName>IBM</m:StockName>,
  </m:GetStockPrice>,
  </soap:Body>,
</soap:Envelope>
,
HTTP/1.1 200 OK,
Content-Type: application/soap+xml; charset=utf-8,
Content-Length: nnn,
<?xml version=""1.0""?>,
 ,<soap:Envelope,
xmlns:soap=""http://www.w3.org/2003/05/soap-envelope/"",
soap:encodingStyle=""http://www.w3.org/2003/05/soap-encoding"">,
  <soap:Body xmlns:m=""http://www.example.org/stock"">,
     
    <m:GetStockPriceResponse>,
         
      <m:Price>34.5</m:Price>,
     
    </m:GetStockPriceResponse>,
  </soap:Body>,
</soap:Envelope>
",
XML ,WSDL,"WSDL Documents,WSDL Example,The <portType> Element,WSDL One-Way Operation,WSDL Request-Response Operation,WSDL Binding to SOAP",,"An WSDL document describes a web service. It specifies the location 
of the service, and  
the methods of the service, using these major elements:,The main structure of a WSDL document looks like this:,This is a simplified fraction of a WSDL document:,In this example the, element defines ""glossaryTerms"" 
as the name of a ,, and ""getTerm"" as the name of an ,.,The ""getTerm"" operation has an , called ""getTermRequest"" 
and an , called ""getTermResponse"".,The, elements define the , of each message and 
the associated data types.,The <portType> element defines ,, the , that can be performed, and the , that are involved.,The request-response type is the most common operation type, but WSDL defines four types:,A one-way operation example:,In the example above, the portType ""glossaryTerms"" defines a one-way operation called ""setTerm"". ,The ""setTerm"" operation allows input of new glossary terms messages using a ""newTermValues"" 
message with the input parameters ""term"" and ""value"". However, no output is  
defined for the operation. ,A request-response operation example:,In the example above, the portType ""glossaryTerms"" defines a request-response operation called ""getTerm"".,The ""getTerm"" operation requires an input message called ""getTermRequest"" 
with a parameter called ""term"", and will return an output message called ""getTermResponse"" 
with a parameter called ""value"".,WSDL bindings defines the message format and protocol details for a web service.,A request-response operation example:,The, element has two attributes - name and type.,The name attribute (you can use any name you want) defines the name of the 
binding, and the type attribute points to the port for the binding, in this case the ""glossaryTerms"" port.,The , element has two attributes - style and transport.,The style attribute can be ""rpc"" or ""document"". In this case we use document. The transport attribute defines the SOAP protocol to use.
In this case we use HTTP.,The, element defines each operation that the portType exposes.,For each operation the corresponding SOAP action has to be defined. You must 
also specify how the input and output are encoded. In this case we use ""literal"".","WSDL stands for Web Services Description Language,WSDL is used to describe web services,WSDL is written in XML,WSDL is a W3C recommendation from 26. June 2007","
<definitions>,
<types>,
   
  data type definitions........,
</types>,
<message>,
   
  definition of the data being communicated....,
</message>,
<portType>,
   
  set of operations......,
</portType>,
<binding>,
   
  protocol and data format specification....,
</binding>,
</definitions>
,
<message name=""getTermRequest"">,
    
   <part name=""term"" type=""xs:string""/>,
</message>,
<message name=""getTermResponse"">,
    
   <part name=""value"" type=""xs:string""/>,
</message>,
<portType name=""glossaryTerms"">,
   
  <operation name=""getTerm"">,
       
    <input message=""getTermRequest""/>,
       
    <output message=""getTermResponse""/>,
   
  </operation>,
</portType>
,
<message name=""newTermValues"">,
    
   <part name=""term"" type=""xs:string""/>,
    
   <part name=""value"" type=""xs:string""/>,
</message>,
<portType name=""glossaryTerms"">,
    
   <operation name=""setTerm"">,
         
      <input name=""newTerm"" message=""newTermValues""/>,
    
   </operation>,
</portType >
,
<message name=""getTermRequest"">,
    
   <part name=""term"" type=""xs:string""/>,
</message>,
<message name=""getTermResponse"">,
    
   <part name=""value"" type=""xs:string""/>,
</message>,
<portType name=""glossaryTerms"">,
   
  <operation name=""getTerm"">,
     
  <input message=""getTermRequest""/>,
     
  <output message=""getTermResponse""/>,
   
  </operation>,
</portType>
,
<message name=""getTermRequest"">,
    
   <part name=""term"" type=""xs:string""/>,
</message>,
<message name=""getTermResponse"">,
    
   <part name=""value"" type=""xs:string""/>,
</message>,
<portType name=""glossaryTerms"">,
   
  <operation name=""getTerm"">,
           
        <input message=""getTermRequest""/>,
                 
              <output message=""getTermResponse""/>,
                 
                </operation>,
                </portType>,
<binding type=""glossaryTerms"" name=""b1"">,
   <soap:binding style=""document"",
   transport=""http://schemas.xmlsoap.org/soap/http"" />,
     <operation>,
         <soap:operation
     soapAction=""http://example.com/getTerm""/>,
         <input><soap:body use=""literal""/></input>,
         <output><soap:body use=""literal""/></output>,
   
  </operation>,
</binding>
",
XML ,Web Services,"WSDL,SOAP,RDF,RSS,What You Should Already Know,Web Services,Interoperability has Highest Priority,Web Services take Web-applications to the Next Level,Web Services have Two Types of Uses,A Web Service Example,Example Explained,Put the Web Service on Your Web Site,How To Do It",,"Web services are web application components.,Web services can be published, found, and used on the Web.,This tutorial introduces WSDL, SOAP, RDF, and RSS.,Before you study web services you should have a basic understanding of XML and XML Namespaces.,If you want to study these subjects first, please read our ,.,When all major platforms could access the Web using Web browsers, different 
platforms couldn't interact. For these platforms to work together, Web-applications 
were developed. ,Web-applications are simply applications that run on the web. These are built 
around the Web browser standards and can be used by any browser on any 
platform.,By using Web services, your application can publish its function or message to 
the rest of the world.,Web services use XML to code and to decode data, and SOAP to transport it 
(using open protocols).,With Web services, your accounting department's Win 2k server's billing system 
can connect with your IT supplier's UNIX server.,There are things applications need very often. 
So why make these over and over again? ,Web services can offer application-components like: currency conversion, 
weather reports, or even language translation as services. ,Web services can help to solve the interoperability problem 
by giving different applications a way to link their data. ,With Web services you can exchange data between different applications and 
different platforms.,Any application can have a Web Service component.,Web Services can be created regardless of programming language.,In the following example we will use ASP.NET to create a simple Web Service 
that converts the temperature from Fahrenheit to Celsius, and vice versa:,This document is saved as an .asmx file. This is the ASP.NET file extension for XML Web Services., To run this example, you will need a .NET server.,The first line in the example states that this is a Web Service, written in VBScript, and has the class name ""TempConvert"":,The next lines import the namespace ""System.Web.Services"" from the .NET framework:,The next line defines that the ""TempConvert"" class is a WebService class type:,The next steps are basic VB programming. This application has two functions. One to convert from Fahrenheit to Celsius, and one to convert from Celsius to Fahrenheit.,The only difference from a normal application is that this function is defined as a ""WebMethod()"".  ,Use ""WebMethod()"" to convert the functions in your application into web services:,Then, end the class:,Publish the .asmx file on a server with .NET support, and you will have your first working Web Service.,Using a form and the HTTP POST method, you can put the web service on your site, like this:,Here is the code to add the Web Service to a web page:,Substitute the ""tempconvert.asmx"" with the address 
of your web service like:,http://www.example.com/xml/tempconvert.asmx","WSDL stands for Web Services Description Language,WSDL is an XML-based language for describing Web services.,WSDL is a W3C recommendation,SOAP stands for Simple Object Access Protocol,SOAP is an XML based protocol for accessing Web Services.,SOAP is based on XML,SOAP is a W3C recommendation,RDF stands for Resource Description Framework,RDF is a framework for describing resources on the web,RDF is written in XML,RDF is a W3C Recommendation,RSS stands for Really Simple Syndication,RSS allows you to syndicate your site content,RSS defines an easy way to share and view headlines and content,RSS files can be automatically updated,RSS allows personalized views for different sites,RSS is written in XML,Web services are application components,Web services communicate using open protocols,Web services are self-contained and self-describing,Web services can be discovered using UDDI,Web services can be used by other applications,HTTP and XML is the basis for Web services","
<form
action='tempconvert.asmx/FahrenheitToCelsius',
method=""post"" target=""_blank"">,
<table>,
   
  <tr>,
       
    <td>Fahrenheit to Celsius:</td>,
       
    <td>,
    <input class=""frmInput"" type=""text""
    size=""30"" name=""Fahrenheit"">,
    </td>,
   
  </tr>,
   
  <tr>,
       
    <td></td>,
       
    <td align=""right"">,
     <input type=""submit""
    value=""Submit"" class=""button"">,
     </td>,
   
  </tr>,
</table>,
</form>,
<form
action='tempconvert.asmx/CelsiusToFahrenheit',
method=""post"" target=""_blank"">,
<table>,
   
  <tr>,
       
    <td>Celsius to Fahrenheit:</td>,
       
    <td>,
    <input class=""frmInput"" type=""text""
    size=""30"" name=""Celsius"">,
    </td>,
   
  </tr>,
   
  <tr>,
       
    <td></td>,
       
    <td align=""right"">,
    <input type=""submit""
    value=""Submit"" class=""button"">,
    </td>,
   
  </tr>,
</table>,
</form>",
"XML Schema ,XSD Elements,XSD Restrictions/Facets for Datatypes",Reference,,,,,,
"XSD , Data Types",Miscellaneous,"Boolean Data Type,Binary Data Types,AnyURI Data Type,Miscellaneous Data Types,Restrictions on Miscellaneous Data Types",,"Other miscellaneous data types are boolean, base64Binary, hexBinary, float, double, anyURI, QName, and NOTATION.,The boolean data type is used to specify a true or false value.,The following is an example of a boolean declaration in a schema:,An element in your document might look like this:, Legal values for boolean are true, false, 1 (which indicates true), and 0 (which indicates false).,Binary data types are used to express binary-formatted data.,We have two binary data types:,The following is an example of a hexBinary declaration in a schema:,The anyURI data type is used to specify a URI.,The following is an example of an anyURI declaration in a schema:,An element in your document might look like this:, If a URI has spaces, replace them with %20.,Restrictions that can be used with the other data types:","base64Binary (Base64-encoded binary data),hexBinary (hexadecimal-encoded binary data),enumeration (a Boolean data type cannot use this constraint),length (a Boolean data type cannot use this constraint),maxLength (a Boolean data type cannot use this constraint),minLength (a Boolean data type cannot use this constraint),pattern,whiteSpace","
<xs:attribute name=""disabled"" type=""xs:boolean""/>
,
<price disabled=""true"">999</price>
,
<xs:element name=""blobsrc"" type=""xs:hexBinary""/>
,
<xs:attribute name=""src"" type=""xs:anyURI""/>
,
<pic src=""https://www.w3schools.com/images/smiley.gif"" />
",
"XSD , Data Types",Numeric,"Decimal Data Type,Integer Data Type,Numeric Data Types,Restrictions on Numeric Data Types",,"Decimal data types are used for numeric values.,The decimal data type is used to specify a numeric value.,The following is an example of a decimal declaration in a schema:,An element in your document might look like this:,Or it might look like this:,Or it might look like this:,Or it might look like this:,Or it might look like this:,The integer data type is used to specify a numeric value without a fractional component.,The following is an example of an integer declaration in a schema:,An element in your document might look like this:,Or it might look like this:,Or it might look like this:,Or it might look like this:,Note that all of the data types below derive from the Decimal data type 
(except for decimal itself)!,Restrictions that can be used with Numeric data types:","enumeration,fractionDigits,maxExclusive,maxInclusive,minExclusive,minInclusive,pattern,totalDigits,whiteSpace","
<xs:element name=""price"" type=""xs:decimal""/>
,
<price>999.50</price>
,
<price>+999.5450</price>
,
<price>-999.5230</price>
,
<price>0</price>
,
<price>14</price>
,
<xs:element name=""price"" type=""xs:integer""/>
,
<price>999</price>,
<price>+999</price>
,
<price>-999</price>
,
<price>0</price>
",
"XSD , Data Types",Date and Time,"Date Data Type,Time Data Type,DateTime Data Type,Duration Data Type,Date and Time Data Types,Restrictions on Date Data Types",,"Date and time data types are used for values that contain date and time.,The date data type is used to specify a date.,The date is specified in the following form ""YYYY-MM-DD"" where:, All components are required!,The following is an example of a date declaration in a schema:,An element in your document might look like this:,To specify a time zone, you can either enter a date in UTC time by 
adding a ""Z"" behind the date - like this:,or you can specify an offset from the UTC time by adding a positive or negative time 
behind the date - like this:,The time data type is used to specify a time.,The time is specified in the following form ""hh:mm:ss"" where:, All components are required!,The following is an example of a time declaration in a schema:,An element in your document might look like this:,Or it might look like this:,To specify a time zone, you can either enter a time in UTC time by adding a ""Z"" behind the time - like this:,or you can specify an offset from the UTC time by adding a positive or negative time behind the time - like this:,The dateTime data type is used to specify a date and a time.,The dateTime is specified in the following form ""YYYY-MM-DDThh:mm:ss"" where:, All components are required!,The following is an example of a dateTime declaration in a schema:,An element in your document might look like this:,Or it might look like this:,To specify a time zone, you can either enter a dateTime in UTC time by 
adding a ""Z"" behind the time - like this:,or you can specify an offset from the UTC time by adding a positive or negative time 
behind the time - like this:,The duration data type is used to specify a time interval.,The time interval is specified in the following form ""PnYnMnDTnHnMnS"" where:,The following is an example of a duration declaration in a schema:,An element in your document might look like this:,The example above indicates a period of five years.,Or it might look like this:,The example above indicates a period of five years, two months, and 10 days.,Or it might look like this:,The example above indicates a period of five years, two months, 10 days, and 15 hours.,Or it might look like this:,The example above indicates a period of 15 hours.,To specify a negative duration, enter a minus sign before the P:,The example above indicates a period of minus 10 days.,Restrictions that can be used with Date data types:","YYYY indicates the year,MM indicates the month,DD indicates the day,hh indicates the hour,mm indicates the minute,ss indicates the second,YYYY indicates the year,MM indicates the month,DD indicates the day,T indicates the start of the required time section,hh indicates the hour,mm indicates the minute,ss indicates the second,P indicates the period (required),nY indicates the number of years,nM indicates the number of months,nD indicates the number of days,T indicates the start of a time section (required if you are going to 
  specify hours, minutes, or seconds),nH indicates the number of hours,nM indicates the number of minutes,nS indicates the number of seconds,enumeration,maxExclusive,maxInclusive,minExclusive,minInclusive,pattern,whiteSpace","
<xs:element name=""start"" type=""xs:date""/>
,
<start>2002-09-24</start>
,
<start>2002-09-24Z</start>
,
<start>2002-09-24-06:00</start>,
or,
<start>2002-09-24+06:00</start>
,
<xs:element name=""start"" type=""xs:time""/>
,
<start>09:00:00</start>
,
<start>09:30:10.5</start>
,
<start>09:30:10Z</start>
,
<start>09:30:10-06:00</start>,
or,
<start>09:30:10+06:00</start>
,
<xs:element name=""startdate"" type=""xs:dateTime""/>
,
<startdate>2002-05-30T09:00:00</startdate>
,
<startdate>2002-05-30T09:30:10.5</startdate>
,
<startdate>2002-05-30T09:30:10Z</startdate>
,
<startdate>2002-05-30T09:30:10-06:00</startdate>,
or,
<startdate>2002-05-30T09:30:10+06:00</startdate>
,
<xs:element name=""period"" type=""xs:duration""/>
,
<period>P5Y</period>
,
<period>P5Y2M10D</period>
,
<period>P5Y2M10DT15H</period>
,
<period>PT15H</period>
,
<period>-P10D</period>
",
"XSD , Data Types",String,"String Data Type,NormalizedString Data Type,Token Data Type,String Data Types,Restrictions on String Data Types",,"String data types are used for values that contains character strings.,The string data type can contain characters, line feeds, carriage returns, and tab characters.,The following is an example of a string declaration in a schema:,An element in your document might look like this:,Or it might look like this:, The XML processor will not modify the value if you use the string data type.,The normalizedString data type is derived from the String data type.,The normalizedString data type also contains characters, but the XML processor will remove line feeds, carriage returns, and tab characters.,The following is an example of a normalizedString declaration in a schema:,An element in your document might look like this:,Or it might look like this:, In the example above the XML processor will replace the tabs with spaces.,The token data type is also derived from the String data type.,The token data type also contains characters, but the XML processor will 
remove line feeds, carriage returns, tabs, leading and trailing spaces, and multiple spaces.,The following is an example of a token declaration in a schema:,An element in your document might look like this:,Or it might look like this:, In the example above the XML processor will remove the tabs.,Note that all of the data types below derive from the String data type (except for string itself)!,Restrictions that can be used with String data types:","enumeration,length,maxLength,minLength,pattern (NMTOKENS, IDREFS, and ENTITIES cannot use this constraint),whiteSpace","
<xs:element name=""customer"" type=""xs:string""/>
,
<customer>John Smith</customer>
,
<customer>       John Smith     </customer>
,
<xs:element name=""customer"" type=""xs:normalizedString""/>
,
<customer>John Smith</customer>
,
<customer>     John Smith     </customer>
,
<xs:element name=""customer"" type=""xs:token""/>
,
<customer>John Smith</customer>
,
<customer>     John Smith     </customer>
",
An XSD ,Example,"An XML Document,Create an XML Schema,Divide the Schema,Using Named Types",,"This chapter will demonstrate how to write an XML Schema. You will also learn that a schema can be written in different ways.,Let's have a look at this XML document called ""shiporder.xml"":,The XML document above consists of a root element, ""shiporder"", 
that contains a required attribute called ""orderid"". The ""shiporder"" element contains three 
different child elements: ""orderperson"", ""shipto"" and ""item"". The ""item"" element
appears twice, and it contains a ""title"", an optional ""note"" element, a ""quantity"", and a ""price"" 
element.,The line above: xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" tells the XML parser that this document should be validated against a schema. 
The line: xsi:noNamespaceSchemaLocation=""shiporder.xsd"" specifies WHERE the schema resides (here it is in the same folder as ""shiporder.xml"").,Now we want to create a schema for the XML document above.,We start by opening a new file that we will call ""shiporder.xsd"". To create the schema we could simply follow 
the structure in the XML document and define each element as we find it. We will start with the standard XML declaration followed by the xs:schema element that defines a schema:,In the schema above we use the standard namespace (xs), and the URI 
associated with this namespace is the Schema language definition, which has the 
standard value of http://www.w3.org/2001/XMLSchema. ,Next, we have to define the ""shiporder"" element. This element has an 
attribute and it contains other elements, therefore we consider it as a complex 
type. The child elements of the ""shiporder"" element is surrounded by a 
xs:sequence element that defines an ordered sequence of sub elements:,Then we have to define the ""orderperson"" element as a simple type (because it does 
not contain any attributes or other elements). The type (xs:string) is prefixed 
with the namespace prefix associated with XML Schema that indicates a predefined 
schema data type:,Next, we have to define two elements that are of the complex type: ""shipto"" and 
""item"". We start by defining the ""shipto"" element:,With schemas we can define the number of possible occurrences for an element 
with the maxOccurs and minOccurs attributes. maxOccurs specifies the maximum 
number of occurrences for an element and minOccurs specifies the minimum number 
of occurrences for an element. The default value for both maxOccurs and 
minOccurs is 1!,Now we can define the ""item"" element. This element can appear multiple times 
inside a ""shiporder"" element. This is specified by setting the maxOccurs 
attribute of the ""item"" element to ""unbounded"" which means that there can be as 
many occurrences of the ""item"" element as the author wishes. Notice that the 
""note"" element is optional. We have specified this by setting the minOccurs 
attribute to zero:,We can now declare the attribute of the ""shiporder"" element. Since 
this is a required attribute we specify use=""required""., The attribute declarations must always come last:,Here is the complete listing of the schema file called ""shiporder.xsd"":,The previous design method is very simple, but can be difficult to read and maintain when documents are complex.,The next design method is based on defining all elements and attributes first, and then referring to them using the ref attribute.,Here is the new design of the schema file (""shiporder.xsd""):,The third design method defines classes or types, that enables us to reuse element 
definitions. This is done by naming the simpleTypes and complexTypes elements, 
and then point to them through the type attribute of the element.,Here is the third design of the schema file (""shiporder.xsd""):,The restriction element indicates that the datatype is derived from a W3C XML 
Schema namespace datatype. So, the following fragment means that the value of 
the element or attribute must be a string value:,The restriction element is more often used to apply restrictions to elements. 
Look at the following lines from the schema above:,This indicates that the value of the element or attribute must be a string, it must be exactly six characters in a row, and those characters must be a 
number from 0 to 9.",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<shiporder orderid=""889923"",
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"",
xsi:noNamespaceSchemaLocation=""shiporder.xsd"">,
  
 <orderperson>John Smith</orderperson>,
  
 <shipto>,
     
  <name>Ola Nordmann</name>,
     
  <address>Langgt 23</address>,
     
  <city>4000 Stavanger</city>,
     
  <country>Norway</country>,
  
 </shipto>,
  
 <item>,
     
  <title>Empire Burlesque</title>,
     
  <note>Special Edition</note>,
     
  <quantity>1</quantity>,
     
  <price>10.90</price>,
  
 </item>,
  
 <item>,
     
  <title>Hide your heart</title>,
     
  <quantity>1</quantity>,
     
  <price>9.90</price>,
  
 </item>,
</shiporder>
,
<?xml version=""1.0"" encoding=""UTF-8"" ?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">,...,
</xs:schema>
,
<xs:element name=""shiporder"">,
  
 <xs:complexType>,
     
  <xs:sequence>,
       
  ...,
     
  </xs:sequence>,
   
 </xs:complexType>,
</xs:element>
,
<xs:element name=""orderperson"" type=""xs:string""/>
,
<xs:element name=""shipto"">,
  
 <xs:complexType>,
     
  <xs:sequence>,
        
   <xs:element name=""name"" type=""xs:string""/>,
        
   <xs:element name=""address"" type=""xs:string""/>,
        
   <xs:element name=""city"" type=""xs:string""/>,
        
   <xs:element name=""country"" type=""xs:string""/>,
     
  </xs:sequence>,
  
 </xs:complexType>,
</xs:element>
,
<xs:element name=""item"" maxOccurs=""unbounded"">,
  
 <xs:complexType>,
     
  <xs:sequence>,
        
   <xs:element name=""title"" type=""xs:string""/>,
        
   <xs:element name=""note"" type=""xs:string"" minOccurs=""0""/>,
        
   <xs:element name=""quantity"" type=""xs:positiveInteger""/>,
        
   <xs:element name=""price"" type=""xs:decimal""/>,
     
  </xs:sequence>,
  
 </xs:complexType>,
</xs:element>
,
<xs:attribute name=""orderid"" type=""xs:string"" use=""required""/>
,
<?xml version=""1.0"" encoding=""UTF-8"" ?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">,
<xs:element name=""shiporder"">,
  
 <xs:complexType>,
     
  <xs:sequence>,
        
   <xs:element name=""orderperson"" type=""xs:string""/>,
        
   <xs:element name=""shipto"">,
           
    <xs:complexType>,
              
     <xs:sequence>,
                 
      <xs:element name=""name"" type=""xs:string""/>,
                 
      <xs:element name=""address"" type=""xs:string""/>,
                 
      <xs:element name=""city"" type=""xs:string""/>,
                 
      <xs:element name=""country"" type=""xs:string""/>,
              
     </xs:sequence>,
           
    </xs:complexType>,
        
   </xs:element>,
        
   <xs:element name=""item"" maxOccurs=""unbounded"">,
           
    <xs:complexType>,
              
     <xs:sequence>,
                 
      <xs:element name=""title"" type=""xs:string""/>,
                 
      <xs:element name=""note"" type=""xs:string"" minOccurs=""0""/>,
                 
      <xs:element name=""quantity"" type=""xs:positiveInteger""/>,
                 
      <xs:element name=""price"" type=""xs:decimal""/>,
              
     </xs:sequence>,
           
    </xs:complexType>,
        
   </xs:element>,
     
  </xs:sequence>,
     
  <xs:attribute name=""orderid"" type=""xs:string"" use=""required""/>,
  
 </xs:complexType>,
</xs:element>,
</xs:schema>
,
<?xml version=""1.0"" encoding=""UTF-8"" ?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">,
<!-- definition of simple elements -->,
<xs:element name=""orderperson"" type=""xs:string""/>,
<xs:element name=""name"" type=""xs:string""/>,
<xs:element name=""address"" type=""xs:string""/>,
<xs:element name=""city"" type=""xs:string""/>,
<xs:element name=""country"" type=""xs:string""/>,
<xs:element name=""title"" type=""xs:string""/>,
<xs:element name=""note"" type=""xs:string""/>,
<xs:element name=""quantity"" type=""xs:positiveInteger""/>,
<xs:element name=""price"" type=""xs:decimal""/>,
<!-- definition of attributes -->,
<xs:attribute name=""orderid"" type=""xs:string""/>,
<!-- definition of complex elements -->,
<xs:element name=""shipto"">,
  
 <xs:complexType>,
     
  <xs:sequence>,
        
   <xs:element ref=""name""/>,
        
   <xs:element ref=""address""/>,
        
   <xs:element ref=""city""/>,
        
   <xs:element ref=""country""/>,
     
  </xs:sequence>,
  
 </xs:complexType>,
</xs:element>,
<xs:element name=""item"">,
  
 <xs:complexType>,
     
  <xs:sequence>,
        
   <xs:element ref=""title""/>,
        
   <xs:element ref=""note"" minOccurs=""0""/>,
        
   <xs:element ref=""quantity""/>,
        
   <xs:element ref=""price""/>,
     
  </xs:sequence>,
  
 </xs:complexType>,
</xs:element>,
<xs:element name=""shiporder"">,
  
 <xs:complexType>,
     
  <xs:sequence>,
        
   <xs:element ref=""orderperson""/>,
        
   <xs:element ref=""shipto""/>,
        
   <xs:element ref=""item"" maxOccurs=""unbounded""/>,
     
  </xs:sequence>,
     
  <xs:attribute ref=""orderid"" use=""required""/>,
  
 </xs:complexType>,
</xs:element>,
</xs:schema>
,
<?xml version=""1.0"" encoding=""UTF-8"" ?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">,
<xs:simpleType name=""stringtype"">,
 
<xs:restriction base=""xs:string""/>,
</xs:simpleType>,
<xs:simpleType name=""inttype"">,
 
<xs:restriction base=""xs:positiveInteger""/>,
</xs:simpleType>,
<xs:simpleType name=""dectype"">,
 
<xs:restriction base=""xs:decimal""/>,
</xs:simpleType>,
<xs:simpleType name=""orderidtype"">,
 
<xs:restriction base=""xs:string"">,
     
  <xs:pattern value=""[0-9]{6}""/>,
  
 </xs:restriction>,
</xs:simpleType>,
<xs:complexType name=""shiptotype"">,
  
 <xs:sequence>,
     
  <xs:element name=""name"" type=""stringtype""/>,
     
  <xs:element name=""address"" type=""stringtype""/>,
     
  <xs:element name=""city"" type=""stringtype""/>,
     
  <xs:element name=""country"" type=""stringtype""/>,
  
 </xs:sequence>,
</xs:complexType>,
<xs:complexType name=""itemtype"">,
  
 <xs:sequence>,
     
  <xs:element name=""title"" type=""stringtype""/>,
     
  <xs:element name=""note"" type=""stringtype"" minOccurs=""0""/>,
     
  <xs:element name=""quantity"" type=""inttype""/>,
     
  <xs:element name=""price"" type=""dectype""/>,
  
 </xs:sequence>,
</xs:complexType>,
<xs:complexType name=""shipordertype"">,
  
 <xs:sequence>,
     
  <xs:element name=""orderperson"" type=""stringtype""/>,
     
  <xs:element name=""shipto"" type=""shiptotype""/>,
     
  <xs:element name=""item"" maxOccurs=""unbounded"" type=""itemtype""/>,
  
 </xs:sequence>,
  
 <xs:attribute name=""orderid"" type=""orderidtype"" use=""required""/>,
</xs:complexType>,
<xs:element name=""shiporder"" type=""shipordertype""/>,
</xs:schema>
,
<xs:restriction base=""xs:string"">
,
<xs:simpleType name=""orderidtype"">,
  
 <xs:restriction base=""xs:string"">,
     
  <xs:pattern value=""[0-9]{6}""/>,
  
 </xs:restriction>,
</xs:simpleType>
",
XSD ,Element Substitution,"Element Substitution,Blocking Element Substitution,Using substitutionGroup,What are Global Elements?",,"With XML Schemas, one element can substitute another element.,Let's say that we have users from two different countries: England and 
Norway. We would like the ability to let the user choose whether he or she 
would like to use the Norwegian element names or the English element names in 
the XML document.,To solve this problem, we could define a , in the XML 
schema. First, we declare a head element and then we declare the other elements which state that 
they are substitutable for the head element.,In the example above, the ""name"" element is the head element and the ""navn"" 
element is substitutable for ""name"".,Look at this fragment of an XML schema:,A valid XML document (according to the schema above) could look like this:,or like this:,To prevent other elements from substituting with a specified element, use the block attribute:,Look at this fragment of an XML schema:,A valid XML document (according to the schema above) looks like this:,BUT THIS IS NO LONGER VALID:,The type of the substitutable elements must be the same as, or derived from, 
the type of the head element. If the type of the substitutable element is the 
same as the type of the head element you will not have to specify the type of 
the substitutable element.,Note that all elements in the substitutionGroup (the head element and the 
substitutable elements) must be declared as global elements, otherwise it will 
not work! ,Global elements are elements that are immediate children of the ""schema"" 
element! Local elements are elements nested within other elements.",,"
<xs:element name=""name"" type=""xs:string""/>,
<xs:element name=""navn"" substitutionGroup=""name""/>
,
<xs:element name=""name"" type=""xs:string""/>,
<xs:element name=""navn"" substitutionGroup=""name""/>,
<xs:complexType name=""custinfo"">,
   
  <xs:sequence>,
       
    <xs:element ref=""name""/>,
   
  </xs:sequence>,
</xs:complexType>,
<xs:element name=""customer"" type=""custinfo""/>,
<xs:element name=""kunde"" substitutionGroup=""customer""/>
,
<customer>,
   
  <name>John Smith</name>,
</customer>
,
<kunde>,
   
  <navn>John Smith</navn>,
</kunde>
,
<xs:element name=""name"" type=""xs:string"" block=""substitution""/>
,
<xs:element name=""name"" type=""xs:string"" block=""substitution""/>,
<xs:element name=""navn"" substitutionGroup=""name""/>,
<xs:complexType name=""custinfo"">,
   
  <xs:sequence>,
       
    <xs:element ref=""name""/>,
   
  </xs:sequence>,
</xs:complexType>,
<xs:element name=""customer"" type=""custinfo"" block=""substitution""/>,
<xs:element name=""kunde"" substitutionGroup=""customer""/>
,
<customer>,
   
  <name>John Smith</name>,
</customer>
,
<kunde>,
   
  <navn>John Smith</navn>,
</kunde>
",
"XSD The , Element",<anyAttribute>,The <anyAttribute> Element,,"The <anyAttribute> element enables us to extend the XML document with attributes not specified by the schema!,The <anyAttribute> element enables us to extend the XML document with attributes not specified by the schema.,The following example is a fragment from an XML schema called ""family.xsd"". 
It shows a declaration for the ""person"" element. By using the <anyAttribute> element we 
can add any number of attributes to the ""person"" element:,Now we want to extend the ""person"" element with a ""eyecolor"" attribute. In this 
case we can do so, even if the author of the schema above never declared any ""eyecolor"" attribute.,Look at this schema file, called ""attribute.xsd"":,The XML file below (called ""Myfamily.xml""), uses components from 
two different schemas; ""family.xsd"" and ""attribute.xsd"":,The XML file above is valid because the schema ""family.xsd"" allows us to 
add an attribute to the ""person"" element.,The <any> and <anyAttribute> elements are used to make EXTENSIBLE 
documents! They allow documents to contain additional elements that are not 
declared in the main XML schema.",,"
<xs:element name=""person"">,
   
  <xs:complexType>,
       
    <xs:sequence>,
           
      <xs:element name=""firstname"" type=""xs:string""/>,
           
      <xs:element name=""lastname"" type=""xs:string""/>,
       
    </xs:sequence>,
       
    <xs:anyAttribute/>,
   
  </xs:complexType>,
</xs:element>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"",
targetNamespace=""https://www.w3schools.com"",
xmlns=""https://www.w3schools.com"",
elementFormDefault=""qualified"">,
<xs:attribute name=""eyecolor"">,
   
  <xs:simpleType>,
       
    <xs:restriction base=""xs:string"">,
           
      <xs:pattern value=""blue|brown|green|grey""/>,
       
    </xs:restriction>,
   
  </xs:simpleType>,
</xs:attribute>,
</xs:schema>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<persons xmlns=""http://www.microsoft.com"",
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"",
xsi:SchemaLocation=""http://www.microsoft.com family.xsd,
https://www.w3schools.com attribute.xsd"">,
<person eyecolor=""green"">,
 
<firstname>Hege</firstname>,
 
<lastname>Refsnes</lastname>,
</person>,
<person eyecolor=""blue"">,
 
<firstname>Stale</firstname>,
 
<lastname>Refsnes</lastname>,
</person>,
</persons>
",
XSD ,Indicators,"Indicators,Order Indicators,Occurrence Indicators,Group Indicators",,"We can control HOW elements are to be used in documents with indicators.,There are seven indicators:,Order indicators:,Occurrence indicators:,Group indicators:,Order indicators are used to define the order of the elements.,The <all> indicator specifies that the child elements can appear in any order, and that 
each child element must occur only once: , When using the <all> indicator you can set the <minOccurs> 
indicator to 0 or 1 and the <maxOccurs> indicator can only be set to 1 (the <minOccurs> 
and <maxOccurs> are described later). ,The <choice> indicator specifies that either one child element or another can occur:,The <sequence> indicator specifies that the child elements must appear in a specific order:,Occurrence indicators are used to define how often an element can occur.,For all ""Order"" and ""Group"" indicators (any, all, choice, sequence, 
group name, and group reference) the default value for maxOccurs and minOccurs is 1.,The <maxOccurs> indicator specifies the maximum number of times an element can occur:,The example above indicates that the ""child_name"" element 
can occur a minimum of one time (the default value for minOccurs 
is 1) and a maximum of ten times in the ""person"" element.,The <minOccurs> indicator specifies the minimum number of times an element can occur:,The example above indicates that the ""child_name"" element can occur 
a minimum of zero times and a maximum of ten times in the ""person"" element., To allow an element to appear an unlimited number of times, use the maxOccurs=""unbounded"" 
statement:,An XML file called ""Myfamily.xml"":,The XML file above contains a root element named ""persons"". Inside 
this root element we have defined three ""person"" elements. Each ""person"" element must 
contain a ""full_name"" element and it can contain up to five ""child_name"" elements.,Here is the schema file ""family.xsd"":,Group indicators are used to define related sets of elements.,Element groups are defined with the group declaration, like this:,You must define an all, choice, or sequence element inside the group 
declaration. The following example defines a group named ""persongroup"", that 
defines a group of elements that must occur in an exact sequence:,After you have defined a group, you can reference it in another definition, like this:,Attribute groups are defined with the attributeGroup declaration, like this:,The following example defines an attribute group named ""personattrgroup"":,After you have defined an attribute group, you can reference it in another definition, like this:","All,Choice,Sequence,maxOccurs,minOccurs,Group name,attributeGroup name","
<xs:element name=""person"">,
   
  <xs:complexType>,
       
    <xs:all>,
           
      <xs:element name=""firstname"" type=""xs:string""/>,
           
      <xs:element name=""lastname"" type=""xs:string""/>,
       
    </xs:all>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""person"">,
   
  <xs:complexType>,
       
    <xs:choice>,
           
      <xs:element name=""employee"" type=""employee""/>,
           
      <xs:element name=""member"" type=""member""/>,
       
    </xs:choice>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""person"">,
    
  <xs:complexType>,
       
    <xs:sequence>,
           
      <xs:element name=""firstname"" type=""xs:string""/>,
           
      <xs:element name=""lastname"" type=""xs:string""/>,
       
    </xs:sequence>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""person"">,
   
  <xs:complexType>,
       
    <xs:sequence>,
           
      <xs:element name=""full_name"" type=""xs:string""/>,
           
      <xs:element name=""child_name"" type=""xs:string"" maxOccurs=""10""/>,
       
    </xs:sequence>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""person"">,
   
  <xs:complexType>,
       
    <xs:sequence>,
           
      <xs:element name=""full_name"" type=""xs:string""/>,
           
      <xs:element name=""child_name"" type=""xs:string"",
           
      maxOccurs=""10"" minOccurs=""0""/>,
       
    </xs:sequence>,
   
  </xs:complexType>,
</xs:element>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<persons xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"",
xsi:noNamespaceSchemaLocation=""family.xsd"">,
<person>,
 
<full_name>Hege Refsnes</full_name>,
 
<child_name>Cecilie</child_name>,
</person>,
<person>,
 
<full_name>Tove Refsnes</full_name>,
 
<child_name>Hege</child_name>,
 
<child_name>Stale</child_name>,
 
<child_name>Jim</child_name>,
 
<child_name>Borge</child_name>,
</person>,
<person>,
 
<full_name>Stale Refsnes</full_name>,
</person>,
</persons>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"",
elementFormDefault=""qualified"">,
<xs:element name=""persons"">,
   
  <xs:complexType>,
       
    <xs:sequence>,
           
      <xs:element name=""person"" maxOccurs=""unbounded"">,
               
        <xs:complexType>,
                   
          <xs:sequence>,
                       
            <xs:element name=""full_name"" type=""xs:string""/>,
                       
            <xs:element name=""child_name"" type=""xs:string"",
                       
            minOccurs=""0"" maxOccurs=""5""/>,
                   
          </xs:sequence>,
               
        </xs:complexType>,
           
      </xs:element>,
       
    </xs:sequence>,
   
  </xs:complexType>,
</xs:element>,
</xs:schema>
,
<xs:group name=""groupname"">,
  ...,
</xs:group>
,
<xs:group name=""persongroup"">,
   
  <xs:sequence>,
       
    <xs:element name=""firstname"" type=""xs:string""/>,
       
    <xs:element name=""lastname"" type=""xs:string""/>,
       
    <xs:element name=""birthday"" type=""xs:date""/>,
   
  </xs:sequence>,
</xs:group>
,
<xs:group name=""persongroup"">,
   
  <xs:sequence>,
       
    <xs:element name=""firstname"" type=""xs:string""/>,
       
    <xs:element name=""lastname"" type=""xs:string""/>,
       
    <xs:element name=""birthday"" type=""xs:date""/>,
   
  </xs:sequence>,
</xs:group>,
<xs:element name=""person"" type=""personinfo""/>,
<xs:complexType name=""personinfo"">,
   
  <xs:sequence>,
       
    <xs:group ref=""persongroup""/>,
       
    <xs:element name=""country"" type=""xs:string""/>,
   
  </xs:sequence>,
</xs:complexType>
,
<xs:attributeGroup name=""groupname"">,
  ...,
</xs:attributeGroup>
,
<xs:attributeGroup name=""personattrgroup"">,
   
  <xs:attribute name=""firstname"" type=""xs:string""/>,
   
  <xs:attribute name=""lastname"" type=""xs:string""/>,
   
  <xs:attribute name=""birthday"" type=""xs:date""/>,
</xs:attributeGroup>
,
<xs:attributeGroup name=""personattrgroup"">,
   
  <xs:attribute name=""firstname"" type=""xs:string""/>,
   
  <xs:attribute name=""lastname"" type=""xs:string""/>,
   
  <xs:attribute name=""birthday"" type=""xs:date""/>,
</xs:attributeGroup>,
<xs:element name=""person"">,
   
  <xs:complexType>,
       
    <xs:attributeGroup ref=""personattrgroup""/>,
   
  </xs:complexType>,
</xs:element>
",
XSD ,Mixed Content,Complex Types with Mixed Content,,"A mixed complex type element can contain attributes, elements, and text.,An XML element, ""letter"", that contains both text and other elements:,The following schema declares the ""letter"" element:, To enable character data to appear between the child-elements of 
""letter"", the mixed attribute must be set to ""true"". The <xs:sequence> tag means 
that the elements defined (name, orderid and shipdate) must appear in that order 
inside a ""letter"" element.,We could also give the complexType element a name, and let the ""letter"" element 
have a type attribute that refers to the name of the complexType (if you use 
this method, several elements can refer to the same complex type):",,"
<letter>,
 
Dear Mr. <name>John Smith</name>.,
 
Your order <orderid>1032</orderid>,
 
will be shipped on <shipdate>2001-07-13</shipdate>.,
</letter>
,
<xs:element name=""letter"">,
   
  <xs:complexType mixed=""true"">,
       
    <xs:sequence>,
           
      <xs:element name=""name"" type=""xs:string""/>,
           
      <xs:element name=""orderid"" type=""xs:positiveInteger""/>,
           
      <xs:element name=""shipdate"" type=""xs:date""/>,
       
    </xs:sequence>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""letter"" type=""lettertype""/>,
<xs:complexType name=""lettertype"" mixed=""true"">,
   
  <xs:sequence>,
       
    <xs:element name=""name"" type=""xs:string""/>,
       
    <xs:element name=""orderid"" type=""xs:positiveInteger""/>,
       
    <xs:element name=""shipdate"" type=""xs:date""/>,
   
  </xs:sequence>,
</xs:complexType>
",
XSD ,Text-Only Elements,Complex Text-Only Elements,,"A complex text-only element can contain text and attributes.,This type contains only simple content (text and attributes), therefore we 
add a simpleContent element around the content. When using simple content, you 
must define an extension OR a restriction within the simpleContent element, like this:, Use the extension/restriction element to expand or to limit the base simple type for the element.,Here is an example of an XML element, ""shoesize"", that contains text-only:,The following example declares a complexType, ""shoesize"". The content is defined as an 
integer value, and the ""shoesize"" element also contains an attribute named ""country"":,We could also give the complexType element a name, and let the ""shoesize"" element 
have a type attribute that refers to the name of the complexType (if you use 
this method, several elements can refer to the same complex type):",,"
<xs:element name=""somename"">,
   
  <xs:complexType>,
       
    <xs:simpleContent>,
           
      <xs:extension base=""basetype"">,
               
        ....,
               
        ....,
           
      </xs:extension>,
       
    </xs:simpleContent>,
   
  </xs:complexType>,
</xs:element>,
OR,
<xs:element name=""somename"">,
   
  <xs:complexType>,
       
    <xs:simpleContent>,
           
      <xs:restriction base=""basetype"">,
               
        ....,
               
        ....,
           
      </xs:restriction>,
       
    </xs:simpleContent>,
   
  </xs:complexType>,
</xs:element>
,
<shoesize country=""france"">35</shoesize>
,
<xs:element name=""shoesize"">,
   
  <xs:complexType>,
       
    <xs:simpleContent>,
           
      <xs:extension base=""xs:integer"">,
               
        <xs:attribute name=""country"" type=""xs:string"" />,
           
      </xs:extension>,
       
    </xs:simpleContent>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""shoesize"" type=""shoetype""/>,
<xs:complexType name=""shoetype"">,
   
  <xs:simpleContent>,
       
    <xs:extension base=""xs:integer"">,
           
      <xs:attribute name=""country"" type=""xs:string"" />,
       
    </xs:extension>,
   
  </xs:simpleContent>,
</xs:complexType>
",
XSD ,Elements Only,Complex Types Containing Elements Only,,"An ""elements-only"" complex type contains an element that contains only other elements.,An XML element, ""person"", that contains only other elements:,You can define the ""person"" element in a schema, like this:,Notice the <xs:sequence> tag. It means that the elements defined (""firstname"" 
and ""lastname"") must appear in that order inside a ""person"" element.,Or you can give the complexType element a name, and let the ""person"" element 
have a type attribute that refers to the name of the complexType (if you use 
this method, several elements can refer to the same complex type):",,"
<person>,
 
<firstname>John</firstname>,
 
<lastname>Smith</lastname>,
</person>
,
<xs:element name=""person"">,
   
  <xs:complexType>,
       
    <xs:sequence>,
           
      <xs:element name=""firstname"" type=""xs:string""/>,
           
      <xs:element name=""lastname"" type=""xs:string""/>,
       
    </xs:sequence>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""person"" type=""persontype""/>,
<xs:complexType name=""persontype"">,
   
  <xs:sequence>,
       
    <xs:element name=""firstname"" type=""xs:string""/>,
       
    <xs:element name=""lastname"" type=""xs:string""/>,
   
  </xs:sequence>,
</xs:complexType>
",
XSD ,Empty Elements,Complex Empty Elements,,"An empty complex element cannot have contents, only attributes.,An empty XML element:,The ""product"" element above has no content at all. To define a type 
with no content, we must define a type that allows elements in its content, 
but we do not actually declare any elements, like this:,In the example above, we define a complex type with a complex content. The complexContent element signals that we intend to restrict or 
extend the content model of a complex type, and the restriction of integer declares one attribute but does not introduce any element content.,However, it is possible to declare the ""product"" element more compactly, like this:,Or you can give the complexType element a name, and let the ""product"" element 
have a type attribute that refers to the name of the complexType (if you use 
this method, several elements can refer to the same complex type):",,"
<product prodid=""1345"" />
,
<xs:element name=""product"">,
   
  <xs:complexType>,
       
    <xs:complexContent>,
           
      <xs:restriction base=""xs:integer"">,
               
        <xs:attribute name=""prodid"" type=""xs:positiveInteger""/>,
           
      </xs:restriction>,
       
    </xs:complexContent>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""product"">,
   
  <xs:complexType>,
       
    <xs:attribute name=""prodid"" type=""xs:positiveInteger""/>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""product"" type=""prodtype""/>,
<xs:complexType name=""prodtype"">,
   
  <xs:attribute name=""prodid"" type=""xs:positiveInteger""/>,
</xs:complexType>
",
XSD ,Complex Elements,"What is a Complex Element?,Examples of Complex Elements,How to Define a Complex Element",,"A complex element contains other elements and/or attributes.,A complex element is an XML element that contains other elements and/or attributes.,There are four kinds of complex elements:, Each of these elements may contain attributes as well!,A complex XML element, ""product"", which is empty:,A complex XML element, ""employee"", which contains only other elements:,A complex XML element, ""food"", which contains only text:,A complex XML element, ""description"", which contains both elements and text:,Look at this complex XML element, ""employee"", which contains only other elements:,We can define a complex element in an XML Schema two different ways:,1. The ""employee"" element can be declared directly by naming the element, like this:,If you use the method described above, only the ""employee"" element can use the 
specified complex type. Note that the child elements, ""firstname"" and ""lastname"", are surrounded 
by the <sequence> indicator. This means that the child elements must appear in 
the same order as they are declared. You will learn more about indicators in the XSD Indicators chapter.,2. The ""employee"" element can have a type attribute that refers to the name of the complex type to use:,If you use the method described above, several elements can refer to the same complex type, like this:,You can also base a complex type on an existing complex type and add some elements, like this:","empty elements,elements that contain only other elements,elements that contain only text,elements that contain both other elements and text","
<product pid=""1345""/>
,
<employee>,
 
<firstname>John</firstname>,
 
<lastname>Smith</lastname>,
</employee>
,
<food type=""dessert"">Ice cream</food>
,
<description>,
It happened on <date lang=""norwegian"">03.03.99</date> ....,
</description>
,
<employee>,
 
<firstname>John</firstname>,
 
<lastname>Smith</lastname>,
</employee>
,
<xs:element name=""employee"">,
   
  <xs:complexType>,
       
    <xs:sequence>,
           
      <xs:element name=""firstname"" type=""xs:string""/>,
           
      <xs:element name=""lastname"" type=""xs:string""/>,
       
    </xs:sequence>,
   
  </xs:complexType>,
</xs:element>
,
<xs:element name=""employee"" type=""personinfo""/>,
<xs:complexType name=""personinfo"">,
   
  <xs:sequence>,
       
    <xs:element name=""firstname"" type=""xs:string""/>,
       
    <xs:element name=""lastname"" type=""xs:string""/>,
   
  </xs:sequence>,
</xs:complexType>
,
<xs:element name=""employee"" type=""personinfo""/>,
<xs:element name=""student"" type=""personinfo""/>,
<xs:element name=""member"" type=""personinfo""/>,
<xs:complexType name=""personinfo"">,
   
  <xs:sequence>,
       
    <xs:element name=""firstname"" type=""xs:string""/>,
       
    <xs:element name=""lastname"" type=""xs:string""/>,
   
  </xs:sequence>,
</xs:complexType>
,
<xs:element name=""employee"" type=""fullpersoninfo""/>,
<xs:complexType name=""personinfo"">,
   
  <xs:sequence>,
       
    <xs:element name=""firstname"" type=""xs:string""/>,
       
    <xs:element name=""lastname"" type=""xs:string""/>,
   
  </xs:sequence>,
</xs:complexType>,
<xs:complexType name=""fullpersoninfo"">,
   
  <xs:complexContent>,
       
    <xs:extension base=""personinfo"">,
           
      <xs:sequence>,
               
        <xs:element name=""address"" type=""xs:string""/>,
               
        <xs:element name=""city"" type=""xs:string""/>,
               
        <xs:element name=""country"" type=""xs:string""/>,
           
      </xs:sequence>,
       
    </xs:extension>,
   
  </xs:complexContent>,
</xs:complexType>
",
XSD ,Restrictions/Facets,"Restrictions on Values,Restrictions on a Set of Values,Restrictions on a Series of Values,Other Restrictions on a Series of Values,Restrictions on Whitespace Characters,Restrictions on Length,Restrictions for Datatypes",,"Restrictions are used to define acceptable values for XML elements or attributes. Restrictions on XML elements are called facets.,The following example defines an element called ""age"" with a restriction. The value of age cannot be lower than 0 or greater than 120:,To limit the content of an XML element to a set of acceptable values, we would use the enumeration constraint.,The example below defines an element called ""car"" with a restriction. The only acceptable values are: Audi, Golf, BMW:,The example above could also have been written like this:, In this case the type ""carType"" can be used by other elements because it is not a part of the ""car"" element.,To limit the content of an XML element to define a series of numbers or 
letters that can be used, we would use the pattern constraint.,The example below defines an element called ""letter"" with a restriction. 
The only acceptable value is ONE of the LOWERCASE letters from a to z:,The next example defines an element called ""initials"" with a restriction. The only acceptable value is THREE of the UPPERCASE letters from a to z:,The next example also defines an element called ""initials"" with a 
restriction. The only acceptable value is THREE of the LOWERCASE OR UPPERCASE 
letters from a to z:,The next example defines an element called ""choice"" with a restriction. 
The only acceptable value is ONE of the following letters: x, y, OR z:,The next example defines an element called ""prodid"" with a 
restriction. The only acceptable value is FIVE digits in a sequence, and each 
digit must be in a range from 0 to 9:,The example below defines an element called ""letter"" with a 
restriction. The acceptable value is zero or more occurrences of lowercase letters from a to z:,The next example also defines an element called ""letter"" with a 
restriction. The acceptable value is one or more pairs of letters, each pair 
consisting of a lower case letter followed by an upper case letter. For example, 
""sToP"" will be validated by this pattern, but not ""Stop"" or ""STOP"" or ""stop"":,The next example defines an element called ""gender"" with a restriction. The only acceptable value is male OR female:,The next example defines an element called ""password"" with a 
restriction. There must be exactly eight characters in a row and those 
characters must be lowercase or uppercase letters from a to z, or a number from 0 to 9:,To specify how whitespace characters should be handled, we would use the whiteSpace constraint.,This example defines an element called ""address"" with a 
restriction. The whiteSpace constraint is set to ""preserve"", which means that 
the XML processor WILL NOT remove any white space characters:,This example also defines an element called ""address"" with a 
restriction. The whiteSpace constraint is set to ""replace"", which means that the 
XML processor WILL REPLACE all white space characters (line feeds, tabs, spaces, 
and carriage returns) with spaces:,This example also defines an element called ""address"" with a 
restriction. The whiteSpace constraint is set to ""collapse"", which means that 
the XML processor WILL REMOVE all white space characters (line feeds, tabs, 
spaces, carriage returns are replaced with spaces, leading and trailing spaces 
are removed, and multiple spaces are reduced to a single space):,To limit the length of a value in an element, we would use the length, maxLength, and minLength constraints.,This example defines an element called ""password"" with a restriction. The value must be exactly eight characters:,This example defines another element called ""password"" with a 
restriction. The value must be minimum five characters and maximum eight 
characters:",,"
<xs:element name=""age"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:integer"">,
         
    <xs:minInclusive value=""0""/>,
         
    <xs:maxInclusive value=""120""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,
</xs:element>
,
<xs:element name=""car"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:enumeration value=""Audi""/>,
         
    <xs:enumeration value=""Golf""/>,
         
    <xs:enumeration value=""BMW""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,
</xs:element>
,
<xs:element name=""car"" type=""carType""/>,
<xs:simpleType name=""carType"">,
   
  <xs:restriction base=""xs:string"">,
       
    <xs:enumeration value=""Audi""/>,
       
    <xs:enumeration value=""Golf""/>,
       
    <xs:enumeration value=""BMW""/>,
   
  </xs:restriction>,
</xs:simpleType>
,
<xs:element name=""letter"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:pattern value=""[a-z]""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""initials"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:pattern value=""[A-Z][A-Z][A-Z]""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""initials"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:pattern value=""[a-zA-Z][a-zA-Z][a-zA-Z]""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""choice"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:pattern value=""[xyz]""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""prodid"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:integer"">,
         
    <xs:pattern value=""[0-9][0-9][0-9][0-9][0-9]""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""letter"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:pattern value=""([a-z])*""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""letter"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:pattern value=""([a-z][A-Z])+""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""gender"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:pattern value=""male|female""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""password"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:pattern value=""[a-zA-Z0-9]{8}""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""address"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:whiteSpace value=""preserve""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""address"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:whiteSpace value=""replace""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""address"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:whiteSpace value=""collapse""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""password"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:length value=""8""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
,
<xs:element name=""password"">, 
<xs:simpleType>,
     
  <xs:restriction base=""xs:string"">,
         
    <xs:minLength value=""5""/>,
         
    <xs:maxLength value=""8""/>,
     
  </xs:restriction>,
 
</xs:simpleType>,</xs:element>
",
XSD ,Attributes,"What is an Attribute?,How to Define an Attribute?,Default and Fixed Values for Attributes,Optional and Required Attributes,Restrictions on Content",,"All attributes are declared as simple types.,Simple elements cannot have attributes. If an element has attributes, it is considered to be of a complex type. But the attribute itself is always declared 
as a simple type.,The syntax for defining an attribute is:,where xxx is the name of the attribute and yyy specifies the data type of the attribute.,XML Schema has a lot of built-in data types. The most common types are:,Here is an XML element with an attribute:,And here is the corresponding attribute definition:,Attributes may have a default value OR a fixed value specified.,A default value is automatically assigned to the attribute when no other value is specified.,In the following example the default value is ""EN"":,A fixed value is also automatically assigned to the attribute, and you cannot specify another value.,In the following example the fixed value is ""EN"":,Attributes are optional by default. To specify that the attribute is required, use the ""use"" attribute:,When an XML element or attribute has a data type defined, it puts restrictions on the
element's or attribute's content.,If an XML element is of type ""xs:date"" and contains a string like ""Hello
World"", the element will not validate.,With XML Schemas, you can also add your own restrictions to your XML
elements and attributes. These restrictions are called facets. You can read more about
facets in the next chapter.","xs:string,xs:decimal,xs:integer,xs:boolean,xs:date,xs:time","
<xs:attribute name=""xxx"" type=""yyy""/>
,
<lastname lang=""EN"">Smith</lastname>
,
<xs:attribute name=""lang"" type=""xs:string""/>
,
<xs:attribute name=""lang"" type=""xs:string"" default=""EN""/>
,
<xs:attribute name=""lang"" type=""xs:string"" fixed=""EN""/>
,
<xs:attribute name=""lang"" type=""xs:string"" use=""required""/>
",
XSD ,Simple Elements,"What is a Simple Element?,Defining a Simple Element,Default and Fixed Values for Simple Elements",,"XML Schemas define the elements of your XML files.,A simple element is an XML element that contains only text. It cannot contain any other elements or attributes.,A simple element is an XML element that can contain only text. It cannot contain any other elements or attributes.,However, the ""only text"" restriction is quite misleading. The text can be of many different types. It can be one of the types included in
the XML Schema definition (boolean, string, date, etc.), or it can be a custom type that you can define yourself.,You can also add restrictions (facets) to a data type in order to limit its content, or you can require the data to match a specific pattern.,The syntax for defining a simple element is: ,where xxx is the name of the element and yyy is the data type of the element.,XML Schema has a lot of built-in data types. The most
common types are:,Here are some XML elements:,And here are the corresponding simple element definitions:,Simple elements may have a default value OR a fixed value specified.,A default value is automatically assigned to the element when no other value is specified.,In the following example the default value is ""red"":,A fixed value is also automatically assigned to the element, and you cannot specify another value.,In the following example the fixed value is ""red"":","xs:string,xs:decimal,xs:integer,xs:boolean,xs:date,xs:time","
<xs:element name=""xxx"" type=""yyy""/>
,
<lastname>Refsnes</lastname>,
<age>36</age>,
<dateborn>1970-03-27</dateborn>
,
<xs:element name=""lastname"" type=""xs:string""/>,
<xs:element name=""age"" type=""xs:integer""/>,
<xs:element name=""dateborn"" type=""xs:date""/>
,
<xs:element name=""color"" type=""xs:string"" default=""red""/>
,
<xs:element name=""color"" type=""xs:string"" fixed=""red""/>
",
"XSD - The , Element",<schema>,"The <schema> Element,Referencing a Schema in an XML Document",,"The <schema> element is the root element of every XML Schema.,The <schema> element is the root element of every XML Schema:,The <schema> element may contain some attributes. A schema declaration often looks something like this:,The following fragment:,indicates that the elements and data types used in the schema come from the ""http://www.w3.org/2001/XMLSchema"" 
namespace. It also specifies that the elements and data types that come from the ""http://www.w3.org/2001/XMLSchema"" namespace should be prefixed with ,This fragment:,indicates that the elements defined by this schema (note, to, from, heading, body.) come from the ""https://www.w3schools.com"" namespace.,This fragment:,indicates that the default namespace is ""https://www.w3schools.com"".,This fragment:,indicates that any elements used by the XML instance document which were 
declared in this schema must be namespace qualified.,This XML document has a reference to an XML Schema:,The following fragment:,specifies the default namespace declaration. This declaration tells the 
schema-validator that all the elements used in this XML document are declared in 
the ""https://www.w3schools.com"" namespace.,Once you have the XML Schema Instance namespace available:,you can use the schemaLocation attribute. This attribute has two values, 
separated by a space. The first value is the namespace to use. The second value is the location of the XML schema to use for that namespace:",,"
<?xml version=""1.0""?>,
<xs:schema>,...,
...,
</xs:schema>
,
<?xml version=""1.0""?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"",
targetNamespace=""https://www.w3schools.com"",
xmlns=""https://www.w3schools.com"",
elementFormDefault=""qualified"">,...,
...,</xs:schema>
,
<?xml version=""1.0""?>,
<note xmlns=""https://www.w3schools.com"",
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"",
xsi:schemaLocation=""https://www.w3schools.com note.xsd"">,
<to>Tove</to>,
<from>Jani</from>,
<heading>Reminder</heading>,
<body>Don't forget me this weekend!</body>,
</note>
",
XSD ,How To?,"A Simple XML Document,A DTD File,An XML Schema,A Reference to a DTD,A Reference to an XML Schema",,"XML documents can have a reference to a DTD or to an XML Schema.,Look at this simple XML document called ""note.xml"":,The following example is a DTD file called ""note.dtd"" that
defines the elements of the XML document above (""note.xml""):,The first line defines the note element to have four child elements: ""to, from, heading, body"".,Line 2-5 defines the to, from, heading, body  elements  to be of type ""#PCDATA"".,The following example is an XML Schema file called ""note.xsd"" that defines the elements of the XML 
document above (""note.xml""):,The note element is a , because it contains other elements. 
The other elements (to, from, heading, body) are , because they do
not contain other elements. You will learn more about simple and complex types 
in the following chapters.,This XML document has a reference to a DTD:,This XML document has a reference to an XML Schema:",,"
<?xml version=""1.0""?>,
<note>,
 
<to>Tove</to>,
 
<from>Jani</from>,
 
<heading>Reminder</heading>,
 
<body>Don't forget me this weekend!</body>,
</note>,
<!ELEMENT note (to, from, heading, body)>,
<!ELEMENT to (#PCDATA)>,
<!ELEMENT from (#PCDATA)>,
<!ELEMENT heading (#PCDATA)>,
<!ELEMENT body (#PCDATA)>
,
<?xml version=""1.0""?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"",
targetNamespace=""https://www.w3schools.com"",
xmlns=""https://www.w3schools.com"",
elementFormDefault=""qualified"">,
<xs:element name=""note"">,
 
<xs:complexType>,
   
<xs:sequence>,
     
<xs:element name=""to"" type=""xs:string""/>,
     
<xs:element name=""from"" type=""xs:string""/>,
     
<xs:element name=""heading"" type=""xs:string""/>,
     
<xs:element name=""body"" type=""xs:string""/>,
   
</xs:sequence>,
 
</xs:complexType>,
</xs:element>,
</xs:schema>
,
<?xml version=""1.0""?>,
<!DOCTYPE note SYSTEM,
""https://www.w3schools.com/xml/note.dtd"">,
<note>,
 
<to>Tove</to>,
 
<from>Jani</from>,
 
<heading>Reminder</heading>,
 
<body>Don't forget me this weekend!</body>,
</note>,
,
<?xml version=""1.0""?>,
<note,
xmlns=""https://www.w3schools.com"",
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"",
xsi:schemaLocation=""https://www.w3schools.com/xml note.xsd"">, 
<to>Tove</to>,
 
<from>Jani</from>,
 
<heading>Reminder</heading>,
 
<body>Don't forget me this weekend!</body>,
</note>
",
XML Schema ,Tutorial,"What is an XML Schema?,Why Learn XML Schema?,XML Schemas Support Data Types,XML Schemas use XML Syntax,XML Schemas Secure Data Communication,Well-Formed is Not Enough",XSD Example,"An XML Schema describes the structure of an XML document.,The XML Schema language is also referred to as XML Schema Definition (XSD).,The purpose of an XML Schema is to define the legal building blocks of an XML
document:,In the XML world, hundreds of standardized XML formats are in daily use. ,Many of these XML standards are defined by XML Schemas.,XML Schema is an XML-based (and more powerful) alternative to DTD.,One of the greatest strength of XML Schemas is the support for data types.,Another great strength about XML Schemas is that they are written in XML.,XML Schemas are extensible, because they are written in XML.,With an extensible Schema definition you can:,When sending data from a sender to a receiver, it is essential that both parts
have the same ""expectations"" about the content.,With XML Schemas, the sender can describe the data in a way that the receiver
will understand.,A date like: ""03-11-2004"" will, in some countries, be interpreted as 3.November
and in other countries as 11.March.,However, an XML element with a data type
like this:,<date type=""date"">2004-03-11</date>,ensures a mutual understanding of the content, because the XML data type ""date""
requires the format ""YYYY-MM-DD"".,A well-formed XML document is a document that conforms to the XML syntax
rules, like:,Even if documents are well-formed they can still contain errors, and those errors can have serious consequences.,Think of the following situation: you order 5 gross of laser printers, instead of 5 laser
printers. With XML Schemas, most of these errors can be caught by your
validating software.","the elements and attributes that can appear in a document,the number of (and order of) child elements,data types for elements and attributes,default and fixed values for elements and attributes,It is easier to describe allowable document content,It is easier to validate the correctness of data,It is easier to define data facets (restrictions on data),It is easier to define data patterns (data formats),It is easier to convert data between different data types,You don't have to learn a new language,You can use your XML editor to edit your Schema files,You can use your XML parser to parse your Schema files,You can manipulate your Schema with the XML DOM,You can transform your Schema with XSLT,Reuse your Schema in other Schemas,Create your own data types derived from the standard types,Reference multiple schemas in the same document,it must begin with the XML declaration,it must have one unique root element,start-tags must have matching end-tags,elements are case sensitive,all elements must be closed,all elements must be properly nested,all attribute values must be quoted,entities must be used for special characters","
<?xml version=""1.0""?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"">,
<xs:element name=""note"">,
 
<xs:complexType>,
   
<xs:sequence>,
     
<xs:element name=""to"" type=""xs:string""/>,
     
<xs:element name=""from"" type=""xs:string""/>,
     
<xs:element name=""heading"" type=""xs:string""/>,
     
<xs:element name=""body"" type=""xs:string""/>,
   
</xs:sequence>,
 
</xs:complexType>,
</xs:element>,
</xs:schema>",
DTD ,Examples,"TV Schedule DTD,Newspaper Article DTD,Product Catalog DTD",,,,,
DTD - ,Entities,"An Internal Entity Declaration,An External Entity Declaration",,"Entities are used to define shortcuts to special characters.,Entities can be declared internal or external., An entity has three parts: an ampersand (&), an entity name, and a semicolon (;).",,"
<!ENTITY entity-name ""entity-value"">
,
DTD Example:,
<!ENTITY writer ""Donald Duck."">,
<!ENTITY copyright ""Copyright W3Schools."">,
XML example:,
<author>&writer;&copyright;</author>
,
<!ENTITY entity-name SYSTEM ""URI/URL"">
,
DTD Example:,
<!ENTITY writer SYSTEM ""https://www.w3schools.com/entities.dtd"">,
<!ENTITY copyright SYSTEM ""https://www.w3schools.com/entities.dtd"">,
XML example:,
<author>&writer;&copyright;</author>

",
"XSD The , Element",<any>,The <any> Element,,"The <any> element enables us to extend the XML document with elements not specified by the schema!,The <any> element enables us to extend the XML document with elements not specified by the schema.,The following example is a fragment from an XML schema called ""family.xsd"". 
It shows a declaration for the ""person"" element. By using the <any> element we 
can extend (after <lastname>) the content of ""person"" with any element:,Now we want to extend the ""person"" element with a ""children"" element. In this 
case we can do so, even if the author of the schema above never declared any ""children"" element.,Look at this schema file, called ""children.xsd"":,The XML file below (called ""Myfamily.xml""), uses components from 
two different schemas; ""family.xsd"" and ""children.xsd"":,The XML file above is valid because the schema ""family.xsd"" allows us to 
extend the ""person"" element with an optional element after the ""lastname"" 
element.,The <any> and <anyAttribute> elements are used to make EXTENSIBLE 
documents! They allow documents to contain additional elements that are not 
declared in the main XML schema.",,"
<xs:element name=""person"">,
   
  <xs:complexType>,
       
    <xs:sequence>,
           
      <xs:element name=""firstname"" type=""xs:string""/>,
           
      <xs:element name=""lastname"" type=""xs:string""/>,
           
      <xs:any minOccurs=""0""/>,
       
    </xs:sequence>,
   
  </xs:complexType>,
</xs:element>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xs:schema xmlns:xs=""http://www.w3.org/2001/XMLSchema"",
targetNamespace=""https://www.w3schools.com"",
xmlns=""https://www.w3schools.com"",
elementFormDefault=""qualified"">,
<xs:element name=""children"">,
   
  <xs:complexType>,
       
    <xs:sequence>,
           
      <xs:element name=""childname"" type=""xs:string"",
           
      maxOccurs=""unbounded""/>,
       
    </xs:sequence>,
   
  </xs:complexType>,
</xs:element>,
</xs:schema>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<persons xmlns=""http://www.microsoft.com"",
xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"",
xsi:schemaLocation=""http://www.microsoft.com family.xsd,
https://www.w3schools.com children.xsd"">,
<person>,
 
<firstname>Hege</firstname>,
 
<lastname>Refsnes</lastname>,
 
<children>,
     
  <childname>Cecilie</childname>,
 
</children>,
</person>,
<person>,
 
<firstname>Stale</firstname>,
 
<lastname>Refsnes</lastname>,
</person>,
</persons>
",
"XML , vs. ","Elements,Attributes","Use of Elements vs. Attributes,My Favorite Way,Avoid using attributes?,An Exception to my Attribute Rule",,"In XML, there are no rules about when to use attributes, and when to use child elements.,Data can be stored in child elements or in attributes.,Take a look at these examples:,In the first example sex is an attribute. In the last, sex is a child element. Both examples provide the same information.,There are no rules about when to use attributes, and when to use child elements. My experience is that attributes are handy in HTML, but in XML you should try to avoid them. Use child elements if the information feels like data.,The following three XML documents contain exactly the same information:,A date attribute is used in the first example:,A date element is used in the second example:,An expanded date element is used in the third: (THIS IS MY FAVORITE):,Should you avoid using attributes?,Some of the problems with attributes are:,If you use attributes as containers for data, you end up with documents that are difficult to read and maintain. Try to use , to
describe data. Use attributes only to provide information that is not relevant to the data.,Don't end up like this (this is not how XML should be used):,Rules always have exceptions.,My rule about attributes has one exception:,Sometimes I assign ID references to elements. These ID references can be used to access XML elements in much the same way as the NAME or
ID attributes in HTML. This example demonstrates this:,The ID in these examples is just a counter, or a unique identifier, to identify the different notes in the XML file, and not a part of the note data.,What I am trying to say here is that metadata (data about data) should be stored as attributes, and that data itself should be stored as elements.","attributes cannot contain multiple values (child elements can),attributes are not easily expandable (for future changes),attributes cannot describe structures (child elements can),attributes are more difficult to manipulate by program code,attribute values are not easy to test against a DTD","
<person sex=""female"">,
 
<firstname>Anna</firstname>,
 
<lastname>Smith</lastname>,
</person>
,<person>,
 
<sex>female</sex>,
 
<firstname>Anna</firstname>,
 
<lastname>Smith</lastname>,
</person>
,
<note date=""12/11/2002"">,
 
<to>Tove</to>,
 
<from>Jani</from>,
 
<heading>Reminder</heading>,
 
<body>Don't forget me this weekend!</body>,
</note>
,
<note>,
 
<date>12/11/2002</date>,
 
<to>Tove</to>,
 
<from>Jani</from>,
 
<heading>Reminder</heading>,
 
<body>Don't forget me this weekend!</body>,
</note>
,
<note>,
 
<date>,
     
  <day>12</day>,
     
  <month>11</month>,
     
  <year>2002</year>,
 
</date>,
 
<to>Tove</to>,
 
<from>Jani</from>,
 
<heading>Reminder</heading>,
 
<body>Don't forget me this weekend!</body>,
</note>
,
<note day=""12"" month=""11"" year=""2002"",
to=""Tove"" from=""Jani"" heading=""Reminder"",
body=""Don't forget me this weekend!"">,
</note>
,
<messages>,
  <note id=""p501"">,
     
    <to>Tove</to>,
     
    <from>Jani</from>,
     
    <heading>Reminder</heading>,
     
    <body>Don't forget me this weekend!</body>,
  </note>,
  <note id=""p502"">,
     
    <to>Jani</to>,
     
    <from>Tove</from>,
     
    <heading>Re: Reminder</heading>,
     
    <body>I will not!</body>,
  </note>,
</messages>
",
DTD - ,Attributes,"Declaring Attributes,A Default Attribute Value,#REQUIRED,#IMPLIED,#FIXED,Enumerated Attribute Values",,"In a DTD, attributes are declared with an ATTLIST declaration.,An attribute declaration has the following syntax:,The , can be one of the following:,The , can be one of the following:,In the example above, the ""square"" element is defined to be an empty element with
a ""width"" attribute of  type CDATA. If no width is specified, it has a default
value of 0.,Use the #REQUIRED keyword if you don't have an option for a default value, but still want to force the attribute to be present.,Use the #IMPLIED keyword if you don't want to force the author to include an attribute, and you don't have an option for a default value.,Use the #FIXED keyword when you want an attribute to have a fixed value
without allowing the author to change it. If an author includes another value,
the XML parser will return an error.,Use enumerated attribute values when you want the attribute value to be one of a fixed set of legal values.",,"
<!ATTLIST element-name attribute-name attribute-type attribute-value>,
DTD example:,
<!ATTLIST payment type CDATA ""check"">,
XML example:,
<payment type=""check"" />

,
DTD:,
<!ELEMENT square EMPTY>,
<!ATTLIST square width CDATA ""0"">,
Valid XML:,
<square width=""100"" />
,
<!ATTLIST element-name attribute-name attribute-type #REQUIRED>
,
DTD:,
<!ATTLIST person number CDATA #REQUIRED>,
Valid XML:,
<person number=""5677"" />,
Invalid XML:,
<person />
,
<!ATTLIST element-name attribute-name attribute-type #IMPLIED>
,
DTD:,
<!ATTLIST contact fax CDATA #IMPLIED>,
Valid XML:,
<contact fax=""555-667788"" />,
Valid XML:,
<contact />
,
<!ATTLIST element-name attribute-name attribute-type #FIXED ""value"">
,
DTD:,
<!ATTLIST sender company CDATA #FIXED ""Microsoft"">,
Valid XML:,
<sender company=""Microsoft"" />,
Invalid XML:,
<sender company=""W3Schools"" />
,
<!ATTLIST element-name attribute-name (en1|en2|..) default-value>
,
DTD:,
<!ATTLIST payment type (check|cash) ""cash"">,
XML example:,
<payment type=""check"" />,
or,
<payment type=""cash"" />
",
DTD - ,Elements,"Declaring Elements,Empty Elements,Elements with Parsed Character Data,Elements with any Contents,Elements with Children (sequences),Declaring Only One Occurrence of an Element,Declaring Minimum One Occurrence of an Element,Declaring Zero or More Occurrences of an Element,Declaring Zero or One Occurrences of an Element ,Declaring either/or Content,Declaring Mixed Content",,"In a DTD, elements are declared with an ELEMENT declaration.,In a DTD, XML elements are declared with the following syntax:,Empty elements are declared with the category keyword EMPTY:,Elements with only parsed character data are declared with #PCDATA inside parentheses:,Elements declared with the category keyword ANY, can contain any combination of parsable data:,Elements with one or more children are declared with the name of the children elements inside parentheses:,When children are declared in a sequence separated by commas, the children must appear in the same sequence in the document.
In a full declaration, the children must also be declared, and the children can also have children.
The full declaration of the ""note"" element is:
,The example above declares that the child element ""message"" must occur once, and only once inside the ""note"" element.,The + sign in the example above declares that the child element ""message"" must occur
one or more times inside the ""note"" element.,The * sign in the example above declares that the child element ""message"" can occur zero or more times inside the ""note"" element.,The ? sign in the example above declares that the child element ""message"" can occur zero or one time inside the ""note"" element.,The example above declares that the ""note"" element must contain a ""to"" element, a ""from""
element, a ""header"" element, and either a ""message"" or a ""body"" element.,The example above declares that the ""note"" element can contain zero or more occurrences of parsed character data, ""to"", ""from"", ""header"", or ""message"" elements.",,"
<!ELEMENT element-name category>,or,<!ELEMENT element-name (element-content)>
,
<!ELEMENT element-name EMPTY>,
Example:,
<!ELEMENT br EMPTY>,
XML example:,
<br />
,
<!ELEMENT element-name (#PCDATA)>,
Example:,
<!ELEMENT from (#PCDATA)>
,
<!ELEMENT element-name ANY>,
Example:,
<!ELEMENT note ANY>
,
<!ELEMENT element-name (child1)>,
or,
<!ELEMENT element-name (child1,child2,...)>,
Example:,
<!ELEMENT note (to,from,heading,body)>
,
<!ELEMENT note (to,from,heading,body)>,
<!ELEMENT to      (#PCDATA)>,
<!ELEMENT from    (#PCDATA)>,
<!ELEMENT heading (#PCDATA)>,
<!ELEMENT body    (#PCDATA)>
,
<!ELEMENT element-name (child-name)>,
Example:,
<!ELEMENT note (message)>
,
<!ELEMENT element-name (child-name+)>,
Example:,
<!ELEMENT note (message+)>
,
<!ELEMENT element-name (child-name*)>,
Example:,
<!ELEMENT note (message*)>
,
<!ELEMENT element-name (child-name?)>,
Example:,
<!ELEMENT note (message?)>
,
<!ELEMENT note (to,from,header,(message|body))>
,
<!ELEMENT note (#PCDATA|to|from|header|message)*>
",
DTD - ,XML Building Blocks,"The Building Blocks of XML Documents,Elements,Attributes,Entities,PCDATA,CDATA",,"The main building blocks of both XML and HTML documents are elements.,Seen from a DTD point of view, all XML documents are made up by the following building blocks:,Elements are the , of both XML and HTML documents.,Examples of HTML elements are ""body"" and ""table"". Examples of XML elements could be
""note"" and ""message"". Elements can contain text, other elements, or be empty. Examples of empty HTML elements are ""hr"", ""br"" and
""img"".,Examples:,Attributes provide ,.,Attributes are always placed inside the opening tag of an element. Attributes
always come in name/value pairs. The following ""img"" element has additional information about a source file:,The name of the element is ""img"". The name of the attribute is
""src"". The value of the attribute is ""computer.gif"".
Since the element itself is empty it is closed by a "" /"".,Some characters have a special meaning in XML, like the less than sign (<) 
that defines the start of an XML tag.,Most of you know the HTML entity: ""&nbsp;"". This ""no-breaking-space"" entity is used in HTML to insert an extra space in a document.
Entities are expanded when a document is parsed by an XML parser.,The following entities are predefined in XML:,PCDATA means parsed character data.,Think of character data as the text found between the start tag and the end tag of an XML element.,. ,.,Tags inside the text will be treated as markup and entities will be expanded.,However, parsed character data should not contain any &, <, or > characters; 
these need to be represented by the &amp; &lt; and &gt; entities, respectively.,CDATA means character data.,.
Tags inside the text will NOT be treated as markup and entities will not be expanded.","Elements,Attributes,Entities,PCDATA,CDATA","
<body>some text</body>,
<message>some text</message>
,
<img src=""computer.gif"" />
",
DTD ,Tutorial,"What is a DTD?,Why Use a DTD?,An Internal DTD Declaration,An External DTD Declaration","XML document with an internal DTD,XML document with a reference to an external DTD","A DTD is a Document Type Definition.,A DTD defines the structure and the legal elements and attributes of an XML document.,With a DTD, independent groups of people can agree on a standard DTD for interchanging data.,An application can use a DTD to verify that XML data is valid.,If the DTD is declared inside the XML file, it must be wrapped inside the <!DOCTYPE> definition:,The DTD above is interpreted like this:,If the DTD is declared in an external file, the <!DOCTYPE> definition must 
contain a reference to the DTD file:,And here is the file ""note.dtd"", which contains the DTD:","  defines that the root element of this document is note,  defines that the note element must contain four elements: ""to,from,heading,body"",  defines the to element to be of type ""#PCDATA"",  defines the from element to be of type ""#PCDATA"", defines the heading element to be of type ""#PCDATA"", defines the body element to be of type ""#PCDATA""","
<?xml version=""1.0""?>,
<!DOCTYPE note [,
  <!ELEMENT note (to,from,heading,body)>,
  <!ELEMENT to      (#PCDATA)>,
  <!ELEMENT from    (#PCDATA)>,
  <!ELEMENT heading (#PCDATA)>,
  <!ELEMENT body    (#PCDATA)>,
]>,
<note>,
  <to>Tove</to>,
  <from>Jani</from>,
  <heading>Reminder</heading>,
  <body>Don't forget me this weekend</body>,
</note>
,
<?xml version=""1.0""?>,
<!DOCTYPE note SYSTEM ""note.dtd"">,
<note>,
 
<to>Tove</to>,
 
<from>Jani</from>,
 
<heading>Reminder</heading>,
 
<body>Don't forget me this weekend!</body>,
</note>
,
<!ELEMENT note (to,from,heading,body)>,
<!ELEMENT to (#PCDATA)>,
<!ELEMENT from (#PCDATA)>,
<!ELEMENT heading (#PCDATA)>,
<!ELEMENT body (#PCDATA)>
",
XQuery ,Functions,"XQuery Functions,XQuery Data Types,Examples of Function Calls,XQuery User-Defined Functions",,"XQuery 1.0, XPath 2.0, and XSLT 2.0 share the same functions library.,XQuery is built on XPath expressions. XQuery 1.0 and XPath 2.0 share the same 
data model and support the same functions and operators. ,You can also define your own functions in XQuery.,XQuery shares the same data types as XML Schema 1.0 (XSD).,A call to a function can appear where an expression may appear. Look at the examples below:,Example 1: In an element,Example 2: In the predicate of a path expression,Example 3: In a let clause,If you cannot find the XQuery function you need, you can write your own.,User-defined functions can be defined in the query or in a separate library.,Notes on user-defined functions: ","Use the declare function keyword,The name of the function must be prefixed,The data type of the parameters are mostly the same as the data types defined in XML Schema,The body of the function must be surrounded by curly braces",,
"XQuery , and ","Selecting,Filtering","The XML Example Document,Selecting and Filtering Elements,The for Clause,The let Clause,The where Clause,The order by Clause,The return Clause",,"We will use the ""books.xml"" document in the examples below (same XML file as in the previous chapters).,.,As we have seen in the previous chapters, we are selecting and filtering elements with either a Path expression or with a FLWOR expression.,Look at the following FLWOR expression:,The for clause binds a variable to each item returned by the in expression. 
The for clause results in iteration. There can be multiple for clauses in the same FLWOR expression.,To loop a specific number of times in a for clause, you may use the , keyword:,Result:,The , keyword can be used to count the iteration:,Result:,It is also allowed with more than one in expression in the for clause. Use comma to separate each in expression:,Result:,The let clause allows variable assignments and it avoids repeating the same expression many times. 
The let clause does not result in iteration.,Result:,The where clause is used to specify one or more criteria for the result:,The order by clause is used to specify the sort order of the result. Here we 
want to order the result by category and title:,Result:,The return clause specifies what is to be returned.,Result:","for - (optional) binds a variable to each item returned by the in expression,let - (optional) ,where - (optional) specifies a criteria,order by - (optional) specifies the sort-order of the result,return - specifies what to return in the result","
<test>1</test>,
<test>2</test>,
<test>3</test>,
<test>4</test>,
<test>5</test>
,
<book>1. Everyday Italian</book>,
<book>2. Harry Potter</book>,
<book>3. XQuery Kick Start</book>,
<book>4. Learning XML</book>
,
<test>x=10 and y=100</test>,
<test>x=10 and y=200</test>,
<test>x=20 and y=100</test>,
<test>x=20 and y=200</test>
,
<test>1 2 3 4 5</test>
,
<title lang=""en"">Harry Potter</title>,
<title lang=""en"">Everyday Italian</title>,
<title lang=""en"">Learning XML</title>,
<title lang=""en"">XQuery Kick Start</title>
,
<title lang=""en"">Everyday Italian</title>,
<title lang=""en"">Harry Potter</title>,
<title lang=""en"">XQuery Kick Start</title>,
<title lang=""en"">Learning XML</title>
",
"XQuery , and ","Adding Elements,Attributes","The XML Example Document,Adding Elements and Attributes to the Result",,"We will use the ""books.xml"" document in the examples below (same XML file as in the previous chapters).,.,As we have seen in a previous chapter, we may include elements and attributes from the input document (""books.xml) in the result:,The XQuery expression above will include both the title element and the lang attribute in the result, like this:,The XQuery expression above returns the title elements the exact same way as they are described in the input document.,We now want to add our own elements and attributes to the result!,Now, we want to add some HTML elements to the result. We will put the result in an HTML list - together with some text:,The XQuery expression above will generate the following result:,Next, we want to use the category attribute as a class attribute in the HTML list:,The XQuery expression above will generate the following result:",,"
<title lang=""en"">Everyday Italian</title>,
<title lang=""en"">Harry Potter</title>,
<title lang=""en"">Learning XML</title>,
<title lang=""en"">XQuery Kick Start</title>
,
<html>,
<body>,
<h1>Bookstore</h1>,
<ul>,
<li>Everyday Italian. Category: COOKING</li>,
<li>Harry Potter. Category: CHILDREN</li>,
<li>Learning XML. Category: WEB</li>,
<li>XQuery Kick Start. Category: WEB</li>,
</ul>,
</body>,
</html>
,
<html>,
<body>,
<h1>Bookstore</h1>,
<ul>,
<li class=""COOKING"">Everyday Italian</li>,
<li class=""CHILDREN"">Harry Potter</li>,
<li class=""WEB"">Learning XML</li>,
<li class=""WEB"">XQuery Kick Start</li>,
</ul>,
</body>,
</html>
",
XQuery ,Syntax,"XQuery Basic Syntax Rules,The XML Example Document,XQuery Conditional Expressions,XQuery Comparisons",,"XQuery is case-sensitive and XQuery elements, attributes, and variables must be valid XML names.,Some basic syntax rules:,We will use the ""books.xml"" document in the examples below (same XML file as in the previous chapters).,.,""If-Then-Else"" expressions are allowed in XQuery.,Look at the following example:, parentheses around the if expression are required. else is required, but it can be just else ().,The result of the example above will be:,In XQuery there are two ways of comparing values.,1. General comparisons: =, !=, <, <=, >, >=,2. Value comparisons: eq, ne, lt, le, gt, ge,The difference between the two comparison methods are shown below.,The following expression returns true if any q attributes have a value 
greater than 10:,The following expression returns true if there is only one q attribute 
returned by the expression, and its value is greater than 10. If more than one q 
is returned, an error occurs:","XQuery is case-sensitive,XQuery elements, attributes, and variables must be valid XML names,An XQuery string value can be in single or double quotes,An XQuery variable is defined with a $ followed by a name, e.g. $bookstore,XQuery comments are delimited by (: and :), e.g. (: XQuery Comment :)","
<adult>Everyday Italian</adult>,
<child>Harry Potter</child>,
<adult>XQuery Kick Start</adult>,<adult>Learning XML</adult>
",
XQuery ,Terms,"XQuery Terminology,Relationship of Nodes",,"In XQuery, there are seven kinds of nodes: element, 
attribute, text, namespace, processing-instruction, comment, and document (root) nodes.,XML documents are treated as trees of nodes. The root of the tree is called 
the document node (or root node).,Look at the following XML document:,Example of nodes in the XML document above:,Atomic values are nodes with no children or parent.,Example of atomic values:,Items are atomic values or nodes.,Each element and attribute has one parent.,In the following example; the book element is the parent of the title, author, year, and price:,Element nodes may have zero, one or more children.,In the following example; the title, author, year, and price elements are all children of the book element:,Nodes that have the same parent.,In the following example; the title, author, year, and price elements are all siblings:,A node's parent, parent's parent, etc.,In the following example; the ancestors of the title element are the book element and the bookstore element:,A node's children, children's children, etc.,In the following example; descendants of the bookstore element are the book, title, author, year, and price elements:",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore>,
<book>,
   
  <title lang=""en"">Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>,
</bookstore>
,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>
,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>
,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>
,
<bookstore>,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>,
</bookstore>
,
<bookstore>,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>,
</bookstore>
",
XQuery ,FLWOR + HTML,"The XML Example Document,Present the Result In an HTML List",,"We will use the ""books.xml"" document in the examples below (same XML file as in the previous chapters).,.,Look at the following XQuery FLWOR expression:,The expression above will select all the title elements under the book 
elements that are under the bookstore element, and return the title elements in 
alphabetical order.,Now we want to list all the book-titles in our bookstore in an HTML list. We 
add <ul> and <li> tags to the FLWOR expression: ,The result of the above will be:,Now we want to eliminate the title element, and show only the data inside 
the title element:,The result will be (an HTML list):",,"
<ul>,
<li><title lang=""en"">Everyday Italian</title></li>,
<li><title lang=""en"">Harry Potter</title></li>,
<li><title lang=""en"">Learning XML</title></li>,
<li><title lang=""en"">XQuery Kick Start</title></li>,
</ul>
,
<ul>,
<li>Everyday Italian</li>,
<li>Harry Potter</li>,
<li>Learning XML</li>,
<li>XQuery Kick Start</li>,
</ul>
",
"XQuery , Expressions",FLWOR,"What is FLWOR?,The XML Example Document,How to Select Nodes From ""books.xml"" With FLWOR",,"FLWOR (pronounced ""flower"") is an acronym for ""For, Let, Where, Order by, Return"".,We will use the ""books.xml"" document in the examples below (same 
XML file as in the previous chapter).,.,Look at the following path expression:,The expression above will select all the title elements under the book 
elements that are under the bookstore element that have a price element with a value that is higher than 30.,The following FLWOR expression will select exactly the same as the path expression above:,The result will be:,With FLWOR you can sort the result:,The , clause selects all book elements under the bookstore element into a variable called $x.,The , clause selects only book elements with a price element with a value greater than 30.,The , clause defines the sort-order. Will be sort by the title element.,The , clause specifies what should be returned. Here it returns the title elements.,The result of the XQuery expression above will be:"," - selects a sequence of nodes, - binds a sequence to a variable, - filters the nodes, - sorts the nodes, - what to return (gets evaluated once for every node)","
<title lang=""en"">XQuery Kick Start</title>,
<title lang=""en"">Learning XML</title>
,
<title lang=""en"">Learning XML</title>,
<title lang=""en"">XQuery Kick Start</title>
",
XQuery ,Example,"The XML Example Document,How to Select Nodes From ""books.xml""?",,"Let's learn some basic XQuery by looking at an example.,We will use the following XML document in the examples below.,""books.xml"":,.,XQuery uses functions to extract data from XML documents.,The doc() function is used to open the ""books.xml"" file:,XQuery uses path expressions to navigate through elements in an XML document.,The following path expression is used to select all the title elements in 
the ""books.xml"" file:,(/bookstore selects the bookstore element, /book selects all the book elements 
under the bookstore element, and /title selects all the title elements under each book element),The XQuery above will extract the following:,XQuery uses predicates to limit the extracted data from XML documents.,The following predicate is used to select all the book elements under 
the bookstore element that have a price element with a value that is less than 
30:,The XQuery above will extract the following:",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore>,
<book category=""COOKING"">,
   
  <title lang=""en"">Everyday Italian</title>,
   
  <author>Giada De Laurentiis</author>,
   
  <year>2005</year>,
   
  <price>30.00</price>,
</book>,
<book category=""CHILDREN"">,
   
  <title lang=""en"">Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>,
<book category=""WEB"">,
   
  <title lang=""en"">XQuery Kick Start</title>,
   
  <author>James McGovern</author>,
   
  <author>Per Bothner</author>,
   
  <author>Kurt Cagle</author>,
   
  <author>James Linn</author>,
   
  <author>Vaidyanathan Nagarajan</author>,
   
  <year>2003</year>,
   
  <price>49.99</price>,
</book>,
<book category=""WEB"">,
   
  <title lang=""en"">Learning XML</title>,
   
  <author>Erik T. Ray</author>,
   
  <year>2003</year>,
   
  <price>39.95</price>,
</book>,
</bookstore>
,
<book category=""CHILDREN"">,
   
  <title lang=""en"">Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>
",
XQuery ,Tutorial,"What is XQuery?,XQuery is About Querying XML,XQuery and XPath,XQuery - Examples of Use,XQuery is a W3C Recommendation",XQuery Example,"XQuery is a language for finding and extracting elements and attributes from XML 
documents.,Here is an example of what XQuery could solve:,""Select all CD records with a price less than $10 from the CD collection 
stored in cd_catalog.xml"",XQuery 1.0 and XPath 2.0 share the same data model and support the same functions 
and operators. If you have already studied XPath you will have no problems with 
understanding XQuery.,XQuery can be used to:,XQuery is compatible with several W3C standards, such as XML, Namespaces, 
XSLT, XPath, and XML Schema.,XQuery 1.0 became a W3C Recommendation in 2007.","XQuery is , language for querying XML data,XQuery for XML is like SQL for databases,XQuery is built on XPath expressions,XQuery is supported by all major databases,XQuery is a W3C Recommendation,Extract information to use in a Web Service,Generate summary reports,Transform XML data to XHTML,Search Web documents for relevant information",,
XSLT ,Examples,"The <xsl:template> Element,The <xsl:value-of> Element,The <xsl:for-each> Element,The <xsl:sort> Element,The <xsl:if> Element,The <xsl:choose> Element,The <xsl:apply-templates> Element",,"
This example will add a pink background-color to the ""Artist"" column WHEN the price of the CD is higher than 10:,
This example will add a pink background color to the ""Artist"" column WHEN the 
price of the CD is higher than 10, and a grey background-color WHEN the price of the CD is higher than 9 and lower or equal to 10.",,,
XSLT - ,Editing XML,"Open, Edit and Save XML,The XML File and the XSL File,The PHP File,The ASP File",,"Data stored in XML files can be edited from an Internet browser.,Now, we will show how to open, edit, and save an XML file that is stored on the server.,We will use XSL to transform the XML document into an HTML form. The values of the XML 
elements will be written to HTML input fields in an HTML form. The HTML form 
is editable. After editing the data, the data is going to be submitted back to the server and 
the XML file will be updated (we will show code for both PHP and ASP). ,First, take a look at the XML document (""tool.xml""):,.,Then, take a look at the following style sheet (""tool.xsl""):,.,The XSL file above loops through the elements in the XML file and creates one input field for each XML ""field"" 
element. The value of the XML ""field"" element's ""id"" attribute is added to both the ""id"" and ""name"" attributes of each HTML input 
field. The value of each XML ""value"" element is added to the ""value"" attribute of each HTML input field. The result 
is an editable HTML form that contains the values from the XML file.,Then, we have a second style sheet: ""tool_updated.xsl"". This is the XSL file that will be used to display the updated XML data. This style sheet will 
not result in an editable HTML form, but a static HTML table:,.,In the ""tool.xsl"" file above, change the HTML form's action attribute 
to ""edittool.php"".,The ""edittool.php"" page contains two functions: The loadFile() function loads and transforms the XML file for display and the updateFile() 
function applies the changes to the XML file:, If you don't know how to write PHP, please study our
,., We are doing the transformation and applying the changes to the XML file on the server. This is a cross-browser solution. The client will only 
get HTML back from the server - which will work in any browser.,The HTML form in the ""tool.xsl"" file above has an action attribute with a value of ""edittool.asp"".,The ""edittool.asp"" page contains two functions: The loadFile() function loads and transforms the XML file for display and the updateFile() 
function applies the changes to the XML file:",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<tool>,
   
  <field id=""prodName"">,
       
    <value>HAMMER HG2606</value>,
   
  </field>,
   
  <field id=""prodNo"">,
       
    <value>32456240</value>,
   
  </field>,
   
  <field id=""price"">,
       
    <value>$30.00</value>,
   
  </field>,
</tool>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xsl:stylesheet version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,
<xsl:template match=""/"">,
 
<html>,
 
<body>,
 
<form method=""post"" action=""edittool.asp"">,
 
<h2>Tool Information (edit):</h2>,
 
<table border=""0"">,
   
<xsl:for-each select=""tool/field"">,
   
<tr>,
     
<td><xsl:value-of select=""@id""/></td>,
     
<td>,
     
<input type=""text"">,
     
<xsl:attribute name=""id"">,
        <xsl:value-of select=""@id"" />,
      </xsl:attribute>,
     
<xsl:attribute name=""name"">,
        <xsl:value-of select=""@id"" />,
      </xsl:attribute>,
     
<xsl:attribute name=""value"">,
        <xsl:value-of select=""value"" />,
      </xsl:attribute>,
     
</input>,
     
</td>,
   
</tr>,
   
</xsl:for-each>,
 
</table>,
 
<br />,
 
<input type=""submit"" id=""btn_sub"" name=""btn_sub"" value=""Submit"" />,
 
<input type=""reset"" id=""btn_res"" name=""btn_res"" value=""Reset"" />,
 
</form>,
 
</body>,
 
</html>,
</xsl:template>,
</xsl:stylesheet>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xsl:stylesheet version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,
<xsl:template match=""/"">,
 
<html>,
 
<body>,
 
<h2>Updated Tool Information:</h2>,
 
<table border=""1"">,
   
<xsl:for-each select=""tool/field"">,
   
<tr>,
     
<td><xsl:value-of select=""@id"" /></td>,
     
<td><xsl:value-of select=""value"" /></td>,
   
</tr>,
   
</xsl:for-each>,
 
</table>,
 
</body>,
 
</html>,
</xsl:template>,
</xsl:stylesheet>
",
XSLT - ,On the Server,"A Cross Browser Solution,The XML File and the XSLT File,PHP Code: Transform XML to XHTML on the Server,ASP Code: Transform XML to XHTML on the Server",,"To make XML data available to all kind of browsers, we 
can transform the XML document on the
SERVER and send it  back to the browser as XHTML.,To make XML data available to all kind of browsers, we 
can transform the XML document on the
server and send back to the browser as XHTML.,That's another beauty of XSLT. One of the design goals for XSLT was to make it possible to
transform data from one format
to another on a server, returning readable data to all kinds of browsers.,Look at the XML document that you have seen in the previous chapters:,.,And the accompanying XSL style sheet:,., The above sentence indicates that an XML file could be 
transformed using many different XSL style sheets.,Here is the PHP source code needed to transform the XML file to XHTML on the server:, If you don't know how to write PHP, please study our
,.,.,Here is the ASP source code needed to transform the XML file to XHTML on the server:,.",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<catalog>,
   
  <cd>,
       
    <title>Empire Burlesque</title>,
       
    <artist>Bob Dylan</artist>,
       
    <country>USA</country>,
       
    <company>Columbia</company>,
       
    <price>10.90</price>,
       
    <year>1985</year>,
   
  </cd>,
.,
.,
</catalog>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xsl:stylesheet version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,
<xsl:template match=""/"">,
     
    <h2>My CD Collection</h2>,
     
    <table border=""1"">,
         
      <tr bgcolor=""#9acd32"">,
             
        <th style=""text-align:left"">Title</th>,
             
        <th style=""text-align:left"">Artist</th>,
         
      </tr>,
         
      <xsl:for-each select=""catalog/cd"">,
         
      <tr>,
             
        <td><xsl:value-of select=""title"" /></td>,
             
        <td><xsl:value-of select=""artist"" /></td>,
         
      </tr>,
         
      </xsl:for-each>,
   
  </table>,
</xsl:template>,
</xsl:stylesheet>
",
XSLT - ,On the Client,"A JavaScript Solution,The XML File and the XSL File,Transforming XML to XHTML in the Browser,Example Explained:",Example,"XSLT can be used to transform the document to XHTML in your browser.,Even if this works fine, it is not always desirable to include a style sheet reference in 
an XML file (e.g. it will not work in a non XSLT aware browser.),A more versatile solution would be to use a JavaScript to do the transformation.,By using a JavaScript, we can:,That is the beauty of XSLT! One of the design goals for XSLT was to make it 
possible to transform data from one format to another, supporting different 
browsers and different user needs.,Look at the XML document that you have seen in the previous chapters:,.,And the accompanying XSL style sheet:,., The above sentence indicates that an XML file could be transformed using many different XSL style sheets.,Here is the source code needed to transform the XML file to XHTML on the client:, If you don't know how to write JavaScript, please study our ,.","do browser-specific testing,use different style sheets according to browser and user
    needs,Create an XMLHttpRequest object,Use the open() and send() methods of the XMLHttpRequest object to send a request to a server,Get the response data as XML data,Load XML and XSL files,Test what kind of browser the user has,If Internet Explorer:,Use the transformNode() method to apply the XSL style sheet to the  xml document,Set the body of the current document (id=""example"") to contain the  styled xml document,
 ,If other browsers:,Create a new XSLTProcessor object and import the XSL file to it,Use the transformToFragment() method to apply the XSL style sheet to  the xml document,Set the body of the current document (id=""example"") to contain the  styled xml document,
 ","
<?xml version=""1.0"" encoding=""UTF-8""?>,
<catalog>,
   
  <cd>,
       
    <title>Empire Burlesque</title>,
       
    <artist>Bob Dylan</artist>,
       
    <country>USA</country>,
       
    <company>Columbia</company>,
       
    <price>10.90</price>,
       
    <year>1985</year>,
   
  </cd>,
.,
.,
</catalog>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xsl:stylesheet version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,
<xsl:template match=""/"">,
     
    <h2>My CD Collection</h2>,
     
    <table border=""1"">,
         
      <tr bgcolor=""#9acd32"">,
             
        <th style=""text-align:left"">Title</th>,
             
        <th style=""text-align:left"">Artist</th>,
         
      </tr>,
         
      <xsl:for-each select=""catalog/cd"">,
         
      <tr>,
             
        <td><xsl:value-of select=""title"" /></td>,
             
        <td><xsl:value-of select=""artist"" /></td>,
         
      </tr>,
         
      </xsl:for-each>,
   
  </table>,
</xsl:template>,
</xsl:stylesheet>
,
<!DOCTYPE html>,<html>,<head>,<script>,function loadXMLDoc(filename),{,if (window.ActiveXObject),  
{,  xhttp = new ActiveXObject(""Msxml2.XMLHTTP"");,  },else
,  {,  xhttp = new XMLHttpRequest();,  },
xhttp.open(""GET"", filename, false);,try {xhttp.responseType = ""msxml-document""} 
catch(err) {} // Helping IE11,xhttp.send("""");,return xhttp.responseXML;,
},function displayResult(),{,xml = loadXMLDoc(""cdcatalog.xml"");,
xsl = loadXMLDoc(""cdcatalog.xsl"");,// code for IE,if (window.ActiveXObject 
|| xhttp.responseType == ""msxml-document""),  {,  ex = 
xml.transformNode(xsl);,  document.getElementById(""example"").innerHTML 
= ex;,  },// code for Chrome, Firefox, Opera, etc.,else if (document.implementation 
&& document.implementation.createDocument),  {,  
xsltProcessor = new XSLTProcessor();,  
xsltProcessor.importStylesheet(xsl);,  resultDocument = 
xsltProcessor.transformToFragment(xml, document);,  
document.getElementById(""example"").appendChild(resultDocument);,  },
},</script>,</head>,<body onload=""displayResult()"">,<div 
id=""example"" />,</body>,</html>",
"XSLT , Element",<xsl:apply-templates>,The <xsl:apply-templates> Element,Example,"The <xsl:apply-templates> element applies a template rule to 
the current element or to the current element's child nodes.,The <xsl:apply-templates> element applies a template to the current 
element or to the current element's child nodes.,If we add a ""select"" attribute to the <xsl:apply-templates> 
element, it will process only the child elements that matches the value of the 
attribute. We can use the ""select"" attribute to specify in which order the 
child nodes are to be processed.,Look at the following XSL style sheet:",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xsl:stylesheet version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,
<xsl:template match=""/"">,
 
<html>,
 
<body>,
 
<h2>My CD Collection</h2>,
 
<xsl:apply-templates/>,
 
</body>,
 
</html>,
</xsl:template>,
<xsl:template match=""cd"">,
 
<p>,
 
<xsl:apply-templates select=""title""/>,
 
<xsl:apply-templates select=""artist""/>,
 
</p>,
</xsl:template>,
<xsl:template match=""title"">,
 
Title: <span style=""color:#ff0000"">,
 
<xsl:value-of select="".""/></span>,
 
<br />,
</xsl:template>,
<xsl:template match=""artist"">,
 
Artist: <span style=""color:#00ff00"">,
 
<xsl:value-of select="".""/></span>,
 
<br />,
</xsl:template>,
</xsl:stylesheet>
",
"XSLT , Element",<xsl:choose>,"The <xsl:choose> Element,Where to put the Choose Condition,Another Example","Example,Example","The <xsl:choose> element is used in conjunction with <xsl:when> and <xsl:otherwise> to express multiple 
conditional tests.,To insert a multiple conditional test against the XML file, add the <xsl:choose>, <xsl:when>, and <xsl:otherwise> elements to the XSL file:,The code above will add a pink background-color to the ""Artist"" column WHEN the price of the CD is higher than 10.,Here is another example that contains two <xsl:when> elements:,The code above will add a pink background color to the ""Artist"" column WHEN the 
price of the CD is higher than 10, and a grey background-color WHEN the price of the CD is higher than 9 and lower or equal to 10.",,"
<xsl:choose>,
   
  <xsl:when test="","">,
       
    ... some output ...,
   
  </xsl:when>,
   
  <xsl:otherwise>,
       
    ... some output ....,
   
  </xsl:otherwise>,
</xsl:choose>
",
"XSLT , Element",<xsl:if>,"The <xsl:if> Element,Where to Put the <xsl:if> Element",Example,"The <xsl:if> element is used to put a conditional test against the content of the XML file.,To put a conditional if test against the content of the XML file, add an <xsl:if> element to the XSL document.,To add a conditional test, add the <xsl:if> element inside the <xsl:for-each> element in the XSL file:, The value of the required , attribute contains the expression to be evaluated.,The code above will only output the title and artist elements of the CDs that has a price that is higher than 10.",,"
<xsl:if test="","">,
   
  ...some output if the expression is true...,
</xsl:if>
",
"XSLT , Element",<xsl:sort>,Where to put the Sort Information,Example,"The <xsl:sort> element is used to sort the output.,To sort the output, simply add an <xsl:sort> element inside the <xsl:for-each> element in the XSL file:, The , attribute indicates what XML element to sort on.",,,
"XSLT , Element",<xsl:for-each>,"The <xsl:for-each> Element,Filtering the Output","Example,Example","The <xsl:for-each> element allows you to do looping in XSLT.,The XSL <xsl:for-each> element can be used to select every XML element of a specified node-set:, The value of the , attribute is an XPath expression.
An XPath expression works like navigating a file system; where a forward slash (/) selects subdirectories.,We can also filter the output from the XML file by adding a criterion to the 
select attribute in the <xsl:for-each> element.,Legal filter operators are:,Take a look at the adjusted XSL style sheet:","=  (equal),!= (not equal),&lt; less than,&gt; greater than",,
"XSLT , Element",<xsl:value-of>,"The <xsl:value-of> Element,Example Explained",Example,"The <xsl:value-of> element is used to extract the value of a selected node.,The <xsl:value-of> element can be used to extract the value of an XML element and add it to the output stream of the transformation:, The , attribute, in the example above, contains an XPath expression.
An XPath expression works like navigating a file system; a forward slash (/) selects subdirectories.,The result from the example above was a little disappointing; only one line of data was copied from the XML document to the output. In the next chapter you will learn how to use the ,
element to loop through the XML elements, and display all of the records.",,,
"XSLT , Element",<xsl:template>,"The <xsl:template> Element,Example Explained",Example,"An XSL style sheet consists of one or more set of rules that 
are called templates.,A template contains rules to apply when a 
specified node is matched.,The <xsl:template> element is used to build templates.,The , attribute is used to associate a template with an XML
element. The match attribute can also be used to define a template for the 
entire XML document. The value of the match attribute is an XPath expression (i.e. match=""/"" defines the whole document).,Ok, let's look at a simplified version of the XSL file from the previous chapter:,Since an XSL style sheet is an XML document, it always begins with the XML
declaration: ,.,The next element, ,,,defines that this 
document is an XSLT style sheet document (along with the version number and XSLT namespace attributes).,The , element defines a template.
The , attribute associates the template with the root of the XML source document.,The content inside the <xsl:template> element defines some HTML to write to the output.,The last two lines define the end of the template and the end of the style sheet.,The result from this example was a little disappointing, because no data was copied from the XML document to the output. In the next chapter you will learn how to use the ,
element to select values from the XML elements.",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xsl:stylesheet version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,
<xsl:template match=""/"">,
  
 <html>,
  
 <body>,
    
   <h2>My CD Collection</h2>,
    
   <table border=""1"">,
        
     <tr bgcolor=""#9acd32"">,
            
       <th>Title</th>,
            
       <th>Artist</th>,
        
     </tr>,
        
     <tr>,
            
       <td>.</td>,
            
       <td>.</td>,
        
     </tr>,
    
   </table>,
  
 </body>,
  
 </html>,
</xsl:template>,
</xsl:stylesheet>
",
XSLT - ,Transformation,"Correct Style Sheet Declaration,Start with a Raw XML Document,Create an XSL Style Sheet,Link the XSL Style Sheet to the XML Document",,"Example study: How to transform XML into XHTML using XSLT?,The details of this example will be explained in the next chapter.,The root element that declares the document to be an XSL style sheet is <xsl:stylesheet> or <xsl:transform>., <xsl:stylesheet> and <xsl:transform> are completely synonymous and either can be used!,The correct way to declare an XSL style sheet according to the W3C XSLT Recommendation is:,or:,To get access to the XSLT elements, attributes and features we must declare the XSLT namespace at the top of the document.,The xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" points to the official W3C XSLT namespace. If you use this 
namespace, you must also include the attribute version=""1.0"".,We want to , the following XML document (""cdcatalog.xml"") into XHTML:, Open the XML file (click on 
the link below) - The XML document will be displayed with 
color-coded root and child elements (except in Safari). Often, there is a plus (+) or minus sign (-) to the left of the elements 
that can be clicked to expand or collapse the element structure. ,Then you create an XSL Style Sheet (""cdcatalog.xsl"") with a transformation template: ,Add the XSL style sheet reference to your XML document (""cdcatalog.xml""):,If you have an XSLT compliant browser it will nicely , your XML into XHTML., ,The details of the example above will be explained in the next chapters.",,"
<xsl:stylesheet version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
,
<xsl:transform version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<catalog>,
   
  <cd>,
       
    <title>Empire Burlesque</title>,
       
    <artist>Bob Dylan</artist>,
       
    <country>USA</country>,
       
    <company>Columbia</company>,
       
    <price>10.90</price>,
       
    <year>1985</year>,
   
  </cd>,
.,
.,
</catalog>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<xsl:stylesheet version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,
<xsl:template match=""/"">,
   
  <html>,
   
  <body>,
     
    <h2>My CD Collection</h2>,
     
    <table border=""1"">,
       
    <tr bgcolor=""#9acd32"">,
           
      <th>Title</th>,
           
      <th>Artist</th>,
       
    </tr>,
       
    <xsl:for-each select=""catalog/cd"">,
       
    <tr>,
           
      <td><xsl:value-of select=""title""/></td>,
           
      <td><xsl:value-of select=""artist""/></td>,
       
    </tr>,
       
    </xsl:for-each>,
     
    </table>,
   
  </body>,
   
  </html>,
</xsl:template>,
</xsl:stylesheet>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
,
<catalog>,
   
  <cd>,
       
    <title>Empire Burlesque</title>,
       
    <artist>Bob Dylan</artist>,
       
    <country>USA</country>,
       
    <company>Columbia</company>,
       
    <price>10.90</price>,
       
    <year>1985</year>,
   
  </cd>,
.,
.,
</catalog>
",
XSL(T) Languages,,"It Started with XSL,CSS = Style Sheets for HTML,XSL = Style Sheets for XML,XSL - More Than a Style Sheet Language,What is XSLT?,XSLT = XSL Transformations,XSLT Uses XPath,How Does it Work?,XSLT Browser Support,XSLT is a W3C Recommendation",," is a language for transforming XML documents., is a language for navigating in XML documents., is a language for querying XML documents.,XSL stands for E,tensible ,tylesheet ,anguage.,The World Wide Web Consortium (W3C) started to develop XSL because there was 
a need for an XML-based Stylesheet Language. ,HTML uses predefined tags. The meaning of, and how to display each tag is well
understood.,CSS is used to add styles to HTML elements. ,XML does not use predefined tags, and 
therefore the meaning of each tag is not well understood.,A
<table> element could indicate an HTML table, a piece of furniture, or 
something else - and browsers do not know how to
display it!,So, XSL describes how the XML elements should be displayed.,XSL consists of four parts:,XSLT is the most important part of XSL.,XSLT is used to transform an XML document into another XML document, or another
type of document that is recognized by a browser, like HTML and
XHTML. Normally XSLT does this by transforming each XML element into an (X)HTML
element.,With XSLT you can add/remove elements and attributes to or from the output file. 
You can also rearrange and sort elements, perform tests and make decisions
about which elements to hide and display, and a lot more.,A common way to describe the transformation process is to say that 
,.,XSLT uses XPath to find information in an XML document. XPath is used to 
navigate through elements and attributes in XML documents.,If you want to study XPath first, please read our ,.,In the transformation process, XSLT uses XPath to define parts of the source
document that should match one or more predefined templates. When a match is found,
XSLT will transform the matching part of the source document into the result
document.,All major browsers support XSLT and XPath.,XSLT became a ,.","XSLT - a language for transforming XML documents,XPath - a language for navigating in XML documents,XSL-FO - a language for formatting XML documents (discontinued in 2013),XQuery - a language for querying XML documents ,XSLT stands for XSL Transformations,XSLT is the most important part of XSL,XSLT transforms an XML document into another XML document,XSLT uses XPath to navigate in XML documents,XSLT is a W3C Recommendation",,
XSLT Introduction,,"Online XSLT Editor,What You Should Already Know,XSLT References",XSLT Example,"With our online editor, you can edit XML and XSLT code, and click on a button to view the result.,Before you continue you should have a basic understanding of the following:,If you want to study these subjects first, find the tutorials on our
,.,Description of all the XSLT elements from the W3C Recommendation, and information about browser support.,XSLT 2.0, XPath 2.0, and XQuery 1.0, share the same functions library. There are over 100 built-in functions.
There are functions for string values, numeric values, date and time comparison, node and QName manipulation, 
sequence manipulation, and more.","HTML,XML","
<?xml version=""1.0""?>,
<xsl:stylesheet version=""1.0"",
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,
<xsl:template match=""/"">,
 
<html>,
 
<body>,
   
<h2>My CD Collection</h2>,
   
<table border=""1"">,
     
<tr bgcolor=""#9acd32"">,
       
<th>Title</th>,
       
<th>Artist</th>,
     
</tr>,
     
<xsl:for-each select=""catalog/cd"">,
 
     
<tr>,
         
<td><xsl:value-of select=""title""/></td>,
         
<td><xsl:value-of select=""artist""/></td>,
        </tr>,
     
</xsl:for-each>,
   
</table>,
 
</body>,
 
</html>,
</xsl:template>,
</xsl:stylesheet>
",
XPath ,Examples,"The XML Example Document,Loading the XML Document,Selecting Nodes,Select all the titles,Select the title of the first book,Select all the  prices,Select price nodes with price>35,Select title nodes with price>35","Example,Example,Example,Example,Example","Let's try to learn some basic XPath syntax by looking at some examples.,We will use the following XML document in the examples below.,""books.xml"":,.,Using an XMLHttpRequest object to load XML documents is supported in all modern 
browsers.,Unfortunately, there are different ways of dealing with XPath in different 
browsers.,Chrome, Firefox, Edge, Opera, and Safari use the evaluate() method to select nodes:,Internet Explorer uses the selectNodes() method to select node:,In our examples we have included code that should work with most major browsers.,The following example selects all the title nodes:,The following example selects the title of the first book node under the bookstore element:,The following example selects the text from all the price nodes:,The following example selects all the price nodes with a price higher than 35:,The following example selects all the title nodes with a price higher than 35:",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore>,
<book category=""cooking"">,
 
<title lang=""en"">Everyday Italian</title>,
 
<author>Giada De Laurentiis</author>,
 
<year>2005</year>,
 
<price>30.00</price>,
</book>,
<book category=""children"">,
 
<title lang=""en"">Harry Potter</title>,
 
<author>J K. Rowling</author>,
 
<year>2005</year>,
 
<price>29.99</price>,
</book>,
<book category=""web"">,
 
<title lang=""en"">XQuery Kick Start</title>,
 
<author>James McGovern</author>,
 
<author>Per Bothner</author>,
 
<author>Kurt Cagle</author>,
 
<author>James Linn</author>,
 
<author>Vaidyanathan Nagarajan</author>,
 
<year>2003</year>,
 
<price>49.99</price>,
</book>,
<book category=""web"">,
 
<title lang=""en"">Learning XML</title>,
 
<author>Erik T. Ray</author>,
 
<year>2003</year>,
 
<price>39.95</price>,
</book>,
</bookstore>
",
XPath ,Operators,XPath Operators,,"An XPath expression returns either a node-set, a string, a 
Boolean, or a number.,Below is a list of the operators that can be used in XPath expressions:",,,
XPath ,Axes,"The XML Example Document,XPath Axes,Location Path Expression",,"We will use the following XML document in the examples below.,An axis represents a relationship to the context (current) node, and is used 
to locate nodes relative to that node on the tree.,A location path can be absolute or relative.,An absolute location path starts with a slash ( / ) and a relative location path does not. In both cases the location path consists of one or more steps, each separated by a slash:,Each step is evaluated against the nodes in the current node-set.,A step consists of:,The syntax for a location step is:","an axis (defines the tree-relationship between the selected nodes and the current node),a node-test (identifies a node within an axis),zero or more predicates (to further refine the selected node-set)","
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore>,
<book>,
   
  <title lang=""en"">Harry Potter</title>,
   
  <price>29.99</price>,
</book>,
<book>,
   
  <title lang=""en"">Learning XML</title>,
   
  <price>39.95</price>,
</book>,
</bookstore>
",
XPath ,Syntax,"The XML Example Document,Selecting Nodes,Predicates,Selecting Unknown Nodes,Selecting Several Paths",,"XPath uses path expressions to select nodes or node-sets in an XML document. 
The node is selected by following a path or steps.,We will use the following XML document in the examples below.,XPath uses path expressions to select nodes in an XML document. The node is selected by following a path or steps. 
The most useful 
path expressions are listed below:,In the table below we have listed some path expressions and the result of the 
expressions:,Predicates are used to find a specific node or a node that contains a specific value.,Predicates are always embedded in square brackets.,In the table below we have listed some path expressions with predicates and the result of the 
expressions:,XPath wildcards can be used to select unknown XML nodes.,In the table below we have listed some path expressions and the result of the 
expressions:,By using the | operator in an XPath expression you can select several paths.,In the table below we have listed some path expressions and the result of the 
expressions:",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore>,
<book>,
 
<title lang=""en"">Harry Potter</title>,
 
<price>29.99</price>,
</book>,
<book>,
 
<title lang=""en"">Learning XML</title>,
 
<price>39.95</price>,
</book>,
</bookstore>
",
XPath ,Nodes,"XPath Terminology,Relationship of Nodes",,"In XPath, there are seven kinds of nodes: element, attribute, text, namespace, processing-instruction, comment, and document nodes.,XML documents are treated as trees of nodes. The topmost element of the tree is called the 
root element.,Look at the following XML document:,Example of nodes in the XML document above:,Atomic values are nodes with no children or parent.,Example of atomic values:,Items are atomic values or nodes.,Each element and attribute has one parent.,In the following example; the book element is the parent of the title, author, year, and price:,Element nodes may have zero, one or more children.,In the following example; the title, author, year, and price elements are all children of the book element:,Nodes that have the same parent.,In the following example; the title, author, year, and price elements are all siblings:,A node's parent, parent's parent, etc.,In the following example; the ancestors of the title element are the book element and the bookstore element:,A node's children, children's children, etc.,In the following example; descendants of the bookstore element are the book, title, author, year, and price elements:",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore>, 
<book>,
    <title lang=""en"">Harry Potter</title>,
    <author>J K. Rowling</author>,
 
 
<year>2005</year>,
    <price>29.99</price>,
 
</book>,</bookstore>
,
<bookstore>  (root element node),
<author>J K. Rowling</author>  (element node),
lang=""en"" (attribute node)
,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>
,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>
,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>
,
<bookstore>,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>,
</bookstore>
,
<bookstore>,
<book>,
   
  <title>Harry Potter</title>,
   
  <author>J K. Rowling</author>,
   
  <year>2005</year>,
   
  <price>29.99</price>,
</book>,
</bookstore>
",
XPath ,Tutorial,"XPath Path Expressions,XPath Standard Functions,XPath is Used in XSLT,XPath is a W3C Recommendation",,"XPath uses path expressions to select nodes or node-sets in an XML document.,These path expressions look very much like the path expressions you use with  
traditional computer file systems:,XPath includes over 200 built-in functions.,There are functions for string values, numeric values, booleans, date and time comparison, 
node manipulation, sequence manipulation, and much more.,Today XPath expressions can also be used in JavaScript, Java, XML Schema, PHP, Python, 
C and C++, and lots of other languages.,XPath is a major element in the XSLT standard.,With XPath knowledge you will be able to take great advantage of your XSLT 
knowledge.,XPath 1.0 became a W3C Recommendation on November 16, 1999.,XPath 2.0 became a W3C Recommendation on January 23, 2007.,XPath 3.0 became a W3C Recommendation on April 8, 2014.","XPath stands for XML Path Language,XPath uses ""path like"" syntax to identify and navigate nodes in an XML document,XPath contains over 200 built-in functions,XPath is a major element in the XSLT standard,XPath is a W3C recommendation",,
XML DOM ,Examples,,,"
,
Create a simple XMLHttpRequest, and retrieve data from a TXT file.
,
,
Retrieve header information of a resource (file).
,
,
Retrieve specific header information of a resource (file).
,
,
How a web page can communicate with a web server while a user type characters in an input field.
,
,
How a web page can fetch information from a database with the XMLHttpRequest 
object.
,
,
Create an XMLHttpRequest to retrieve data from an XML file and display the data in an HTML table.
,The examples below use the XML file ,.
,
,
,
,
,
,The examples below use the XML file ,.
,
,
,
,
,
,
,
,The examples below use the XML file ,.
,
,
,
,
,
,The examples below use the XML file ,.
,
,
,
,
,The examples below use the XML file ,.
,
,
,
,The examples below use the XML file ,.,
,
,
,
,
,
,The examples below use the XML file ,.
,
,
,
,The examples below use the XML file ,.
,
,
,
,
,The examples below use the XML file ,.
,
,
,
,
,
,
,
,The examples below use the XML file ,.
,
,
,
,The examples below use the XML file ,.
,
,
,
,
,
,
,
,The examples below use the XML file ,.
,
,
,
,
,
,The examples below use the XML file ,.
,
,
",,,
XML DOM ,Clone Nodes,Copy a Node,Example,"The examples below use the XML file ,. ,
,
This example uses cloneNode() to copy a node and append it to the root node of the XML document,The , method creates a copy of a specified node.,The cloneNode() method has a parameter (true or false). This parameter indicates if the cloned node should include all attributes and child 
nodes of the original node.,The following code fragment copies the first <book> node and appends it to the root node of the document:,Example explained:",,,
XML DOM ,Add Nodes,"Add a Node - appendChild(),Insert a Node - insertBefore(),Add a New Attribute,Add Text to a Text Node - insertData()","Example,Example,Example,Example,Example","The examples below use the XML file ,. ,
This example uses appendChild() to add a child node to an existing node.,
This example uses insertBefore() to insert a node before a specified child node.,
This example uses the setAttribute() method to add a new attribute.,
This example uses insertData() to insert data into an existing text node.,The , method adds a child node to an existing node. ,The new node is added (appended) after any existing child nodes., Use insertBefore() if the position of the node is important.,This code fragment creates an element (<edition>), and adds it after the last child of the first <book> element:,Example explained:,This code fragment does the same as above, but the new element is added with a value:,Example explained:,The , method inserts a node before a specified child node.,This method is useful when the position of the added node is important:,Example explained:,If the second parameter of insertBefore() is null, the new node will be added 
after the last existing child node., and , will 
both append a new child node to x.,The , method sets the value of an attribute.,Example explained:, If the attribute already exists, the setAttribute() 
method will overwrite the existing value.,The , method inserts data into an existing 
text node.,The insertData() method has two parameters:,The following code fragment will add ""Easy"" to the text 
node of the first 
<title> 
element of the loaded XML:","offset - Where to begin inserting characters (starts at zero),string - The string to insert",,
XML DOM ,Create Nodes,"Create a New Element Node,Create a New Attribute Node,Create an Attribute Using setAttribute(),Create a Text Node,Create a CDATA Section Node,Create a Comment Node","Example,Example,Example,Example,Example,Example","The examples below use the XML file ,. ,
,
This example uses createElement() to create a new element node, and appendChild() to add it to a node.,
This example uses createAttribute() to create a new attribute node, and setAttributeNode() to insert it to an element.,
This example uses setAttribute() to create a new attribute for an element.,
This example uses createTextNode() to create a new text node, and appendChild() to add it to an element.,
This example uses createCDATAsection() to create a CDATA section node, and appendChild() to add it to an element.,
This example uses createComment() to create a comment node, and appendChild() to add it to an element.,The , method creates a new element node:,Example explained:,Loop through and add an element to all <book> elements:
,
,The , is used to create a new attribute node:,Example explained:,Loop through all <title> elements and add a new attribute node:
,Since the , method creates a new attribute if the attribute does 
not exist, it can be used to create a new attribute.,Example explained:,Loop through all <title> elements and add a new attribute:
,The , method creates a new text node:,Example explained:,Add an element node, with a text node, to all <book> elements:
,The , method creates a new CDATA section node.,Example explained:,Loop through, and add a CDATA section, to all <book> elements:
,
,The , method creates a new comment node.,Example explained:,Loop through, and add a comment node, to all <book> elements:
,
",,,
XML DOM ,Replace Nodes,"Replace an Element Node,Replace Data In a Text Node,Use the nodeValue Property Instead","Example,Example,Example","The replaceChild() method replaces a specified node.,The nodeValue property replaces text in a text node.,The examples below use the XML file ,. ,
,
This example uses replaceChild() to replace the first <book> node.,
This example uses the nodeValue property to replace data in a text node.,The replaceChild() method is used to replace a node.,The following code fragment replaces the first <book> element:,Example explained:,The replaceData() method is used to replace data in a 
text node.,The replaceData() method has three parameters:,Example explained:,It is easier to replace the data in a text node using the 
nodeValue property.,The following code fragment will replace the text 
node value in the first 
<title> 
element with ""Easy Italian"":,Example explained:,You can read more about changing node values in the ,.","offset - Where to begin replacing characters. Offset value starts at zero,length - How many characters to replace,string - The string to insert",,
XML DOM ,Remove Nodes,"Remove an Element Node,Remove Myself - Remove the Current Node,Remove a Text Node,Clear a Text Node,Remove an Attribute Node by Name,Remove Attribute Nodes by Object","Example,Example,Example,Example,Example,Example","The removeChild() method removes a specified node.,The removeAttribute() method removes a specified attribute.,The examples use the XML file ,. ,
This example uses removeChild() to remove the first <book> element.,
This example uses parentNode and removeChild() to remove the current <book> element.,
This example uses removeChild() to remove the text node from the first <title> element.,
This example uses the nodeValue() property to clear the text node of the first <title> element.,
This example uses removeAttribute() to remove the ""category"" attribute from the first <book> element.,
This example uses removeAttributeNode() to remove all attributes from all <book> elements.,The , method removes a specified node.,When a node is removed, all its child nodes are also removed.,This code will remove the first <book> element from the loaded xml:,Example explained:,The removeChild() method is the only way to remove a specified node.,When you have navigated to the node you want to remove, it is possible to 
remove that node using the parentNode property and the removeChild() method:,Example explained:,The , method can also be used to remove a text node:,Example explained:,It is not very common to use removeChild() just to remove the text from a 
node. The nodeValue property can be used instead. See next paragraph.,The , property can be used to change the value of a text 
node:,Example explained:,The ,) method removes an attribute node 
by its name.,Example: removeAttribute('category'),This code removes the ""category"" attribute 
in the first <book> element:,Example explained:,Loop through and remove the ""category"" attribute of all <book> elements:
,The ,) method removes an attribute node, 
using the node object as parameter.,Example: removeAttributeNode(x),This code removes all the attributes of all <book> elements:,Example explained:",,,
XML DOM ,Change Node Values,"Change the Value of an Element,Change the Value of a Text Node,Change the Value of an Attribute,Change an Attribute Using setAttribute(),Change an Attribute Using nodeValue","Example,Example,Example","The nodeValue property is used to change a node value.,The setAttribute() method is used to change an attribute value.,The examples below use the XML file ,. ,
,
This example uses the nodeValue property to change the text node of the first <title> 
element in ""books.xml"".,
This example uses the setAttribute() method to change the value of the ""category"" 
attribute of the first <book>.,
This example use the nodeValue property to change the value of the ""category"" 
attribute of the first <book>.,In the DOM, everything is a node. Element nodes do not have a text value.,The text value of an element node is stored in a child node. This node is called a text node.,The , property can be used to change ,. ,Suppose "","" has 
been loaded into xmlDoc.,This code changes the text node value of the first <title> element:,Example explained:,Loop through and change the text node of all <title> elements:
,
,In the DOM, attributes are nodes. Unlike element nodes, attribute nodes have 
text values.,The way to change the value of an attribute, is to change its text value.,This can be done using the setAttribute() method or setting the nodeValue 
property of the attribute node.,The , method ,.,If the attribute does not exist, a new attribute is created.,This code changes the category attribute of the <book> element:,Example explained:,Loop through all <title> elements and add a new attribute:
, If the attribute does not exist, a new attribute is created 
(with the name and value specified).,
,The , property is ,.,Changing the value property changes the value of the attribute.,Example explained:",,,
XML DOM ,Get Node Values,"Get the Value of an Element,The getElementsByTagName Method,The ChildNodes Property,The nodeValue Property,Complete Example,Get the Value of an Attribute,Get an Attribute Value - getAttribute(),Get an Attribute Value - getAttributeNode()","Example,Example,Example,Example","The nodeValue property is used to get the text value of a node.,The getAttribute() method returns the value of an attribute.,In the DOM, everything is a node. Element nodes do not have a text value.,The text value of an element node is stored in a child node. This node is called a text node.,The , method returns a ,, with the specified tag name, in the same order as they appear in the source document.,Suppose "","" has 
been loaded into xmlDoc.,This code retrieves the first <title> element:,The , property returns a ,.,The following code retrieves the text node of the first <title> element:,The , property returns the ,.,The following code retrieves the text value of the text node of the first <title> element:,Result in z: ""Everyday Italian"",Loop through all <title> elements:
,In the DOM, attributes are nodes. Unlike element nodes, attribute nodes have text values.,The way to get the value of an attribute, is to get its text value.,This can be done using the getAttribute() method or using the nodeValue property of the attribute node.,The , method returns an ,.,
The following code retrieves the text value of the ""lang"" attribute of the first 
<title> element:,Result in txt: ""en"",Loop through all <book> elements and get their ""category"" attributes:
,
,The , method returns an ,.,
The following code retrieves the text value of the ""lang"" attribute of the first 
<title> element:,Result in txt = ""en"",Loop through all <book> elements and get their ""category"" attributes:
",,,
XML DOM - ,Navigating Nodes,"Navigating DOM Nodes,DOM - Parent Node,Avoid Empty Text Nodes,Get the First Child Element,More Examples","Example,Example","Nodes can be navigated using node relationships.,Accessing nodes in the node tree via the relationship between nodes, is often 
called ""navigating nodes"". ,In the XML DOM, node relationships are defined as properties to the nodes:,The following image illustrates a part of the node tree and the 
relationship between nodes in ,:,All nodes have exactly one parent node. The following code navigates to the 
parent node of <book>: ,Example explained:,Firefox, and some other browsers, will treat empty white-spaces or new lines 
as text nodes, Internet Explorer will not.,This causes a problem when using the properties: firstChild, lastChild, 
nextSibling, previousSibling. ,To avoid navigating to empty text nodes (spaces and new-line characters 
between element nodes), we use a function that checks the node type:,The function above allows you to use get_nextSibling(,) instead of 
the property ,.nextSibling.,Code explained:,Element nodes are type 1. If the sibling node is not an 
element node, it moves to the next nodes until an element node 
is found. This way, the result will be the same in both Internet Explorer and 
Firefox.,The following code displays the first element node of the first <book>:,Example explained:,
This example uses the lastChild() method and a custom function to get the last child node of a node,
This example uses the nextSibling() method and a custom function to get the next sibling node of a node,
This example uses the previousSibling() method and a custom function to get the previous sibling node of a node","parentNode,childNodes,firstChild,lastChild,nextSibling,previousSibling","
 <!DOCTYPE html>,<html>,<body>,<p id=""demo""></p>,<script>,
 var xhttp = new XMLHttpRequest();,xhttp.onreadystatechange = function() {,    if (this.readyState == 4 && this.status == 200) {,        myFunction(this);,    },};,xhttp.open(""GET"", 
 ""books.xml"", true);,xhttp.send();,function myFunction(xml) {,    
 var xmlDoc = xml.responseXML;,    
 var x = get_firstChild(xmlDoc.getElementsByTagName(""book"")[0]);,    
 document.getElementById(""demo"").innerHTML = x.nodeName;,},//check if 
 the first node is an element node,function get_firstChild(n) {,    
 var y = n.firstChild;,    while (y.nodeType != 1) {,        
 y = y.nextSibling;,    },    return y;,},
 </script>,</body>,</html>
",
XML DOM ,Traverse Node Tree,"Traversing the Node Tree,Browser Differences in DOM Parsing,DOM - White Spaces and New Lines,PCDATA - Parsed Character Data,CDATA - (Unparsed) Character Data","Example,Example","Traversing means looping through or traveling across the node tree.,Often you want to loop an XML document, for example: when you want to extract the value of each element.,This is called ""Traversing the node tree"",The example below loops through all child nodes of <book>, and displays their names and values:,Example explained:,All modern browsers support the W3C DOM specification.,However, there are some differences 
between browsers. One important difference is:,XML often contains new line, or white space characters, between nodes. This 
is often the case when the document is edited by a simple editor like Notepad. ,The following example (edited by Notepad) contains CR/LF (new line) between 
each line and two spaces in front of each child node: ,Internet Explorer 9 and earlier do NOT treat empty white-spaces, or new lines as text 
nodes, while other browsers do.,The following example will output the number of child nodes the root element 
(of ,) has. IE9 and earlier will output 4 child nodes, while IE10 and 
later versions, and other browsers will output 9 child nodes:,XML parsers normally parse all the text in an XML document.,When an XML element is parsed, the text between the XML tags is also parsed:,The parser does this because XML elements can contain other elements, as in this example,
where the <name> element contains two other elements (first and last):,and the parser will break it up into sub-elements like this:,Parsed Character Data (PCDATA) is a term used about text data that will be parsed by the XML parser. ,The term CDATA is used about text data that should not be parsed by the XML parser. ,Characters like ""<"" and ""&"" are illegal in XML elements.,""<"" will generate an error because the parser interprets it as the start of a new element.,""&"" will generate an error because the parser interprets it as the start of an character entity.,Some text, like JavaScript code, contains a lot of ""<"" or ""&"" characters.
To avoid errors script code can be defined as CDATA.,Everything inside a CDATA section is ignored by the parser.,A CDATA section starts with "","" and ends with "","":,In the example above, everything inside the CDATA section is ignored by the parser.,A CDATA section cannot contain the string ""]]>"". Nested CDATA sections are not allowed.,The ""]]>"" that marks the end of the CDATA section cannot contain spaces or line breaks. ",The way they handle white-spaces and new lines,"
 <!DOCTYPE html>,<html>,<body>,<p id=""demo""></p>,<script>,
 var x, i ,xmlDoc;,var txt = """";,var text = ""<book>"" + ,
 ""<title>Everyday Italian</title>"" +,""<author>Giada De Laurentiis</author>"" +,
 ""<year>2005</year>"" +,""</book>"";,parser = new DOMParser();,xmlDoc 
 = parser.parseFromString(text,""text/xml"");,// documentElement always 
 represents the root node,x = xmlDoc.documentElement.childNodes;,for (i = 
 0; i < x.length ;i++) {,    txt += x[i].nodeName + "": "" + 
 x[i].childNodes[0].nodeValue + ""<br>"";,},
 document.getElementById(""demo"").innerHTML = txt;,</script>,</body>,
 </html>
,
<book>,
   
  <title>Everyday Italian</title>,
   
  <author>Giada De Laurentiis</author>,
   
  <year>2005</year>,
   
  <price>30.00</price>,
</book>
,
<message>This text is also parsed</message>,
<name><first>Bill</first><last>Gates</last></name>,
<name>,
    
   <first>Bill</first>,
    
   <last>Gates</last>,
</name>",
XML DOM ,Node List,"DOM Node List,Node List Length,DOM Attribute List (Named Node Map)","Example,Example,Example","A list of nodes is returned by the getElementsByTagName() method and the childNodes property.,The examples below use the XML file
,. ,
This example uses the getElementsByTagName() method to get the text from the 
first <title> element in ""books.xml"".,
This example uses node list and the length property to loop through all <title> 
elements in ""books.xml"",
This example uses a attribute list to get attribute from the first <book> 
element in ""books.xml"".,When using properties or methods like childNodes or getElementsByTagName(), a node list object is returned.,A node list object represents a list of nodes, in the same order as in the XML.,Nodes in the node list are accessed with index numbers starting from 0.,The following image represents a node list of the <title> elements in "","":,Suppose ""books.xml"" is loaded into the variable xmlDoc.,This code fragment returns a node list of title elements in ""books.xml"":,After the execution of the statement above, x is a node list object.,The following code fragment returns the text from the first <title> element in the node list (x):,After the execution of the statement above, txt = ""Everyday Italian"".,A node list object keeps itself up-to-date. If an element is 
deleted or added, the list is automatically updated.,The length property of a node list is the number of nodes in the list.,This code fragment returns the number of <title> elements in ""books.xml"":,After the execution of the statement above, the value of x will be 4.,The length of the node list can be used to loop through all the elements in the list.,This code fragment uses the length property to loop through the list of <title> elements:,Example explained:,The attributes property of an element node returns a list of attribute nodes.,This is called a named node map, and is similar to a node list, except for 
some differences in methods and properties.,An attribute list keeps itself up-to-date. If an attribute is 
deleted or added, the list is automatically updated.,This code fragment returns a list of attribute nodes from the first <book> element in ""books.xml"":,After the execution of the code above, x.length = is the number of attributes 
and x.getNamedItem() can be used to return an attribute node.,This code fragment gets the value of the ""category"" 
attribute, and the number of attributes, of a book:,Example explained:",,,
XML DOM ,Node Information,"Node Properties,The nodeName Property,The nodeValue Property,Get the Value of an Element,Change the Value of an Element,The nodeType Property","Example,Example","The nodeName, nodeValue, and nodeType properties contain information about nodes.,The examples below use the XML file
,. ,
This example uses the nodeName property to get the node name of the root element in ""books.xml"".,
This example uses the nodeValue property to get the text of the first <title> 
element in ""books.xml"".,
This example uses the nodeValue property to change the text of the first <title> 
element in ""books.xml"".,
This example uses the nodeName and nodeType property to get node name and type of the root element in 
""books.xml"".,In the XML DOM, each node is an ,.,Objects have methods and properties, that can be accessed and manipulated by JavaScript. ,Three important node properties are:,The nodeName property specifies the name of a node.,The nodeValue property specifies the value of a node.,
The following code retrieves the text node value of the first <title> element:,Result:  txt = ""Everyday Italian"",Example explained:,
The following code changes the text node value of the first <title> element:,Example explained:,The nodeType property specifies the type of node.,nodeType is read only.,The most important node types are:","nodeName,nodeValue,nodeType,nodeName is read-only,nodeName of an element node is the same as the tag name,nodeName of an attribute 
node is the attribute name,nodeName of a text node is always #text,nodeName of the document node is always #document,nodeValue for element nodes is undefined,nodeValue for text nodes is the text itself,nodeValue for attribute nodes is the attribute value ",,
XML DOM - ,Accessing Nodes,"Accessing Nodes,The getElementsByTagName() Method,DOM Node List,DOM Node List Length,Node Types,Traversing Nodes,Navigating Node Relationships","Example,Example,Example","With the DOM, you can access every node in an XML document.,The examples below use the XML file ,.,
Use the getElementsByTagName() method to get the third <title> element in ""books.xml"",
Use the length property to loop through all <title> elements in ""books.xml"",
Use the nodeType property to get node type of the root element in ""books.xml"".,
Use the nodeType property to only process element nodes in ""books.xml"".,
Use the nodeType property and the nextSibling property to process element nodes in ""books.xml"".,You can access a node in three ways:,1. By using the getElementsByTagName() method,2. By looping through (traversing) the nodes tree.,3. By navigating the node tree, using the node relationships.,getElementsByTagName() returns all elements with a specified tag name.,The following example returns all <title> elements under the x element:,Note that the example above only returns <title> elements under the x node. To return all <title> elements in the XML document use: ,where xmlDoc is the document itself (document node).,The getElementsByTagName() method returns a node list. A node list is an array of nodes.,The <title> elements in x can be accessed by index number. To access the third <title> you can write::, The index starts at 0.,You will learn more about node lists in a later chapter of this tutorial.,The length property defines the length of a node list (the number of nodes).,You can loop through a node list by using the length property:,The , property of the XML document is the root node.,The , property of a node is the name of the node.,The , property of a node is the type of the node.,You will learn more about the node properties in the next chapter of this tutorial.,The following code loops through the child nodes, that are also element 
nodes, of the root node:,Example explained:,The following code navigates the node tree using the node relationships:,Example explained:",,,
XML ,on the Server,"Storing XML Files on the Server,Generating XML with PHP,Generating XML with ASP,Generating XML From a Database,Transforming XML with XSLT on the Server",,"XML files are plain text files just like HTML files. ,XML can easily be stored and generated by a standard web server.,XML files can be stored on an Internet server exactly the same way as HTML files.,Start Windows Notepad and write the following lines:,Save the file on your web server with a proper name like ""note.xml"".,XML can be generated on a server without any installed XML software.,To generate an XML response from the server using PHP, use following code:,Note that the content type of the response header must be set to ""text/xml"".,.,If you want to study PHP, you will find our PHP tutorial on our ,.,To generate an XML response from the server - simply write the following code and save it as an ASP file on the web server:,Note that the content type of the response must be set to ""text/xml"".,.,If you want to study ASP, you will find our ASP tutorial on our ,.,XML can be generated from a database without any installed XML software.,To generate an XML database response from the server, simply write the following code and save it as an ASP file on the web server:,.,The example above uses ASP with ADO.,If you want to study ASP and ADO, you will find the tutorials on our ,.,This ASP transforms an XML file to XHTML on the server:,Example explained,.","The first block of code creates an instance of the Microsoft XML parser (XMLDOM), and loads the XML file into memory.,The second block of code creates another instance of the parser and loads the XSL file into memory.,The last line of code transforms the XML document using the XSL document, and sends the result as XHTML to your browser. Nice!","
<?xml version=""1.0"" encoding=""UTF-8""?>,
<note>,
   
  <from>Jani</from>,
   
  <to>Tove</to>,
   
  <message>Remember me this weekend</message>,
</note>,
",
XML ,Schema,"XML Schema,XML Schemas are More Powerful than DTD,Why Use an XML Schema?,XML Schemas Support Data Types,XML Schemas use XML Syntax",,"An XML Schema describes the structure of an XML document, just 
like a DTD.,An XML document with correct syntax is called ""Well Formed"".,An XML document validated against an XML Schema is both ""Well 
Formed"" and ""Valid"".,XML Schema is an XML-based alternative to DTD:,The Schema above is interpreted like this:,With XML Schema, your XML files can carry a description of its own format.,With XML Schema, independent groups of people can agree on a standard for interchanging data.,With XML Schema, you can verify data.,One of the greatest strengths of XML Schemas is the support for data types:,Another great strength about XML Schemas is that they are written in XML:,If you want to study XML Schema, please read our
,.","<xs:element name=""note""> defines the element called ""note"",<xs:complexType> the ""note"" element is a complex type,<xs:sequence> the complex type is a sequence of elements,<xs:element name=""to"" type=""xs:string""> the element ""to"" is of type string (text),<xs:element name=""from"" type=""xs:string""> the element ""from"" is of type string,<xs:element name=""heading"" type=""xs:string""> the element ""heading"" is of type string,<xs:element name=""body"" type=""xs:string""> the element ""body"" is of type string,XML Schemas are written in XML,XML Schemas are extensible to additions,XML Schemas support data types,XML Schemas support namespaces,It is easier to describe document content,It is easier to define restrictions on data,It is easier to validate the correctness of data,It is easier to convert data between different data types,You don't have to learn a new language,You can use your XML editor to edit your Schema files,You can use your XML parser to parse your Schema files,You can manipulate your Schemas with the XML DOM,You can transform your Schemas with XSLT","
<xs:element name=""note"">,
<xs:complexType>,
  <xs:sequence>,
    <xs:element name=""to"" type=""xs:string""/>,
    <xs:element name=""from"" type=""xs:string""/>,
    <xs:element name=""heading"" type=""xs:string""/>,
    <xs:element name=""body"" type=""xs:string""/>,
  </xs:sequence>,
</xs:complexType>,
</xs:element>",
XML ,DTD,"What is a DTD?,Valid XML Documents,XML DTD,Using DTD for Entity Declaration,When to Use a DTD?,When NOT to Use a DTD?","Note.dtd:,Example","An XML document with correct syntax is called ""Well Formed"".,An XML document validated against a DTD is both ""Well Formed"" 
and ""Valid"".,DTD stands for Document Type Definition.,A DTD defines the structure and the legal elements and attributes of an XML document.,A ""Valid"" XML document is ""Well Formed"", as well as it conforms to the rules of a 
DTD:,The DOCTYPE declaration above contains a reference to a DTD file. The content of the 
DTD file is shown and explained below.,The purpose of a DTD is to define the structure and the legal elements and 
attributes of an XML document:,The DTD above is interpreted like this:,A DOCTYPE declaration can also be used to define special characters or strings, used in the document:,With a DTD, independent groups of people can agree to use a standard DTD for 
interchanging data.,With a DTD, you can verify that the data you receive from the outside world is valid.,You can also use a DTD to verify your own data.,If you want to study DTD, please read our ,.,XML does not require a DTD.,When you are experimenting with XML, or when you are working with small XML 
files, creating DTDs may be a waste of time.,If you develop applications, 
wait until the specification is stable before you add a DTD. 
Otherwise, your software might stop working because of validation errors.","!DOCTYPE note -  Defines that the root element of the document is note,!ELEMENT note  - Defines that the note element must contain the elements: ""to, from, heading, body"",!ELEMENT to  - Defines the to element to be of type ""#PCDATA"",!ELEMENT from  - Defines the from element to be of type ""#PCDATA"",!ELEMENT heading  - Defines the heading element to be of type ""#PCDATA"",!ELEMENT body - Defines the body element to be of type ""#PCDATA""","
<?xml version=""1.0"" encoding=""UTF-8""?>,
<!DOCTYPE note SYSTEM ""Note.dtd"">,
<note>,
<to>Tove</to>,
<from>Jani</from>,
<heading>Reminder</heading>,
<body>Don't forget me this weekend!</body>,
</note>",
XML ,Validator,"Well Formed XML Documents,XML Errors Will Stop You,Syntax-Check Your XML,Valid XML Documents",,"Use our XML validator to syntax-check your XML.,An XML document with correct syntax is called ""Well Formed"".,The syntax rules were described in the previous chapters:,Errors in XML documents will stop your XML applications.,The W3C XML specification states that a program should stop processing an XML document if it finds an error.
The reason is that XML software should be small, fast, and compatible.,HTML browsers are allowed to display HTML documents with errors (like missing end tags). ,To help you syntax-check your XML, we have created an XML validator.,Try to syntax-check correct XML : ,Try to syntax-check incorrect XML : ,Try to syntax-check your own XML : ,A ""well formed"" XML document is not the same as a ""valid"" XML document.,A ""valid"" XML document must be well formed. In addition, it must conform to a  
document type definition.,There are two different document type definitions that can be used with XML:,A document type definition defines the rules and the legal elements and attributes 
for an XML document.","XML documents must have a root element,XML elements must have a closing tag,XML tags are case sensitive,XML elements must be properly nested,XML attribute values must be quoted,DTD - The original Document Type Definition,XML Schema - An XML-based alternative to DTD","
<?xml version=""1.0"" encoding=""UTF-8,?>,
<note>,
<to>Tove</to>,
<from>Jani</from>,
<heading>Reminder</heading>,
<body>Don't forget me this weekend!</body>,
</note>",
XML,", XLink and XPointer","XLink Browser Support,XLink Syntax,XLink Example,XLink - Going Further,XLink Attribute Reference,XPointer,XPointer Browser Support,XPointer Example",,"XLink is used to create hyperlinks in XML documents.,There is no browser support for XLink in XML documents.,However, all major 
browsers support ,.,In HTML, the <a> element 
defines a hyperlink. However, this is not how it works in XML. In XML documents, you can use 
whatever element names you want - therefore it is impossible for browsers to predict 
what link elements will be called in XML documents.,Below is a simple example of how to use XLink to create links in an XML document:,To get access to the XLink features we must declare the XLink namespace. The XLink namespace is: ""http://www.w3.org/1999/xlink"".,The xlink:type and the xlink:href attributes in the <homepage> elements come from the 
XLink namespace.,The xlink:type=""simple"" creates a simple ""HTML-like"" link (means ""click here 
to go there"").,The xlink:href attribute specifies the URL to link to.,The following XML document contains XLink features:,In the example above we have demonstrated simple XLinks. XLink is getting 
more 
interesting when accessing remote locations as resources, instead of 
standalone pages.,If we set the value of the xlink:show 
attribute to ""embed"", the linked resource should be processed inline 
within the page. When you consider that this could be 
another XML document you could, for example, build a hierarchy of XML documents.,You can also specify WHEN the resource should appear, with 
the xlink:actuate attribute.,There is no browser support for XPointer. But XPointer is used in other 
XML languages.,In this example, we will use XPointer in conjunction with XLink to point to a specific part of another document.,We will start by looking at the target XML document (the document we are 
linking to):,Note that the XML document above uses id attributes on each element!,So, instead of linking to the entire document (as with XLink), XPointer allows you to link to specific parts of the document. To link to a specific part of a 
page, add a number sign (#) and an XPointer expression after the URL in the xlink:href 
attribute, like this: xlink:href=""https://dog.com/dogbreeds.xml#xpointer(id('Rottweiler'))"". The expression refers to the element in the target document, with the id value of ""Rottweiler"".,XPointer also allows a shorthand method for linking to an element with an id. You can use the 
value of the id directly, like this: xlink:href=""https://dog.com/dogbreeds.xml#Rottweiler"".,The following XML document contains links to more information of the dog breed for each of 
my dogs:","XLink is used to create hyperlinks within XML documents,Any element in an XML document can behave as a link,With XLink, the links can be defined outside the linked files,XLink is a W3C Recommendation,The XLink namespace is declared at the top of the  
document (xmlns:xlink=""http://www.w3.org/1999/xlink""),The xlink:type=""simple"" creates a simple ""HTML-like"" link,The xlink:href attribute specifies the URL to link to (in this case - an image),The xlink:show=""new"" specifies that the link should open in a new window,onLoad - the resource should be loaded and shown when the document loads,onRequest - the resource is not read or shown before the link is clicked,XPointer allows links to point to specific parts of an XML document,XPointer uses XPath expressions to navigate in the XML document,XPointer is a W3C Recommendation","
<?xml version=""1.0"" encoding=""UTF-8""?>,
<homepages xmlns:xlink=""http://www.w3.org/1999/xlink"">, 
  <homepage xlink:type=""simple""
  xlink:href=""https://www.w3schools.com"">Visit W3Schools</homepage>, 
  <homepage xlink:type=""simple""
  xlink:href=""http://www.w3.org"">Visit W3C</homepage>,</homepages>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore xmlns:xlink=""http://www.w3.org/1999/xlink"">,
<book title=""Harry Potter"">,
   
  <description,
   
  xlink:type=""simple"",
   
  xlink:href=""/images/HPotter.gif"",
   
  xlink:show=""new"">,
   
  As his fifth year at Hogwarts School of Witchcraft and,
   
  Wizardry approaches, 15-year-old Harry Potter is.......,
   
  </description>,
</book>,
<book title=""XQuery Kick Start"">,
   
  <description,
   
  xlink:type=""simple"",
   
  xlink:href=""/images/XQuery.gif"",
   
  xlink:show=""new"">,
   
  XQuery Kick Start delivers a concise introduction,
   
  to the XQuery standard.......,
   
  </description>,
</book>,
</bookstore>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<dogbreeds>,
<dog breed=""Rottweiler"" id=""Rottweiler"">,
   
  <picture url=""https://dog.com/rottweiler.gif"" />,
   
  <history>The Rottweiler's ancestors were probably Roman,
   
  drover dogs.....</history>,
   
  <temperament>Confident, bold, alert and imposing, the Rottweiler,
   
  is a popular choice for its ability to protect....</temperament>,
</dog>,
<dog breed=""FCRetriever"" id=""FCRetriever"">,
   
  <picture url=""https://dog.com/fcretriever.gif"" />,
   
  <history>One of the earliest uses of retrieving dogs was to,
   
  help fishermen retrieve fish from the water....</history>,
   
  <temperament>The flat-coated retriever is a sweet, exuberant,,
   
  lively dog that loves to play and retrieve....</temperament>,
</dog>,
</dogbreeds>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<mydogs xmlns:xlink=""http://www.w3.org/1999/xlink"">,
<mydog>,
   
  <description>,
   
  Anton is my favorite dog. He has won a lot of.....,
   
  </description>, 
<fact xlink:type=""simple"" xlink:href=""https://dog.com/dogbreeds.xml#Rottweiler"">,  Fact about Rottweiler ,  </fact>,
</mydog>,
<mydog>,
   
  <description>,
   
  Pluto is the sweetest dog on earth......,
   
  </description>,
 
<fact xlink:type=""simple"" xlink:href=""https://dog.com/dogbreeds.xml#FCRetriever"">,  Fact about flat-coated Retriever ,  </fact>,
</mydog>,
</mydogs>
",
XML and XQuery,,"What is XQuery?,XQuery is About Querying XML,XQuery and XPath,XQuery - Examples of Use,XQuery is a W3C Recommendation,XQuery Tutorial",XQuery Example,"XQuery is a language for finding and extracting elements and attributes from XML 
documents.,Here is an example of what XQuery could solve:,""Select all CD records with a price less than $10 from the CD collection 
stored in cd_catalog.xml"",XQuery 1.0 and XPath 2.0 share the same data model and support the same functions 
and operators. If you have already studied XPath you will have no problems with 
understanding XQuery.,XQuery can be used to:,XQuery is compatible with several W3C standards, such as XML, Namespaces, 
XSLT, XPath, and XML Schema.,XQuery 1.0 became a W3C Recommendation in 2007.","XQuery is , language for querying XML data,XQuery for XML is like SQL for databases,XQuery is built on XPath expressions,XQuery is supported by all major databases,XQuery is a W3C Recommendation,Extract information to use in a Web Service,Generate summary reports,Transform XML data to XHTML,Search Web documents for relevant information",,
XML ,and XSLT,"Displaying XML with XSLT,XSLT Example,XSLT Tutorial",Example XSLT Stylesheet:,"With XSLT you can transform an XML document into HTML.,XSLT (eXtensible Stylesheet Language Transformations) is the recommended style sheet language 
for XML.,XSLT is far more sophisticated than CSS. With XSLT you can add/remove 
elements and attributes to or from the output file. You can also rearrange and 
sort elements, perform tests and make decisions about which elements to hide and 
display, and a lot more.,XSLT uses XPath to find information in an XML document.,We will use the following XML document:,Use XSLT to transform XML into HTML, before it is displayed in a browser:,If you want to learn more about XSLT, go to our ,.",,"
<?xml version=""1.0"" encoding=""UTF-8""?>,<breakfast_menu>,<food>,
<name>Belgian Waffles</name>,<price>$5.95</price>,<description>Two of 
our famous Belgian Waffles with plenty of real maple syrup</description>,
<calories>650</calories>,</food>,<food>,<name>Strawberry 
Belgian Waffles</name>,<price>$7.95</price>,<description>Light Belgian 
waffles covered with strawberries and whipped cream</description>,
<calories>900</calories>,</food>,<food>,<name>Berry-Berry 
Belgian Waffles</name>,<price>$8.95</price>,<description>Light Belgian 
waffles covered with an assortment of fresh berries and whipped 
cream</description>,<calories>900</calories>,</food>,<food>,
<name>French Toast</name>,<price>$4.50</price>,<description>Thick 
slices made from our homemade sourdough bread</description>,
<calories>600</calories>,</food>,<food>,<name>Homestyle 
Breakfast</name>,<price>$6.95</price>,<description>Two eggs, bacon or 
sausage, toast, and our ever-popular hash browns</description>,
<calories>950</calories>,</food>,</breakfast_menu>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,<html xsl:version=""1.0"" 
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,<body 
style=""font-family:Arial;font-size:12pt;background-color:#EEEEEE"">,<xsl:for-each 
select=""breakfast_menu/food"">,  <div 
style=""background-color:teal;color:white;padding:4px"">,    
<span style=""font-weight:bold""><xsl:value-of select=""name""/> - </span>,    
<xsl:value-of select=""price""/>,    </div>,  <div 
style=""margin-left:20px;margin-bottom:1em;font-size:10pt"">,    
<p>,    <xsl:value-of select=""description""/>,    
<span style=""font-style:italic""> (<xsl:value-of select=""calories""/> calories 
per serving)</span>,    </p>,  </div>,</xsl:for-each>,
</body>,</html>",
XML ,and XPath,"XPath Path Expressions,XPath is Used in XSLT,XPath Example,XPath Tutorial",,"XPath uses path expressions to select nodes or node-sets in an XML document. These path 
expressions look very much like the expressions you see when you work with a traditional computer file system.,XPath expressions can be used in JavaScript, Java, XML Schema, PHP, Python, 
C and C++, and lots of other languages.,XPath is a major element in the XSLT standard.,With XPath knowledge you will be able to take great advantage of XSL.,We will use the following XML document:,In the table below we have listed some XPath expressions and the result of the expressions:","XPath is a syntax for defining parts of an XML document,XPath uses path expressions to navigate in XML documents,XPath contains a library of standard functions,XPath is a major element in XSLT and in XQuery,XPath is a W3C recommendation","
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore>,
<book category=""cooking"">,
 
<title lang=""en"">Everyday Italian</title>,
 
<author>Giada De Laurentiis</author>,
 
<year>2005</year>,
 
<price>30.00</price>,
</book>,
<book category=""children"">,
 
<title lang=""en"">Harry Potter</title>,
 
<author>J K. Rowling</author>,
 
<year>2005</year>,
 
<price>29.99</price>,
</book>,
<book category=""web"">,
 
<title lang=""en"">XQuery Kick Start</title>,
 
<author>James McGovern</author>,
 
<author>Per Bothner</author>,
 
<author>Kurt Cagle</author>,
 
<author>James Linn</author>,
 
<author>Vaidyanathan Nagarajan</author>,
 
<year>2003</year>,
 
<price>49.99</price>,
</book>,
<book category=""web"">,
 
<title lang=""en"">Learning XML</title>,
 
<author>Erik T. Ray</author>,
 
<year>2003</year>,
 
<price>39.95</price>,
</book>,
</bookstore>",
XML DOM,,"What is the DOM?,The HTML DOM,The XML DOM","Example,Books.xml,Example,Example","The DOM defines a standard for accessing and manipulating documents:,The HTML DOM defines a standard way for accessing and manipulating HTML documents. 
It presents an HTML document as a tree-structure.,The XML DOM defines a standard way for accessing and manipulating XML documents. 
It presents an XML document as a tree-structure.,All HTML elements can be accessed through the HTML DOM.,This example changes the value of an HTML element with id=""demo"":,All XML elements can be accessed through the XML DOM.,This code retrieves the text value of the first <title> element in an 
XML document:,This example loads a text string into an XML DOM object, and  
extracts the info from it with JavaScript:",,"
<h1 id=""demo"">This is a Heading</h1>,
 <button type=""button"",onclick=""document.getElementById('demo').innerHTML = 
 'Hello World!'"">Click Me!,</button>
,
<?xml version=""1.0"" encoding=""UTF-8""?>,
<bookstore>,
  <book category=""cooking"">,
    <title lang=""en"">Everyday 
Italian</title>,    <author>Giada De Laurentiis</author>,    
<year>2005</year>,    <price>30.00</price>,  </book>,
,  <book category=""children"">,    <title lang=""en"">Harry 
Potter</title>,    <author>J K. Rowling</author>,    
<year>2005</year>,    <price>29.99</price>,  </book>,</bookstore>
,
 <html>,<body>,<p id=""demo""></p>,<script>,var text, parser, 
 xmlDoc;,text = ""<bookstore><book>"" +,""<title>Everyday 
 Italian</title>"" +,""<author>Giada De Laurentiis</author>"" +,
 ""<year>2005</year>"" +,""</book></bookstore>"";,parser = new DOMParser();,
 xmlDoc = parser.parseFromString(text,""text/xml"");,
 document.getElementById(""demo"").innerHTML =,;,
 </script>,</body>,</html>
",
XML Parser,,"XML Parser,Parsing a Text String,Example Explained,Old Versions of Internet Explorer,The XMLHttpRequest Object","Example,Example,Example","All major browsers have a built-in XML parser to access and manipulate XML.,The , defines the properties and methods for accessing 
and editing XML.,However, before an XML document can be accessed, it must be 
loaded into an XML DOM object.,All modern browsers have a built-in XML parser that can convert text into an XML DOM object.,This example parses a text string into an XML DOM object, and  
extracts the info from it with JavaScript:,A text string is defined:,An XML DOM parser is created:,The parser creates a new XML DOM object using the text string:,Old versions of Internet Explorer (IE5, IE6, IE7, IE8) do not support the DOMParser object.,To handle older versions of Internet Explorer,  
check if the browser supports the DOMParser object, or else create an ActiveXObject:,The , has a built in XML 
Parser.,The ,property returns the response as a string.,The , property returns the response as an XML DOM object.,If you want to use the response as an XML DOM object, you can use the responseXML 
property.",,"
<html>,
<body>,
<p id=""demo""></p>,
<script>,
var text, parser, xmlDoc;,
text = ""<bookstore><book>"" +,
""<title>Everyday Italian</title>"" +,
""<author>Giada De Laurentiis</author>"" +,
""<year>2005</year>"" +,
""</book></bookstore>"";,
parser = new DOMParser();,
xmlDoc = parser.parseFromString(text,""text/xml"");,
document.getElementById(""demo"").innerHTML =,
xmlDoc.getElementsByTagName(""title"")[0].childNodes[0].nodeValue;,
</script>,</body>,</html>
",
XML HttpRequest,,"The XMLHttpRequest Object,XMLHttpRequest Example,Sending an XMLHttpRequest,Example Explained,Old Versions of Internet Explorer (IE5 and IE6)","Example,Example,Example","All modern browsers have a built-in XMLHttpRequest object to 
request data from a server. ,The XMLHttpRequest object can be used to request data from a web server.,The XMLHttpRequest object is ,, because you can:,When you type a character in the input field below, an XMLHttpRequest is sent to the server,
and some name suggestions are returned 
(from the server):,A common JavaScript syntax for using the XMLHttpRequest object looks much like this:,The first line in the example above creates an , 
object:,The , property specifies a function to be executed 
every time the status of the XMLHttpRequest object changes:,When , property is 4 and the , 
property is 200, the response is ready:,The , property returns the server response as a 
text string.,The text string can be used to update a web page:,Old versions of Internet Explorer (IE5 and IE6) do not support the 
XMLHttpRequest object.,To handle IE5 and IE6,  
check if the browser supports the XMLHttpRequest object, or else create an ActiveXObject:","Update a web page without reloading the page,Request data from a server - after the page has loaded ,Receive data from a server  - after the page has loaded,Send data to a server - in the background",,
Displaying ,XML,"Viewing XML Files,Viewing an Invalid XML File,Other XML Examples,Why Does XML Display Like This?",,"Raw XML files can be viewed in all major browsers.,Don't expect XML files to be displayed as HTML pages.,Look at the XML file above in your browser: ,Most browsers will display an XML document with color-coded elements.,Often a plus (+) or minus sign (-) to the left
of the elements can be clicked to expand or collapse the element structure.,To view raw XML source, try to select ""View Page Source"" or ""View Source"" from the browser menu., In Safari 5 (and earlier), only the element text will be displayed. To view the raw XML, you must right click the page and select ""View Source"".,If an erroneous XML file is opened, some browsers will report the error, and some 
will display it, or display it incorrectly.,Try to open the following XML file:
, ,Viewing some XML documents will help you get the XML feeling:,
This is a breakfast food menu from a restaurant, stored as XML.
,
This is a CD collection, stored as XML.
,
This is a plant catalog from a plant shop, stored as XML.
,XML documents do not carry information about how to display the data.,Since XML tags are ""invented"" by the author of the XML document, browsers do not know if a tag like <table> describes an HTML table or a dining table.,Without any information about how to display the data, the browsers can just display the XML document as it is.",,,
XML ,Namespaces,"Name Conflicts,Solving the Name Conflict Using a Prefix,XML Namespaces - The xmlns Attribute,Uniform Resource Identifier (URI),Default Namespaces,Namespaces in Real Use",,"XML Namespaces provide a method to avoid element name conflicts.,In XML, element names are defined by the developer. This often results in a conflict when trying to mix XML documents from different XML applications.,This XML carries HTML table information:,This XML carries information about a table (a piece of furniture):,If these XML fragments were added together, there would be a name conflict. Both contain a <table> element, but the elements have different content and meaning.,A user or an XML application will not know how to handle these differences.,Name conflicts in XML can easily be avoided using a name prefix.,This XML carries information about an HTML table, and a piece of furniture:,In the example above, there will be no conflict because the two <table> elements have different names.,When using prefixes in XML, a , for the prefix must be defined.,The namespace can be defined by an , attribute in the start tag of an element.,The namespace declaration has the following syntax. xmlns:,="","".,In the example above:,The xmlns attribute in the first <table> element gives the h: prefix a qualified namespace.,The xmlns attribute in the second <table> element gives the f: prefix a qualified namespace.,When a namespace is defined for an element, all child elements with the same prefix are associated with the same namespace.,Namespaces can also be declared in the XML root element:, The namespace URI is not used by the parser to look up information.,The purpose of using an URI is to give the namespace a unique name.,However, companies often use the namespace as a pointer to a
web page containing namespace information.,A , (URI) is a string of characters which identifies an Internet Resource.,The most common URI is the , (URL) which identifies an Internet domain address. Another, not so common type of URI is the , (URN).,Defining a default namespace for an element saves us from using prefixes in all the child elements. It has the following syntax:,This XML carries HTML table information:,This XML carries information about a piece of furniture:,XSLT is a language that can be used to transform XML documents into other formats.,The XML document below, is a document used to transform XML into HTML.,The namespace ""http://www.w3.org/1999/XSL/Transform"" identifies XSLT 
elements inside an HTML document:,If you want to learn more about XSLT, please read our
,.",,"
<table>,
    
   <tr>,
      
   <td>Apples</td>,
      
   <td>Bananas</td>,
    
   </tr>,
</table>,
<table>,
    
   <name>African Coffee Table</name>,
    
   <width>80</width>,
    
   <length>120</length>,
</table>,
<h:table>,
    
   <h:tr>,
      
   <h:td>Apples</h:td>,
      
   <h:td>Bananas</h:td>,
    
   </h:tr>,
</h:table>,
<f:table>,
  <f:name>African Coffee Table</f:name>,
  <f:width>80</f:width>,
  <f:length>120</f:length>,
</f:table>
,
<root>,
<h:table xmlns:h=""http://www.w3.org/TR/html4/"">,
  <h:tr>,
    <h:td>Apples</h:td>,
    <h:td>Bananas</h:td>,
  </h:tr>,
</h:table>,
<f:table xmlns:f=""https://www.w3schools.com/furniture"">,
  <f:name>African Coffee Table</f:name>,
  <f:width>80</f:width>,
  <f:length>120</f:length>,
</f:table>,
</root>
,
<root xmlns:h=""http://www.w3.org/TR/html4/"",
xmlns:f=""https://www.w3schools.com/furniture"">,
<h:table>,
  <h:tr>,
    <h:td>Apples</h:td>,
    <h:td>Bananas</h:td>,
  </h:tr>,
</h:table>,
<f:table>,
  <f:name>African Coffee Table</f:name>,
  <f:width>80</f:width>,
  <f:length>120</f:length>,
</f:table>,
</root>
,
xmlns="",""
,
<table xmlns=""http://www.w3.org/TR/html4/"">,
 
<tr>,
   
<td>Apples</td>,
   
<td>Bananas</td>,
 
</tr>,
</table>
,
<table xmlns=""https://www.w3schools.com/furniture"">,
 
<name>African Coffee Table</name>,
 
<width>80</width>,
 
<length>120</length>,
</table>
,
<?xml version=""1.0"" encoding=""UTF-8,?>,
<xsl:stylesheet version=""1.0""
xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"">,
<xsl:template match=""/"">,
<html>,
<body>,
  <h2>My CD Collection</h2>,
  <table border=""1"">,
    <tr>,
      <th style=""text-align:left"">Title</th>,
      <th style=""text-align:left"">Artist</th>,
    </tr>,
    <xsl:for-each select=""catalog/cd"">,
    <tr>,
      <td><xsl:value-of select=""title""/></td>,
      <td><xsl:value-of select=""artist""/></td>,
    </tr>,
    </xsl:for-each>,
  </table>,
</body>,
</html>,
</xsl:template>,
</xsl:stylesheet>
",
XML ,Attributes,"XML Attributes Must be Quoted,XML Elements vs. Attributes,My Favorite Way,Avoid XML Attributes?,XML Attributes for Metadata",,"XML elements can have attributes, just like HTML.,Attributes are designed to contain data related to a specific 
element.,Attribute values must always be quoted. Either single or double quotes can be used.,For a person's 
gender, the <person> 
element can be written like this:,or like this:,If the attribute value itself contains double quotes you can use single quotes, like in this example:,or you can use character entities:,Take a look at these two examples:,In the first example, gender is an attribute. In the last example, gender is an element.
Both examples provide the same information.,There are no rules about when to use attributes or when to use elements in XML.,The following three XML documents contain exactly the same information:,A date attribute is used in the first example:,A <date> element is used in the second example:,An expanded <date> element is used in the third example: (THIS IS MY FAVORITE):,Some things to consider when using attributes are:,Don't end up like this:,Sometimes ID references are assigned to elements. These IDs can be used to identify XML elements in much the same way as the 
id attribute in HTML. This example demonstrates this:,The id attributes above are for identifying the different notes. It is not a part of the note itself.,What I'm trying to say here is that metadata (data about data) should be stored as attributes, and the data itself should be stored as elements.","attributes cannot contain multiple values (elements can),attributes cannot contain tree structures (elements can),attributes are not easily expandable (for future changes)","
<person gender=""female"">,
<person gender='female'>,
<gangster name='George ""Shotgun"" Ziegler'>,
<gangster name=""George &quot;Shotgun&quot; Ziegler"">,
<person gender=""female"">,
   
  <firstname>Anna</firstname>,
   
  <lastname>Smith</lastname>,
</person>,
<person>,
   
  <gender>female</gender>,
   
  <firstname>Anna</firstname>,
   
  <lastname>Smith</lastname>,
</person>,
<note date=""2008-01-10"">,
 
<to>Tove</to>,
 
<from>Jani</from>,
</note>,
<note>,
 
<date>2008-01-10</date>,
 
<to>Tove</to>,
 
<from>Jani</from>,
</note>,
<note>,
 
<date>,
     
  <year>2008</year>,
     
  <month>01</month>,
     
  <day>10</day>,
 
</date>,
 
<to>Tove</to>,
 
<from>Jani</from>,
</note>,
<note day=""10"" month=""01"" year=""2008"",
to=""Tove"" from=""Jani"" heading=""Reminder"",
body=""Don't forget me this weekend!"">,
</note>,
<messages>,
   
  <note id=""501"">,
       
    <to>Tove</to>,
       
    <from>Jani</from>,
       
    <heading>Reminder</heading>,
       
    <body>Don't forget me this weekend!</body>,
   
  </note>,
   
  <note id=""502"">,
       
    <to>Jani</to>,
       
    <from>Tove</from>,
       
    <heading>Re: Reminder</heading>,
       
    <body>I will not</body>,
   
  </note>,
</messages>",
XML ,Elements,"What is an XML Element?,Empty XML Elements,XML Naming Rules,Best Naming Practices,Naming Styles,XML Elements are Extensible",,"An XML document contains XML Elements.,An XML element is everything from (including) the element's start tag to 
(including) the element's end tag.,An element can contain:,In the example above:,<title>, <author>, <year>, and <price> have , because they contain text (like 29.99).,<bookstore> and <book> have ,, 
because they contain elements.,<book> has an , 
(category=""children"").,An element with no content is said to be empty.,In XML, you can indicate an empty element like this:,You can also use a so called self-closing tag:,The two forms produce identical results in XML software (Readers, Parsers, 
Browsers).,XML elements must follow these naming rules:,Any name can be used, no words are reserved (except xml).,Create descriptive names, like this: 
<person>, <firstname>, <lastname>.,Create short and simple names, like this: <book_title> not like this: 
<the_title_of_the_book>.,Avoid ""-"". If you name something ""first-name"", some software may 
think you want to subtract ""name"" from ""first"".,Avoid ""."". If you name something ""first.name"", some software may 
think that ""name"" is a property of the object ""first"".,Avoid "":"". Colons are reserved for  
namespaces (more later).,Non-English letters like éòá are perfectly legal in XML, but watch out for 
problems if your software doesn't support them.,There are no naming styles defined for XML elements. But here are some commonly 
used:,If you choose a naming style, it is good to be consistent!,XML documents often have a corresponding database. A common practice is to use 
the naming rules of the database for the XML elements.,XML elements can be extended to carry more information.,Look at the following XML example:,Let's imagine that we created an application that extracted the <to>, <from>, 
and <body> elements from the XML document to produce this output:,Imagine that the author of the XML document added some extra information to 
it:,Should the application break or crash?,No. The application should still be able to find the <to>, <from>, and <body> 
elements in the XML document and produce the same output.,This is one of the beauties of XML. It can be extended without breaking 
applications.","text,attributes,other elements,or a mix of the above,Element names are case-sensitive,Element names must start with a letter or underscore,Element names cannot start with the letters xml (or XML, or Xml, etc),Element names can contain letters, digits, hyphens, underscores, and periods,Element names cannot contain spaces","
<bookstore>,
  <book category=""children"">,
    <title>Harry Potter</title>, 
    <author>J K. Rowling</author>,
    <year>2005</year>,
    <price>29.99</price>,
  </book>,
  <book category=""web"">,
    <title>Learning XML</title>,
    <author>Erik T. Ray</author>,
    <year>2003</year>,
    <price>39.95</price>,
  </book>,
</bookstore>,
<element></element>,
<element />,
<note>,
 
<to>Tove</to>,
 
<from>Jani</from>,
 
<body>Don't forget me this weekend!</body>,
</note>,
<note>,
 
<date>2008-01-10</date>,
 
<to>Tove</to>,
 
<from>Jani</from>,
 
<heading>Reminder</heading>,
 
<body>Don't forget me this weekend!</body>,
</note>",
XML ,Syntax Rules,"XML Documents Must Have a Root Element,The XML Prolog,All XML Elements Must Have a Closing Tag,XML Tags are Case Sensitive,XML Elements Must be Properly Nested,XML Attribute Values Must Always be Quoted,Entity References,Comments in XML,White-space is Preserved in XML,XML Stores New Line as LF,Well Formed XML",,"The syntax rules of XML are very simple and logical. The rules 
are easy to learn, and easy to use.,XML documents must contain one , element that is the , 
of all other elements:,In this example , is the root element:,This line is called the XML ,:,The XML prolog is optional. If it exists, it must come first in the document. ,XML documents can contain international characters, like Norwegian øæå or 
French êèé.,To avoid errors, you should specify the encoding used, or save your XML files 
as UTF-8.,UTF-8 is the default character encoding for XML documents.,Character encoding can be studied in our ,.,In XML, it is illegal to omit the closing tag. All elements , have 
a closing tag:,XML tags are case sensitive. The tag <Letter> is different from the tag 
<letter>.,Opening and closing tags must be written with the same case:,""Opening and closing tags"" are often referred to as ""Start and end tags"". Use 
whatever you prefer. It is exactly the same thing.,In HTML, you might see improperly nested elements:,In XML, all elements , be properly nested within each other:,In the example above, ""Properly nested"" simply means that since the <i> 
element is opened inside the <b> element, it must be closed inside the <b> 
element.,XML elements can have attributes in name/value pairs just like in HTML.,In XML, the attribute values must always be quoted:,Some characters have a special meaning in XML.,If you place a character like ""<"" inside an XML element, it will generate an 
error because the parser interprets it as the start of a new element.,This will generate an XML error:,To avoid this error, replace the ""<"" character with an ,:,There are 5 pre-defined entity references in XML:,The syntax for writing comments in XML is similar to that of HTML:,Two dashes in the middle of a comment are not allowed:,XML does not truncate multiple white-spaces (HTML truncates multiple 
white-spaces to one single white-space):,Windows applications store a new line as: carriage return and line feed 
(CR+LF).,Unix and Mac OSX use LF.,Old Mac systems use CR.,XML stores a new line as LF.,XML documents that conform to the syntax rules above are said to be ""Well 
Formed"" XML documents.",,"
 <root>,
    <child>,
        <subchild>.....</subchild>,
    </child>,
 </root>,
 <?xml version=""1.0"" encoding=""UTF-8,?>,
 <note>,
   <to>Tove</to>,
   <from>Jani</from>,
   <heading>Reminder</heading>,
   <body>Don't forget me this weekend!</body>,
 </note>
,
 <?xml version=""1.0"" encoding=""UTF-8,?>,
 <p>This is a paragraph.</p>,
 <br />,
 <message>This is correct</message>,
 <b><i>This text is bold and italic</b></i>,
 <b><i>This text is bold and italic</i></b>,
 <note date=""12/11/2007"">,
   <to>Tove</to>,
   <from>Jani</from>,
 </note>,
 <message>salary , 1000</message>,
 <!-- This is a comment -->,
 <!-- This is an invalid -- comment -->",
XML ,Tree,"An Example XML Document,XML Tree Structure,Self-Describing Syntax",XML Tree Structure,"XML documents form a tree structure that starts at ""the root"" and branches to ""the leaves"".,The image above represents books in this XML:,XML documents are formed as ,.,An XML tree starts at a , and branches from the 
root to ,.,All elements can have sub elements (child elements):,The terms parent, child, and sibling are used to describe the relationships between 
elements.,Parents have children. Children have parents. Siblings are children on the same level (brothers 
and sisters).,All elements can have text content (Harry Potter) and attributes (category=""cooking"").,XML uses a much self-describing syntax.,A prolog defines the XML version and the character encoding:,The next line is the ,of the document:,The next line starts a <book> element:,The <book> elements have ,: <title>, <author>, <year>, <price>.,The next line ends the book element:,You can assume, from this example, that the XML document contains information 
about books in a bookstore.",,"
<?xml version=""1.0"" encoding=""UTF-8,?>,<bookstore>,
 
<book category=""cooking"">,
     
  <title lang=""en"">Everyday Italian</title>,
     
  <author>Giada De Laurentiis</author>,
     
  <year>2005</year>,
     
  <price>30.00</price>,
 
</book>,
 
<book category=""children"">,
     
  <title lang=""en"">Harry Potter</title>,
     
  <author>J K. Rowling</author>,
     
  <year>2005</year>,
     
  <price>29.99</price>,
 
</book>,
 
<book category=""web"">,
     
  <title lang=""en"">Learning XML</title>,
     
  <author>Erik T. Ray</author>,
     
  <year>2003</year>,
     
  <price>39.95</price>,
 
</book>,
</bookstore>
,
<root>,
   
  <child>,
       
    <subchild>.....</subchild>,
   
  </child>,
</root>
,
<?xml version=""1.0"" encoding=""UTF-8,?>
,
<bookstore> ,
<book category=""cooking""> ,
<title lang=""en"">Everyday Italian</title>,
<author>Giada De Laurentiis</author>,
<year>2005</year>,
<price>30.00</price>
,
</book>
",
How Can XML be ,Used?,"XML Separates Data from Presentation,XML is Often a Complement to HTML,XML Separates Data from HTML,Transaction Data,Example: XML News,Example: XML Weather Service",Books.xml,"XML is used in many aspects of web development.,XML is often used to separate data from presentation.,XML does not carry any information about how to be displayed.,The same XML data can be used in many different presentation scenarios.,Because of this, with XML, there is a full separation between data and 
presentation.,In many HTML applications, XML is used to 
store or transport data, while HTML is used to format and display the 
same data.,When displaying data in HTML, you should not have to edit the HTML file when the data changes.,With XML, the data can be stored in separate XML files.,With a few lines of JavaScript code, you can read an XML file and update 
the data content of any HTML page. ,You will learn a lot more about using XML and JavaScript in the DOM section of this tutorial.,Thousands of XML formats exist, in many different industries, to describe day-to-day data transactions:,Using a standard makes it easier for both news producers and news consumers to produce, receive, and archive any kind of news information across different hardware, software, and programming languages.,An example XMLNews document:,An XML national weather service from NOAA (National Oceanic and Atmospheric Administration):","Stocks and Shares,Financial transactions,Medical data,Mathematical data,Scientific measurements,News information,Weather services","
 <?xml version=""1.0"" encoding=""UTF-8""?>,<bookstore>,  <book 
 category=""cooking"">,    <title lang=""en"">Everyday 
 Italian</title>,    <author>Giada De Laurentiis</author>,    
 <year>2005</year>,    <price>30.00</price>,  </book>,
 ,  <book category=""children"">,    <title lang=""en"">Harry 
 Potter</title>,    <author>J K. Rowling</author>,    
 <year>2005</year>,    <price>29.99</price>,  </book>,
 ,  <book category=""web"">,    <title lang=""en"">XQuery 
 Kick Start</title>,    <author>James McGovern</author>,    
 <author>Per Bothner</author>,    <author>Kurt Cagle</author>,    
 <author>James Linn</author>,    <author>Vaidyanathan 
 Nagarajan</author>,    <year>2003</year>,    
 <price>49.99</price>,  </book>,  <book category=""web"" 
 cover=""paperback"">,    <title lang=""en"">Learning XML</title>,    
 <author>Erik T. Ray</author>,    <year>2003</year>,    
 <price>39.95</price>,  </book>,</bookstore>,
<?xml version=""1.0"" encoding=""UTF-8,?>,
<nitf>,
 
<head>,
   
<title>Colombia Earthquake</title>,
 
</head>,
 
<body>,
   
<headline>,
       
  <hl1>143 Dead in Colombia Earthquake</hl1>,
   
</headline>,
   
<byline>,
       
  <bytag>By Jared Kotler, Associated Press Writer</bytag>,
   
</byline>,
   
<dateline>,
       
  <location>Bogota, Colombia</location>,
       
  <date>Monday January 25 1999 7:28 ET</date>,
   
</dateline>,
 
</body>,
</nitf>,
<?xml version=""1.0"" encoding=""UTF-8,?>,
<current_observation>,
<credit>NOAA's National Weather Service</credit>,
<credit_URL>http://weather.gov/</credit_URL>,
<image>,
 
<url>http://weather.gov/images/xml_logo.gif</url>,
 
<title>NOAA's National Weather Service</title>,
 
<link>http://weather.gov</link>,
</image>,
<location>New York/John F. Kennedy Intl Airport, NY</location>,
<station_id>KJFK</station_id>,
<latitude>40.66</latitude>,
<longitude>-73.78</longitude>,
<observation_time_rfc822>Mon, 11 Feb 2008 06:51:00 -0500 EST,
</observation_time_rfc822>,
<weather>A Few Clouds</weather>,
<temp_f>11</temp_f>,
<temp_c>-12</temp_c>,
<relative_humidity>36</relative_humidity>,
<wind_dir>West</wind_dir>,
<wind_degrees>280</wind_degrees>, 
<wind_mph>18.4</wind_mph>,
<wind_gust_mph>29</wind_gust_mph>, 
<pressure_mb>1023.6</pressure_mb>,
<pressure_in>30.23</pressure_in>,
<dewpoint_f>-11</dewpoint_f>,
<dewpoint_c>-24</dewpoint_c>,
<windchill_f>-7</windchill_f>,
<windchill_c>-22</windchill_c>,
<visibility_mi>10.00</visibility_mi>,
<icon_url_base>http://weather.gov/weather/images/fcicons/</icon_url_base>,
<icon_url_name>nfew.jpg</icon_url_name>,
<disclaimer_url>http://weather.gov/disclaimer.html</disclaimer_url>,
<copyright_url>http://weather.gov/disclaimer.html</copyright_url>,
</current_observation>",
 XML,Introduction to,"What is XML?,XML Does Not DO Anything,The Difference Between XML and HTML,XML Does Not Use Predefined Tags,XML is Extensible,XML Simplifies Things,XML is a W3C Recommendation",,"XML is a software- and hardware-independent tool for storing and 
transporting data.,Maybe it is a little hard to understand, but XML does not DO anything.,This note is a note to Tove from Jani, stored as XML:,The XML above is quite self-descriptive:,But still, the XML above does not DO anything. XML is just information wrapped in tags.,Someone must write a piece of software to send, receive, 
store, or display it:,XML and HTML were designed with different goals:,The XML language has no predefined tags.,The tags in the example above (like <to> and <from>) are not defined in any XML standard. These tags are ""invented"" by the author of the XML document.,HTML works with predefined tags like <p>, <h1>, <table>, etc.,With XML, the author must define both the tags and the document structure.,Most XML applications will work as expected even if new data is added (or 
removed).,Imagine an application designed to display the original version of note.xml 
(<to> <from> <heading> <body>).,Then imagine a newer version of note.xml with added <date> and <hour> 
elements, and a removed <heading>.,The way XML is constructed, older version of the application can still work:,Many computer systems contain data in incompatible formats. Exchanging data 
between incompatible systems (or upgraded systems) is a time-consuming task 
for web developers. Large amounts of data must be converted, and incompatible data is 
often lost.,XML stores data in plain text format. This provides a software- and
hardware-independent way of storing, transporting, and sharing data.,XML also makes it easier to expand or upgrade to new operating systems, new 
applications, or new browsers, without losing data.,With XML, data can be available to all kinds of ""reading
machines"" like people, computers, voice machines, news feeds, etc.,XML became a W3C Recommendation as early as in February 1998.","XML stands for eXtensible Markup Language,XML is a markup language much like HTML,XML was designed to store and transport data,XML was designed to be self-descriptive,XML is a W3C Recommendation,It has sender information.,It has receiver information,It has a heading,It has a message body.,XML was designed to carry data - with focus on what data is,HTML was designed to display data - with focus on how data looks,XML tags are not predefined like HTML tags are,It simplifies data sharing,It simplifies data transport,It simplifies platform changes,It simplifies data availability","
<note>,
 
<to>Tove</to>,
 
<from>Jani</from>,
 
<heading>Reminder</heading>,
 
<body>Don't forget me this weekend!</body>,
</note>
,
<note>,
 
 <date>2015-09-01</date>,  <hour>08:30</hour>,  <to>Tove</to>,
 
<from>Jani</from>,
 
<body>Don't forget me this weekend!</body>,
</note>
",
