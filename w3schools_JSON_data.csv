H1_leftside_heading,H1_rightside_heading,H2,H3,All_para,li,div,div_2
JavaScript ,Tutorial,"Examples in Each Chapter,Use the Menu,Learn by Examples,Why Study JavaScript?,Learning Speed,Commonly Asked Questions,JavaScript References,JavaScript Quiz Test",Example,"With our ""Try it Yourself"" editor, you can edit the source code and view 
the result.,We recommend reading this tutorial, in the sequence listed in the menu.,If you have a large screen, the menu will always be present on the left.,If you have a small screen, open the menu by clicking the top menu sign ,.,Examples are better than 1000 words. Examples are often easier to understand 
than text explanations.,This tutorial supplements all explanations with clarifying ""Try it Yourself"" examples.,JavaScript is one of the , all web developers , 
learn:,   1. , to define the content of web pages,   2. , to specify the layout of web pages,   3. , to program the behavior of web pages ,In this tutorial, the learning speed is your choice.,Everything is up to you.,If you are struggling, take a break, or re-read the material., make sure you understand , the ""Try-it-Yourself"" 
examples.,The only way to become a clever programmer is to:
Practice. Practice. Practice. Code. Code. Code !,You don't have to get or download JavaScript.,JavaScript is already running in your browser on your computer,
on your tablet, and on your smart-phone.,JavaScript is free to use for everyone.,W3Schools maintains a complete JavaScript reference, including all HTML and browser objects.,The reference contains examples for all properties, methods and events, and 
is continuously updated according to the latest web standards.,Test your JavaScript skills at W3Schools!","The Original JavaScript ES1 ES2 ES3 (1997-1999),The First Main Revision ES5 (2009),The Second Revision ES6 (2015),The Yearly Additions (2016, 2017, 2018),How do I get JavaScript?,Where can I download JavaScript?,Is JavaScript Free?",,
JavaScript ,String Methods,"String Methods and Properties,JavaScript String Length,Extracting String Parts,JavaScript String slice(),JavaScript String substring(),JavaScript String substr(),Replacing String Content,Converting to Upper and Lower Case,JavaScript String toUpperCase(),JavaScript String toLowerCase(),JavaScript String concat(),JavaScript String trim(),JavaScript String Padding,JavaScript String padStart(),Browser Support,JavaScript String padEnd(),Browser Support,Extracting String Characters,JavaScript String charAt(),JavaScript String charCodeAt(),Property Access,Converting a String to an Array,JavaScript String split()","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","String methods help you to work with strings.,Primitive values, like ""John Doe"", cannot have properties 
or methods (because they are not objects). ,But with JavaScript, methods and properties are also available to 
primitive values, because JavaScript treats primitive values 
as objects when executing methods and properties.,The , property returns the length of a string:,There are 3 methods for extracting a part of a string:, extracts a part of a string and returns the 
extracted part in a new string.,The method takes 2 parameters: the start position, and the end position (end 
not included).,This example slices out a portion of a string from position 7 to position 12 (13-1):,If a parameter is negative, the position is counted from the 
end of the string.,This example slices out a portion of a string from position -12 to position 
-6: ,If you omit the second parameter, the method will slice out the rest of the string:,or, counting from the end:, is similar to ,.,The difference is that , cannot accept negative indexes.,If you omit the second parameter, , will slice out the rest of the 
string., is similar to ,.,The difference is 
that the second parameter specifies the , 
of the extracted part.,If you omit the second parameter, , will slice out the rest of the 
string.,If the first parameter is negative, the position counts from the end of the 
string.,The , method replaces a specified value with another 
value in a string:,By default, the , method replaces , match:,By default, the , method is case sensitive. Writing MICROSOFT (with 
upper-case) will not work:,To replace case insensitive, use a , with an , flag (insensitive):,To replace all matches, use a , with a , flag (global match):,A string is converted to upper case with ,:,A string is converted to lower case with ,:, joins two or more strings:,The , method can be used instead of the plus operator. 
These two lines do the same:,The , method removes whitespace from both sides of a string:,ECMAScript 2017 added two String methods: ,
and , to support padding at the beginning and at the end of a string., is an ECMAScript 2017 feature.,It is supported in all modern browsers:, is not supported in Internet Explorer., is an ECMAScript 2017 feature.,It is supported in all modern browsers:, is not supported in Internet Explorer.,There are 3 methods for extracting string characters:,The , method returns the character at a specified 
index (position) in a string:,The , method returns the unicode of the character 
at a specified index in a string:,The method returns a UTF-16 code (an integer between 0 and 65535).,ECMAScript 5 (2009) allows property access [ ] on strings:,A string can be converted to an array with the , method:,If the separator is omitted, the returned array will contain the whole string 
in index [0].,If the separator is """", the returned array will be an array of single 
characters:","Property access [ ],It makes strings look like arrays (but they are not),If no character is found, [ ] returns undefined, while charAt() returns an empty string.,It is read only. str[0] = ""A"" gives no error (but does not work!)",,
JavaScript ,Strings,"String Length,Escape Character,Breaking Long Code Lines,JavaScript Strings as Objects","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","A JavaScript string is zero or more characters written inside quotes.,You can use single or double quotes:,You can use quotes inside a string, as long as they don't match the quotes 
surrounding the string:,To find the length of a string, use the built-in , property:,Because strings must be written within quotes, JavaScript will misunderstand this string:,The string will be chopped to ""We are the so-called "".,The solution to avoid this problem, is to use the ,.,The backslash (,) escape character turns special characters into string characters:,The sequence ,  inserts a double quote in a string:,
,The sequence ,  inserts a single quote in a string:,
,The sequence ,  inserts a backslash in a string:,
,Six other escape sequences are valid in JavaScript:,For best readability, programmers often like to avoid code lines longer than 
80 characters.,If a JavaScript statement does not fit on one line, the best place to break 
it is after an operator:,You can also break up a code line , with a single backslash:,A safer way to break up a string, is to use string 
addition:,You cannot break up a code line with a backslash:,Normally, JavaScript strings are primitive values, created from literals:,But strings can also be defined as objects with the keyword ,:",,,
JavaScript ,Sorting Arrays,"Sorting an Array,Reversing an Array,Numeric Sort,The Compare Function,Sorting an Array in Random Order,The Fisher Yates Method,Find the Highest (or Lowest) Array Value,Using Math.max() on an Array,Using Math.min() on an Array,My Min / Max JavaScript Methods,Sorting Object Arrays","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example (Find Max),Example (Find Min),Example,Example,Example","The , method sorts an array alphabetically: ,The , method reverses the elements in an array.,You can use it to 
sort an array in descending order: ,By default, the , function sorts values as ,.,This works well for strings (""Apple"" comes before ""Banana"").,However, if numbers are sorted as strings, ""25"" is bigger than ""100"", 
because ""2"" is bigger than ""1"".,Because of this, the , method will produce incorrect result when sorting 
numbers.,You can fix this by providing a ,:,Use the same trick to sort an array descending:,The purpose of the compare function is to define an alternative sort 
order.,The compare function should return a negative, zero, or positive value, depending on 
the arguments:,When the , function compares two values, it sends the values to the 
compare function, and sorts the values according to the returned (negative, 
zero, positive) value.,If the result is negative , is sorted before
,.,If the result is positive , is sorted 
before ,.,If the result is 0 no changes are done with the sort order of the two 
values.,The compare function compares all the values in the array, two values at a 
time ,.,When comparing 40 and 100, the , method calls the compare function(40, 100).,The function calculates 40 - 100 ,, and 
since the result is negative (-60),  the sort function will sort 40 as a value lower than 100.,You can use this code snippet to experiment with numerically and 
alphabetically sorting:,The above example, ,.sort(), is not accurate, it will favor some 
numbers over the others.,The most popular correct method, is called the Fisher Yates shuffle, and was 
introduced in data science as early as 1938!,In JavaScript the method can be translated to this:,There are no built-in functions for finding the max or min 
value in an array.,However, after you have sorted an array, you can use the 
index to obtain the highest and lowest values.,Sorting ascending:,Sorting descending:,You can use , to find the highest number in an array:, is equivalent to ,.,You can use , to find the lowest number in an array:, is equivalent to ,.,The fastest solution is to use a ""home made"" method.,This function loops through an array comparing each value with the highest 
value found: ,This function loops through an array comparing each value with the lowest 
value found: ,JavaScript arrays often contain objects:,Even if objects have properties of different data types, the , method 
can be used to sort the array. ,The solution is to write a compare function to compare the property values:,Comparing string properties is a little more complex:",,"
 <button onclick=""myFunction1()"">Sort Alphabetically</button>,<button 
 onclick=""myFunction2()"">Sort Numerically</button>,<p id=""demo""></p>,
 ,<script>,const points = [40, 100, 1, 5, 25, 10];,
 document.getElementById(""demo"").innerHTML = points;,function 
 myFunction1() {,  points.sort();,  document.getElementById(""demo"").innerHTML 
 = points;,},function myFunction2() {,  points.sort(function(a, b){return 
 a - b});,  document.getElementById(""demo"").innerHTML = points;,},
 </script>",
JavaScript Template Literals,,"Back-Tics Syntax,Quotes Inside Strings,Multiline Strings,Interpolation,Variable Substitutions,Expression Substitution,HTML Templates,Browser Support","Example,Example,Example,Example,Example,Example"," use back-ticks (``) rather than the quotes ("""") to define a string:,With ,, you can use both single and double quotes inside a string:, allows multiline strings:, provide an easy way to interpolate variables and expressions into strings.,The method is called string interpolation.,The syntax is:, allow variables in strings:, allow expressions in strings:, is an ES6  feature (JavaScript 2015).,It is supported in all modern browsers:, is not supported in Internet Explorer.","Template Literals,Template Strings,String Templates,Back-Tics Syntax",,
JavaScript ,Number Methods,"Number Methods and Properties,The toString() Method,The toExponential() Method,The toFixed() Method,The toPrecision() Method,The valueOf() Method,Converting Variables to Numbers,Global JavaScript Methods,The Number() Method,The Number() Method Used on Dates,The parseInt() Method,The parseFloat() Method,Number Properties,JavaScript MIN_VALUE and MAX_VALUE,JavaScript POSITIVE_INFINITY,JavaScript NEGATIVE_INFINITY,JavaScript NaN - Not a Number,Number Properties Cannot be Used on Variables","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","Number methods help you work with numbers.,Primitive values (like 3.14 or 2014), cannot have properties and methods (because they are not objects). ,But with JavaScript, methods and properties are also available to primitive 
values, because JavaScript treats primitive values as objects when executing 
methods and properties.,The , method returns a number as a string.,All number methods can be used on any type of numbers (literals, variables, or expressions):, returns a string, with a number rounded and written using exponential notation.,A parameter defines the number of characters behind the decimal point:,The parameter is optional. If you don't specify it, JavaScript will not round the number., returns a string, with the number 
written with a specified number of 
decimals:, returns a string, with a number written with a 
specified length:, returns a number as a number.,In JavaScript, a number can be a primitive value (typeof = number) or an 
object (typeof = object).,The , method is used internally in JavaScript to convert Number 
objects to primitive values.,There is no reason to use it in your code.,There are 3 JavaScript methods that can be used 
to convert variables to numbers:,These methods are not , methods, but , 
JavaScript methods.,JavaScript global methods can be used on all JavaScript data types.,These are the most relevant methods, when working with numbers:, can be used to convert JavaScript variables to numbers:, can also convert a date to a number.,The number of milliseconds between 1970-01-02 and 1970-01-01 is 86400000:, parses a string and returns a whole number. Spaces are 
allowed. Only the first number is returned:,If the number cannot be converted, , (Not a Number) is returned., parses a string and returns a number. Spaces are 
allowed. Only the first number is returned:,If the number cannot be converted, , (Not a Number) is returned., returns the largest possible number in JavaScript., returns the lowest possible number in JavaScript., is returned on overflow:, is returned on overflow:, is a JavaScript reserved word indicating that a number is not a legal number.,Trying to do arithmetic with a non-numeric string will result in , (Not a 
Number):,Number properties belongs to the JavaScript's number object wrapper called ,.,These properties can only be accessed as ,.,Using ,.MAX_VALUE, where , is a variable, expression, 
or value, will return ,:","The , method,The , method,The , method",,
JavaScript String Search,,"JavaScript String indexOf(),JavaScript String lastIndexOf(),JavaScript String search(),Did You Notice?,JavaScript String match(),Syntax,JavaScript String includes(),Syntax,Browser Support,JavaScript String startsWith(),Syntax,Parameter Values,Browser Support,JavaScript String endsWith(),Syntax,Parameter Values,Browser Support","Example,Example,Example,Example,Example,Example,Example 1,Example 2,Example,Example,Examples,Example","The , method returns the index of (the position of) 
the , occurrence of a specified text in a string:,The , method returns the index of the , 
occurrence of a specified text in a string:,Both ,, and , return -1
if the text is not found:,Both methods accept a second parameter as the starting position for the 
search:,The , methods searches backwards 
(from the end to the beginning), meaning:
if the second parameter is ,, the search starts at position 
15, and searches to the beginning of the string.,The , method searches a string for a specified value 
and returns the position of the match:,The two methods, , and ,, are ,They accept the same arguments (parameters), and return the same value?,The two methods are , equal. These are the differences:,You will learn more about 
regular expressions in a later chapter.,The match() method searches a string for a match against a regular expression, and returns the matches, as an Array object.,Read more about regular expressions in the chapter ,.,The , method returns true if a string contains a specified value., is an ES6  feature (JavaScript 2015).,It is supported in all modern browsers:, is not supported in Internet Explorer.,The , method returns ,
if a string begins with a specified value, otherwise ,:, is an ES6  feature (JavaScript 2015).,It is supported in all modern browsers:, is not supported in Internet Explorer.,The , method returns ,
if a string ends with a specified value, otherwise ,:, is an ES6  feature (JavaScript 2015).,It is supported in all modern browsers:, is not supported in Internet Explorer.","String indexOf(),String lastIndexOf(),String startsWith(),String endsWith(),The , method cannot take a second start position argument.,The , method cannot take 
powerful search values (regular expressions).",,
JavaScript ,Events,"HTML Events,Common HTML Events,JavaScript Event Handlers","Example,Example,Example","HTML events are , that happen to HTML elements.,When JavaScript is used in HTML pages, JavaScript can , on 
these events.,An HTML event can be something the browser does, or something a user does.,Here are some examples of HTML events:,Often, when events happen, you may want to do something.,JavaScript lets you execute code when events are detected.,HTML allows event handler attributes, ,, to be added to HTML elements.,With single quotes:,With double quotes:,In the following example, an , attribute (with code), is added to a 
, element:,In the example above, the JavaScript code changes the content of 
the element with id=""demo"".,In the next example, the code changes the content of 
its own element (using ,): ,Here is a list of some common HTML events:,The list is much longer: ,.,Event handlers can be used to handle and verify user input, user actions, 
and browser actions:,Many different methods can be used to let JavaScript work with events:","An HTML web page has finished loading,An HTML input field was changed,An HTML button was clicked,Things that should be done every time a page loads,Things that should be done when the page is closed,Action that should be performed when a user clicks a button,Content that should be verified when a user inputs data,And more ...,HTML event attributes can execute JavaScript code directly,HTML event attributes can call JavaScript functions,You can assign your own event handler functions to HTML elements,You can prevent events from being sent or being handled,And more ...","
<button onclick=""document.getElementById('demo').innerHTML = Date()"">The time is?</button>,
,
<button onclick=""this.innerHTML = Date()"">The time is?</button>,
,
<button onclick=""displayDate()"">The time is?</button>",
JavaScript ,Arrays,"Why Using an Array?,Creating an Array,Using the JavaScript Keyword new,Accessing Array Elements,Changing an Array Element,Access the Full Array,Arrays are Objects,Array Elements Can Be Objects,Array Properties and Methods,The length Property,Accessing the First Array Element,Accessing the Last Array Element,Looping Array Elements,Adding Array Elements,Associative Arrays,The Difference Between Arrays and Objects,When to Use Arrays. When to use Objects.,JavaScript new Array(),How to Recognize an Array","Example,Example,Example,Example,Example,Example,Array:,Object:,Example,Example,Example,Example,Example,Example,Example,Example,Example, Example:,A Common Error","If you have a list of items (a list of car names, for example), storing the 
cars in single variables could look like this:,However, what if you want to loop through the cars and find a specific one? 
And what if you had not 3 cars, but 300?,The solution is an array!,An array can hold many values under a single name, and you can 
access the values by referring to an index number.,Using an array literal is the easiest way to create a JavaScript Array.,Syntax: ,Spaces and line breaks are not important. A declaration can span multiple lines:,You can also create an array, and then provide the elements:,The following example also creates an Array, and assigns values to it:,You access an array element by referring to the ,:,This statement changes the value of the first element in ,:,With JavaScript, the full array can be accessed by referring to the array 
name:,Arrays are a special type of objects. The , operator in JavaScript returns ""object"" for 
arrays.,But, JavaScript arrays are best described as arrays.,Arrays use , to access its ""elements"". In this 
example, , 
returns John:,Objects use , to access its ""members"". In this example, 
, 
returns John:,JavaScript variables can be objects. Arrays are special kinds of objects.,Because of this, you can have variables of different types in the 
same Array.,You can have objects in an Array. You can have functions in an Array. You can 
have arrays in an Array:,The real strength of JavaScript arrays are the built-in array properties and 
methods:,Array methods are covered in the next chapters.,The , property of an array returns the length of an array (the number of array 
elements).,One way to loop through an array, is using a , loop:,You can also use the , function:,The easiest way to add a new element to an array is using the , method:,New element can also be added to an array using the , property:,Many programming languages support arrays with named indexes.,Arrays with named indexes are called associative 
arrays (or hashes).,JavaScript does , support arrays with named indexes.,In JavaScript, , always use ,.   ,In JavaScript, , use ,.   ,In JavaScript, , use ,.,JavaScript has a built in array constructor ,.,But you can safely use , instead.,These two different statements both create a new empty array named points:,These two different statements both create a new array containing 6 numbers:,The , keyword can produce some unexpected results:,A common question is: How do I know if a variable is an array?,The problem is that the JavaScript operator , returns 
"","":,The typeof operator returns object because a JavaScript array is an 
object. ,To solve this problem ECMAScript 5 (JavaScript 2009) defined a new method ,:,The , operator returns true if an object is created 
by a given constructor:","JavaScript does not support associative arrays.,You should use , when you want the element names to be 
,.,You should use , when you want the element names to be
,.",,
JavaScript ,Assignment,"JavaScript Assignment Operators,Assignment Examples","Assignment,Assignment,Assignment,Assignment,Assignment,Assignment","Assignment operators assign values to JavaScript variables.,The , assignment operator assigns a value to a variable.,The , assignment operator adds a value to a variable.,The , assignment operator subtracts a value from a variable.,The , assignment operator multiplies a variable.,The , assignment divides a variable.,The , assignment operator assigns a remainder to a variable.",,,
JavaScript ,Arithmetic,"JavaScript Arithmetic Operators,Arithmetic Operations,Operators and Operands,Adding,Subtracting,Multiplying,Dividing,Remainder,Incrementing,Decrementing,Exponentiation,Operator Precedence,JavaScript Operator Precedence Values","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","Arithmetic operators perform arithmetic on numbers (literals or variables).,A typical arithmetic operation operates on two numbers.,The two numbers can be literals:,or variables:,or expressions:,The numbers (in an arithmetic operation) are called ,.,The operation (to be performed between the two operands) is defined by an ,.,The , operator (,) adds numbers:,The , operator (,) subtracts numbers.,The , operator (,) multiplies numbers.,The , operator (,) divides numbers.,The , operator (,) returns the division remainder.,The , operator (,) increments numbers.,The , operator (,) decrements numbers.,The , operator (,) raises the first operand to the power of the second operand.,x ** y produces the same result as ,:,Operator precedence describes the order in which operations are performed in 
an arithmetic expression.,Is the result of example above the same as 150 * 3, or is it the same as 100 
+ 150?,Is the addition or the multiplication done first?,As in traditional school mathematics, the multiplication is done first.,Multiplication (,) and division (,) have higher , than 
addition (,) and subtraction (,).,And (as in school mathematics) the precedence can be changed by using 
parentheses:,When using parentheses, the operations inside the parentheses are computed 
first. ,When many operations have the same precedence (like addition and 
subtraction), they are computed from left to 
right: ",,,
JavaScript and HTML DOM Reference,,"JavaScript Reference,Window Reference,HTML DOM Reference,Web APIs,HTML Element Objects Reference,Other,JavaScript Tutorial",,"This section contains a complete JavaScript reference documentation.,The references describe the properties and methods of all JavaScript objects, along with examples.,The references describe the properties and methods of the Window object, along with examples.,The references describe the properties and methods of each DOM object, along with examples.,This references describes the most common Web APIs, along with examples.,The references describe the properties and methods of each HTML object, along with examples.",,,
JavaScript ,Objects,"Real Life Objects, Properties, and Methods,JavaScript Objects,Object Definition,Object Properties,Accessing Object Properties,Object Methods,What is ,?,The , Keyword,Accessing Object Methods,Do Not Declare Strings, Numbers, and Booleans as Objects!","Example,Example,Example1,Example2,Example,Example,Example","In real life, a car is an ,. ,A car has , like weight and color, and , like start and stop:,All cars have the same ,, but the property , differ from car to car.,All cars have the same ,, but the methods are performed 
,.,You have already learned that JavaScript variables are 
containers for data values.,This code assigns a , (Fiat) to 
a , named car: ,Objects are variables too. But objects can contain many 
values. ,This code assigns , (Fiat, 500, white) to a
, 
named car:,The values are written as , pairs (name and value separated by a 
colon).,You define (and create) a JavaScript object with an object literal:,Spaces and line breaks are not important. An object definition can span multiple lines: ,The , pairs in JavaScript objects are called ,:,You can access object properties in two ways: ,or,Objects can also have ,.,Methods are , that can be performed on objects.,Methods are stored in properties as ,.,In the example above, , refers to the ,.,I.E. , means the , property of ,.,I.E. , means the , property of ,.,In JavaScript, the , keyword refers to an ,., object depends on how , is being invoked (used or called).,The , keyword refers to different objects depending on how it is used:,In a function definition, , refers to the ""owner"" of the function.,In the example above, , is the , that ""owns"" the 
, function.,In other words, , means the , property of ,.,Learn more about , in ,.,You access an object method with the following syntax:,If you access a method , the () parentheses, it 
will return the ,:,When a JavaScript variable is declared with the keyword "","", the variable is 
created as 
an object: ,Avoid ,, ,, and , objects. They complicate your code and slow down  
execution speed.",,,
JavaScript ,Functions,"JavaScript Function Syntax,Function Invocation,Function Return,Why Functions?,The () Operator Invokes the Function,Functions Used as Variable Values,Local Variables","Example,Example,Example,Example,Example,Example","A JavaScript function is a block of code designed to perform a 
particular task.,A JavaScript function is executed when 
""something"" invokes it (calls it).,A JavaScript function is defined with the , keyword, 
followed by a ,, followed by parentheses ,.,Function names can contain letters, digits, underscores, and dollar signs 
(same rules as variables).,The parentheses may include parameter names separated by commas:,
,The code to be executed, by the function, is placed inside curly brackets: ,Function , are listed inside the parentheses () in 
the function definition.,Function , are the , 
received by the function when it is invoked.,Inside the function, the arguments (the parameters) behave as local variables.,The code inside the function will execute when ""something"" , (calls) the 
function:,You will learn a lot more about function invocation later in this 
tutorial.,When JavaScript reaches a , statement, 
the function will stop executing.,If the function was invoked from a statement, JavaScript will 
""return"" to execute the code after the invoking statement.,Functions often compute a ,. The return value is 
""returned"" back to 
the ""caller"":,You can reuse code: Define the code once, and use it many times.,You can use the same code many times with different arguments, to produce different 
results.,Using the example above, , refers to the function object, and 
, refers to the function result.,Accessing a function without () will return the function object instead of 
the function result.,Functions can be used the same way as you use variables, in all types of formulas, assignments, and 
calculations.,Variables declared within a JavaScript function, become , to 
the function.,Local variables can only be accessed 
from within the function.,Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.,Local variables are created when a function starts, and deleted when the function is completed.","When an event occurs (when a user clicks a button),When it is invoked (called) from JavaScript code,Automatically (self invoked)",,
JavaScript ,Data Types,"The Concept of Data Types,JavaScript Types are Dynamic,JavaScript Strings,JavaScript Numbers,JavaScript Booleans,JavaScript Arrays,JavaScript Objects,The typeof Operator,Undefined,Empty Values ","Example,Example,JavaScript:,JavaScript:,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","In programming, data types is an important concept.,To be able to operate on variables, it is important to know something about 
the type.,Without data types, a computer cannot safely solve this:,Does it make any sense to add ""Volvo"" to sixteen? Will it produce an 
error or will it produce a result?,JavaScript will treat the example above as:,JavaScript evaluates expressions from left to right. Different sequences can 
produce different results:,In the first example, JavaScript treats 16 and 4 as numbers, until it reaches ""Volvo"".,In the second example, since the first operand is a string, all operands are 
treated as strings.,JavaScript has dynamic types. This means that the same variable can be used 
to hold 
different data types:,A string (or a text string) is a series of characters like ""John Doe"".,Strings are written with quotes. You can use single or double quotes:,
,You can use quotes inside a string, as long as they don't match the quotes 
surrounding the string:,You will learn more about strings later in this 
tutorial.,JavaScript has only one type of numbers.,Numbers can be written with, or without decimals:,Extra large or extra small numbers can be written with scientific 
(exponential) notation:,You will learn more about numbers later in this 
tutorial.,Booleans can only have two values: , or ,.,Booleans are often used in conditional testing.,You will learn more about 
conditional testing later in this tutorial.,JavaScript arrays are written with square brackets.,Array items are separated by commas.,The following code declares (creates) an array called ,, containing three 
items (car names):,Array indexes are zero-based, which means the first item is [0], second is 
[1], and so on.,JavaScript objects are written with curly braces ,.,Object 
properties are written as name:value pairs, separated by commas.,The object (person) in the example above has 4 properties: firstName, 
lastName, age, and eyeColor.,You can use the JavaScript , operator to find the type 
of a JavaScript variable.,The , operator returns the type of a variable or an expression:,In JavaScript, a variable without a value, has the value ,. 
The type is also ,.,Any variable can be emptied, by setting the value to ,. 
The type will also be ,.,An empty value has nothing to do with ,.,An empty string has both a legal value and a type.",,,
W3Schools ,JavaScript Certificate,How Does It Work?,,,"Study for free at W3Schools.com,Study at your own speed,Test your skills with W3Schools online quizzes,Apply for your certificate by paying an exam fee,Take your exam online, at any time, and from any location",,
JavaScript Array Methods,,"Converting Arrays to Strings,Popping and Pushing,JavaScript Array pop(),JavaScript Array push(),Shifting Elements,JavaScript Array shift(),JavaScript Array unshift(),Changing Elements,JavaScript Array length,JavaScript Array delete(),Merging (Concatenating) Arrays,Splicing and Slicing Arrays,JavaScript Array splice(),Using splice() to Remove Elements,JavaScript Array slice(),Automatic toString(),Finding Max and Min Values in an Array,Sorting Arrays","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example (Merging Two Arrays),Example (Merging Three Arrays),Example (Merging an Array with Values),Example,Example,Example,Example,Example,Example,Example,Example,Example","The JavaScript method , converts an array to a 
string of (comma separated) array values.,The , method also joins all array elements into a string.,It behaves just like ,, but in addition you can specify the separator:,When you work with arrays, it is easy to remove elements and add 
new elements.,This is what popping and pushing is:,Popping items , of an array, or pushing 
items , an array.,The , method removes the last element from an array: ,The , method returns the value that was ""popped out"":,The , method adds a new element to an array (at the end):,The , method returns the new array length:,Shifting is equivalent to popping, but working on the first element instead of 
the last.,The , method removes the first array element and ""shifts"" all 
other elements to a lower index.,The , method returns the value that was ""shifted out"":,The , method adds a new element to an array (at the beginning), and ""unshifts"" 
older elements: ,The , method returns the new array length.,Array elements are accessed using their ,:,The , property provides an easy way to append a new element to an array:,The , method creates a new array by merging (concatenating) 
existing arrays:,The , method can take any number of array arguments:,The , method can also take strings as arguments:,The , method adds new items to an array.,The , method slices out a piece of an array.,The , method can be used to add new items to an array: ,The first parameter (2) defines the position , new elements should be 
, (spliced in).,The second parameter (0) defines , elements should be
,.,The rest of the parameters (""Lemon"" , ""Kiwi"") define the new elements to be
,.,The , method returns an array with the deleted items: ,With clever parameter setting, you can use , to remove elements without leaving 
""holes"" in the array: ,The first parameter (0) defines the position where new elements should be 
, (spliced in).,The second parameter (1) defines , elements should be
,.,The rest of the parameters are omitted. No new elements will be added.,The , method slices out a piece of an array into a new 
array.,This example slices out a part of an array starting from array element 1 
(""Orange""):,This example slices out a part of an array starting from array element 3 
(""Apple""):,The , method can take two arguments like ,.,The method then selects elements from the start argument, and up to (but not 
including) the end argument.,If the end argument is omitted, like in the first examples, the , 
method slices out the rest of the array.,JavaScript automatically converts an array to a comma separated string when a 
primitive value is expected.,This is always the case when you try to output an array. ,These two examples will produce the same result:,There are no built-in functions for finding the highest 
or lowest value in a JavaScript array.,You will learn how you solve this problem in the next 
chapter of this tutorial.,Sorting arrays are covered in the next chapter of this tutorial.",,,
JavaScript ,Quiz Test,"The Test,Count Your Score",,"You can test your JavaScript skills with W3Schools' Quiz.,The test contains 25 questions and there is no time limit.,The test is not official, it's just a nice way to see how much you know, or don't know, about JavaScript.,You will get 1 point for each correct answer. At the end of the Quiz,
your total score will be displayed. Maximum score is 25 points.",,,
JavaScript ,Exercises,"Exercises,Count Your Score",,"You can test your JavaScript skills with W3Schools' Exercises.,We have gathered a variety of JavaScript exercises (with answers) for each JavaScript Chapter.,Try to solve an exercise by editing some code, or show the answer to see what you've done wrong.,You will get 1 point for
each correct answer. Your score and total score will always be displayed.",,,
JavaScript ,Online Editor,"JavaScript Editor,JavaScript Editor Explained",,"With our online JavaScript editor, you can edit HTML, CSS and JavaScript code, and view the result in your browser.,Click on the ""Try it Yourself"" button to see how it works.,The window to the left is editable - edit the code and click on the ""Run"" button to view the result in the right window.,The ""Result Size"" returns the width and the height of the result window in pixels (even when you resize the browser window).,You can control the size of a window with the bar in between the windows (draggable gutter).,The icons are explained in the table below:",,,
"JavaScript , Examples",Browser Objects,"Window Object,Screen Object,Location Object,History Object,Navigator Object,Popup Boxes,Timing,Cookies",,Examples of using JavaScript to access and manipulate the Browser objects.,,,
"JavaScript , Examples",HTML DOM Events,"Input Events,Mouse Events,Click Events,Load Events,Others",,Examples of using JavaScript to react to events,,,
JavaScript ,Numbers,"JavaScript Numbers are Always 64-bit Floating Point,Integer Precision,Floating Precision,Adding Numbers and Strings,Numeric Strings,NaN - Not a Number,Infinity,Hexadecimal,JavaScript Numbers as Objects","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","JavaScript has only one type of number.
Numbers can be written with or without decimals.,Extra large or extra small numbers can be written with scientific (exponent) notation:,Unlike many other programming languages, 
JavaScript does not define different types of numbers, like integers, short, long, 
floating-point etc.,JavaScript numbers are always stored as double precision floating point 
numbers, following the international IEEE 754 standard. ,This format 
stores numbers in 64 bits, where the number (the fraction) is stored in bits 0 
to 51, the exponent in bits 52 to 62, and the sign in bit 63:,Integers (numbers without a period or exponent notation) are accurate up to 15 digits.,The maximum number of decimals is 17.,If you add two numbers, the result will be a number:,If you add two strings, the result will be a string concatenation:,If you add a number and a string, the result will be a string concatenation:,If you add a string and a number, the result will be a string concatenation:,A common mistake is to expect this result to be 30:,A common mistake is to expect this result to be 102030:,JavaScript strings can have numeric content:,JavaScript will try to convert strings to numbers in all numeric operations:,This will work:,This will also work:,And this will work:,But this will not work:, is a JavaScript reserved word indicating that a number is not a legal number.,Trying to do arithmetic with a non-numeric string will result in , (Not a 
Number):,However, if the string contains a numeric value , the result will be a 
number:,You can use the global JavaScript function ,
to find out if a value is a not a number:,Watch out for ,. If you use , in a mathematical operation, the result will also be ,:,Or the result might be a concatenation like NaN5:, is a number: , returns ,:, (or ,) is the value JavaScript will return if you calculate a number outside the largest 
possible number.,Division by 0 (zero) also generates ,:, is a number: , returns ,.,JavaScript interprets numeric constants as hexadecimal if they are preceded by 
0x.,
By default, JavaScript displays numbers as , decimals.,But you can use the , method to output numbers from , 
to ,.,Hexadecimal is ,. Decimal is ,. 
Octal is ,. Binary is ,.,Normally JavaScript numbers are primitive values created from literals:,But numbers can also be defined as objects with the keyword ,:",,,
"JavaScript ,Examples",HTML Objects ,"Anchor Object,Area Object,Base Object,IFrame Object,Image Object,Table Objects",,Examples of using JavaScript to access and manipulate HTML objects.,,,
"JavaScript ,Examples",HTML Input ,"Button Object,Form Object,Option and Select Objects",,"Examples of using JavaScript to access and manipulate HTML 
input objects.",,,
D3.js,,"How to Use D3.js?,Scatter Plot",Example,"To use D3.js in your web page, , to the library:,D3.js is easy to use.,This script selects the body element and appends a paragraph with the text ""Hello World!"":",,"
<script src=""//d3js.org/d3.v3.min.js""></script>
",
"JavaScript , Examples",HTML DOM,"The Document Object,
The Anchors Collection
,
The Links Collection,
The Forms Collection,
The Images Collection,CSS Manipulation",,Examples of using JavaScript to access and manipulate DOM objects.,,,
JavaScript ,Examples,"What can JavaScript do?,Where to Insert JavaScript,JavaScript Output,JavaScript Syntax,JavaScript Statements,JavaScript Comments,JavaScript Variables,JavaScript Arithmetic ,JavaScript Assignment ,JavaScript String Concatenation,JavaScript Data Types,JavaScript Objects,JavaScript Functions,JavaScript Events,JavaScript Strings,JavaScript Numbers,JavaScript Number Methods,JavaScript Maths,JavaScript Random,JavaScript Dates,JavaScript Arrays,JavaScript Array Methods,JavaScript Array Sort,JavaScript Array Iteration,JavaScript Type Conversion,JavaScript Booleans,JavaScript Comparisons,JavaScript Conditionals,JavaScript Loops,JavaScript Error Handling,JavaScript Regular Expressions,JavaScript Objects,JavaScript Object Properties,JSON Objects,JSON Arrays,JSON Parse,JSON Stringify,JSON PHP,JSON HTML,JSON JSONP",,"
,
,
",,,
Google Chart,,"How to Use Google Chart?,Line Graph,Scatter Plots,Bar Charts,Pie Charts,3D Pie","Source Code,Source Code","To use Google Chart in your web page, , to the charts loader:,Google Chart is easy to use.,Just add a , element to display the chart:,The <div> element must have a unique id.,Then load the Google Graph API:,That's all!,To , the same data, change google.visualization to ScatterChart:,To convert a , Chart to a , chart, just replace:,
google.visualization.,with:,
google.visualization.,To display the Pie in 3D, just add , to the options:","Scatter Chart,Line Chart ,Bar / Column Chart,Area Chart,Pie Chart,Donut Chart,Org Chart,Map / Geo Chart","
<script,
src=""https://www.gstatic.com/charts/loader.js"">,
</script>
,
<div id=""myChart"" style=""max-width:700px; height:400px""></div>
",
Chart.js,,"How to Use Chart.js?,Scatter Plots,Line Graphs,Multiple Lines,Linear Graphs,Function Graphs,Bar Charts,Pie Charts,Doughnut Charts","Source Code,Source Code,Source Code,Source Code,Source Code,Horizontal Bars,Example","Chart.js is easy to use.,, add a link to the providing CDN (Content Delivery Network):,, add a <canvas> to where you want to draw the chart:,The canvas element must have a unique id.,That's all!,If you set the borderColor to zero, you can , the line graph:","Scatter,Line,Bar,Radar,Pie and Doughnut,Polar Area,Bubble","
<script,
src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.js"">,
</script>
,
<canvas id=""myChart"" style=""width:100%;max-width:700px""></canvas>
",
JavaScript Graphics,,"Plotly.js,Chart.js,Google Chart",,"Plotly.js is a charting library that comes with over 40 chart types, 3D charts, statistical graphs, and SVG maps.,

,Chart.js comes with many built-in chart types:,


,From simple line charts to complex tree maps,
Google Chart provides a number of built-in chart types:,
,

","Plotly.js,Chart.js,Google Chart,Scatter,Line,Bar,Radar,Pie and Doughnut,Polar Area,Bubble,Scatter Chart,Line Chart ,Bar / Column Chart,Area Chart,Pie Chart,Donut Chart,Org Chart,Map / Geo Chart",,
JavaScript / jQuery CSS Styles,,"jQuery vs JavaScript,Hiding HTML Elements,Showing HTML Elements,Styling HTML Elements","jQuery,JavaScript,jQuery,JavaScript,jQuery,JavaScript"," was created in 2006 by John Resig. 
It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.,However, after JavaScript , (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:,Hide an HTML Element:,Show an HTML Element:,Change the font size of an HTML element:",,,
HTML Canvas,,"Scatter Plots,Line Graphs,Combined","Source Code,Source Code,Source Code",,,,
JavaScript / jQuery HTML DOM,,"jQuery vs JavaScript,Removing HTML Elements,Get Parent Element","jQuery,JavaScript,jQuery,JavaScript"," was created in 2006 by John Resig. 
It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.,However, after JavaScript , (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:,Remove an HTML element:,Return the parent of an HTML element:",,,
Plotly.js,,"Scatter Plots,Line Graphs,Linear Graphs,Multiple Lines,Bar Charts,Horizontal Bar Charts,Pie Charts,Donut Charts,Plotting Equations","Source Code,Source Code,Source Code,Source Code,Source Code,Source Code,Source Code","To display a pie instead of bars, change x and y to labels and values, and change the type to ""pie"":,To display a donut instead of a pie, add a hole:",,,
JavaScript / jQuery HTML Elements,,"jQuery vs JavaScript,Set Text Content,Get Text Content,Set HTML Content,Get HTML Content","jQuery,JavaScript,jQuery,JavaScript,jQuery,JavaScript,jQuery,JavaScript"," was created in 2006 by John Resig. 
It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.,However, after JavaScript , (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:,Set the inner text of an HTML element:,Get the inner text of an HTML element:,Set the HTML content of an element:,Get the HTML content of an element:",,,
JavaScript / jQuery DOM Selectors,,"jQuery vs JavaScript,Finding HTML Element by Id,Finding HTML Elements by Tag Name,Finding HTML Elements by Class Name,Finding HTML Elements by CSS Selectors","jQuery,JavaScript,jQuery,JavaScript,jQuery,JavaScript,jQuery,JavaScript"," was created in 2006 by John Resig. 
It was designed to handle Browser Incompatibilities and to simplify HTML DOM Manipulation, Event Handling, Animations, and Ajax.,However, after JavaScript , (2009), most of the jQuery utilities can be solved with a few lines of standard JavaScript:,Return the element with id=""id01"":,Return all <p> elements:,Return all elements with class=""intro"".,Return a list of all <p> elements with class=""intro"".",,,
JSONP,,"JSONP Intro,The Server File,The JavaScript function,Creating a Dynamic Script Tag,Dynamic JSONP Result,Callback Function","Example,Example,Example,PHP file,JavaScript Example,Example","JSONP is a method for sending JSON data without worrying about cross-domain issues.,JSONP does not use the , object.,JSONP uses the , tag instead.,Requesting a file from another domain can cause problems, due to cross-domain policy.,Requesting an external , from another domain does not have this problem.,JSONP uses this advantage, and request files using the script tag 
instead of the , object.,The file on the server wraps the result inside a 
function call:,The result returns a call to a function named ""myFunc"" with the JSON data as 
a parameter.,Make sure that the function exists on the client.,The function named ""myFunc"" is located on the client, and ready to handle 
JSON data:,The example above will execute the ""myFunc"" function when the page is 
loading, based on where you put the script tag, which is not very satisfying.,The script tag should only be created when needed:,The examples above are still very static.,Make the example dynamic by sending JSON to the php file, and let the php file return a JSON object based on 
the information it gets.,When you have no control over the server file, how do you get the server file 
to call the correct function?,Sometimes the server file offers a callback function as 
a parameter:","Convert the request into an object, using the PHP function
  ,.,Access the database, and fill an array with the requested data.,Add the array to an object.,Convert the array into JSON using 
the , function.,Wrap ""myFunc()"" around the return object.","
  <script src=""demo_jsonp.php"">,
  <?php,$myJSON = '{ ""name"":""John"", ""age"":30, ""city"":""New York"" }';,
  ,echo ""myFunc("".$myJSON."");"";,
  ?>,
  <?php,header(""Content-Type: application/json; charset=UTF-8"");,$obj = 
  json_decode($_GET[""x""], false);,
  ,$conn = new mysqli(""myServer"", ""myUser"", ""myPassword"", ""Northwind"");,
  $result = $conn->query(""SELECT name FROM 
  "".$obj->$table."" LIMIT "".$obj->$limit);,$outp = array();,
  $outp = $result->fetch_all(MYSQLI_ASSOC);,echo ""myFunc("".json_encode($outp)."")"";,?>",
JSON ,HTML,"HTML Table,Dynamic HTML Table,HTML Drop Down List","Example,Example,Example","JSON can very easily be translated into JavaScript.,JavaScript can be used to make HTML in your web pages.,Make an HTML table with data received as JSON:,Make the HTML table based on the value of a drop down menu:

,
,Make an HTML drop down list with data received as JSON:",,"
<select id=""myselect"" onchange=""change_myselect(this.value)"">,  <option value="""">Choose an option:</option>,  <option 
value=""customers"">Customers</option>,  <option 
value=""products"">Products</option>,  <option 
value=""suppliers"">Suppliers</option>,</select>,
<script>,
function change_myselect(sel) {,
  const dbParam = JSON.stringify({table:sel,limit:20});,
  const xmlhttp = new XMLHttpRequest();,
  xmlhttp.onload = function() {,
    const myObj = JSON.parse(this.responseText);,
    let text = ""<table border='1'>"",
    for (let x in myObj) {,
      text += ""<tr><td>"" + myObj[x].name + ""</td></tr>"";,
    },
    text += ""</table>"",
    document.getElementById(""demo"").innerHTML = text;,
  },
  xmlhttp.open(""POST"", ""json_demo_html_table.php"");,
  xmlhttp.setRequestHeader(""Content-type"", ""application/x-www-form-urlencoded"");,
  xmlhttp.send(""x="" + dbParam);,
},
</script>
",
JSON ,PHP,"The PHP File,The Client JavaScript,PHP Array,The Client JavaScript,PHP Database,Use the Data,PHP Method = POST","PHP file,Example,PHP file,Example,Example,PHP file,Example,Example,PHP file","A common use of JSON is to read data from a web server, 
and display the data in a web page.,This chapter will teach you how to exchange JSON data between 
the client and a PHP server.,PHP has some built-in functions to handle JSON.,Objects in PHP can be converted into JSON by using the PHP function
,:,Here is a JavaScript on the client, using an AJAX call to request the PHP 
file from the example above:,Arrays in PHP will also be converted into JSON when using the PHP function
,:,Here is a JavaScript on the client, using an AJAX call to request the PHP 
file from the array example above:,PHP is a server side programming language, and can be used to access a database.,Imagine you have a database on your server, and you want to send a request to 
it from the client where you ask for the 10 first rows in a table called 
""customers"".,On the client, make a JSON object that describes the numbers of rows you want to return.,Before you send the request to the server, convert the JSON object into a 
string and send it as a parameter to the url of the PHP page:,Take a look at the PHP file:,When sending data to the server, it is often best to use the HTTP , method.,To send AJAX requests using the , method, specify the method, and the correct header.,The data sent to the server must now be an argument to the , method:,The only difference in the PHP file is the method for getting the transferred data.","Define an object containing a ""limit"" property and value.,Convert the object into a JSON string.,Send a request to the PHP file, with the JSON string as a parameter.,Wait until the request returns with the result (as JSON),Display the result received from the PHP file.,Convert the request into an object, using the PHP function
  ,.,Access the database, and fill an array with the requested data.,Add the array to an object, and return the object as JSON using 
the , function.","
  <?php,$myObj->name = ""John"";,$myObj->age = 30;,$myObj->city = ""New 
  York"";,$myJSON = json_encode($myObj);,echo $myJSON;,?>,
  <?php,$myArr = array(""John"", ""Mary"", ""Peter"", ""Sally"");,$myJSON = json_encode($myArr);,echo $myJSON;,?>,
  <?php,header(""Content-Type: application/json; charset=UTF-8"");,$obj = 
  json_decode($_GET[""x""], false);,
  ,$conn = new mysqli(""myServer"", ""myUser"", ""myPassword"", ""Northwind"");,
  $stmt = $conn->prepare(""SELECT name FROM customers LIMIT ?"");,$stmt->bind_param(""s"", $obj->limit);,$stmt->execute();,$result = $stmt->get_result();,
  $outp = $result->fetch_all(MYSQLI_ASSOC);,echo json_encode($outp);,?>,
  <?php,header(""Content-Type: application/json; charset=UTF-8"");,
  ,
  ,$conn = new mysqli(""myServer"", ""myUser"", ""myPassword"", ""Northwind"");,
  $stmt = $conn->prepare(""SELECT name FROM customers LIMIT ?"");,$stmt->bind_param(""s"", 
  $obj->limit);,$stmt->execute();,$result = $stmt->get_result();,
  $outp = $result->fetch_all(MYSQLI_ASSOC);,echo json_encode($outp);,?>",
JSON Server,,"Sending Data,Receiving Data,JSON From a Server,Array as JSON","Example,Example,Example,Example","A common use of JSON is to exchange data to/from a web server.,When receiving data from a web server, the data is always a string.,Parse the data with ,, and the data becomes a JavaScript object.,If you have data stored in a JavaScript object, you can convert the object 
into JSON, and send it to a server:,If you receive data in JSON format, you can easily convert it into a JavaScript 
object:,You can request JSON from the server by using an AJAX request,As long as the response from the server is written in JSON format, you can 
parse the string into a JavaScript object.,When using the , on JSON derived from an array, the method will 
return a JavaScript array, instead of a JavaScript object.",,,
JSON,.stringify(),"Stringify a JavaScript Object,Stringify a JavaScript Array,Storing Data,Exceptions","Example,Example,Example,Example,Example,Example","A common use of JSON is to exchange data to/from a web server.,When sending data to a web server, the data has to be 
a string.,Convert a JavaScript object into a string with ,.,Imagine we have this object in JavaScript:,Use the JavaScript function , to convert it into a string., is now a string, and ready to be sent to a server:,You will learn how to send JSON to a server in the next chapters.,It is also possible to stringify JavaScript arrays:,Imagine we have this array in JavaScript:,Use the JavaScript function , to convert it into a string., is now a string, and ready to be sent to a server:,You will learn how to send a JSON string to a server in the next chapters.,When storing data, the data has to be a certain format, and regardless of where you choose to store it, 
, is always one of the legal formats.,JSON makes it possible to store JavaScript objects as text.,In JSON, date objects are not allowed. The , function will convert 
any dates into strings.,You can convert the string back into a date object at the receiver.,In JSON, functions are not allowed as object values.,The , function will remove any functions from a JavaScript 
object, both the key and the value:,This can be omitted if you convert your functions into strings before running 
the , function.",,,
JSON Array Literals,,"JavaScript Arrays,Accessing Array Values,Arrays in Objects,Looping Through an Array","Example,Example,Example,Example,Example,Example,Example","This is a JSON string:,Inside the JSON string there is a JSON array literal:,Arrays in JSON are almost the same as arrays in JavaScript.,In JSON, array values must be of type string, number, object, array, boolean 
or ,.,In JavaScript, array values can be all of the above, plus any other valid 
JavaScript expression, including functions, dates, and ,You can create a JavaScript array from a literal:
,You can create a JavaScript array by parsing a JSON string:
,You access array values by index:,Objects can contain arrays:,You access array values by index:,You can access array values by using a , loop:,Or you can use a , loop:",,,
JSON Object Literals,,"JavaScript Objects,Accessing Object Values,Looping an Object","Example,Example,Example,Example,Example,Example","This is a JSON string:,Inside the JSON string there is a JSON object literal:,JSON object literals are surrounded by curly braces {}.,JSON object literals contains key/value pairs.,Keys and values are separated by a colon.,Keys must be strings, 
and values must be a valid JSON data type:
,Each key/value pair is separated by a comma.,You can create a JavaScript object from a JSON object literal:
,Normally, you create a JavaScript object by parsing a JSON string:
,You can access object values by using dot (.) notation:,You can also access object values by using bracket ([]) notation:,You can loop through object properties with a for-in loop:,In a for-in loop, use the bracket notation to access the property ,:","string,number,object,array,boolean,null",,
JSON,.parse(),"Example - Parsing JSON,Array as JSON,Exceptions","Example,Example,Example,Example,Example","A common use of JSON is to exchange data to/from a web server.,When receiving data from a web server, the data is always a string.,Parse the data with ,, and the data becomes a JavaScript object.,Imagine we received this text from a web server:,Use the JavaScript function , to convert text into a JavaScript object:,Use the JavaScript object in your page:,When using the , on a JSON derived from an array, the method will 
return a JavaScript array, instead of a JavaScript object.,Date objects are not allowed in JSON.,If you need to include a date, write it as a string.,You can convert it back into a date object later:,Or, you can use the second parameter, of the , function, called ,.,The , parameter is a function that checks each property, 
before returning the value.,Functions are not allowed in JSON.,If you need to include a function, write it as a string.,You can convert it back into a function later:",,"

<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML = obj.name;,
</script>",
JSON ,Data Types,"Valid Data Types,JSON Strings,JSON Numbers,JSON Objects,JSON Arrays,JSON Booleans,JSON null","Example,Example,Example,Example,Example,Example","In JSON, values must be one of the following data types:,Strings in JSON must be written in double quotes.,Numbers in JSON must be an integer or a floating point.,Values in JSON can be objects.,Values in JSON can be arrays.,Values in JSON can be true/false.,Values in JSON can be null.","a string,a number,an object (JSON object),an array,a boolean,a function,a date",,
JSON ,vs XML," JSON is Like XML Because,JSON is Unlike XML Because,Why JSON is Better Than XML","JSON Example,XML Example","Both JSON and XML can be used to receive data from a web server.,The following JSON and XML examples both define an employees object, with an array of 3 employees:,The biggest difference is:, XML has to be parsed with an XML parser. JSON can be parsed by a 
standard JavaScript function. ,For AJAX applications, JSON is faster and easier than XML:,Using XML,Using JSON","Both JSON and XML are ""self describing"" (human readable),Both JSON and XML are hierarchical (values within values),Both JSON and XML can be parsed and used by lots of programming languages,Both JSON and XML can be fetched with an XMLHttpRequest ,JSON doesn't use end tag,JSON is shorter,JSON is quicker to read and write,JSON can use arrays,Fetch an XML document,Use the XML DOM to loop through the document,Extract values and store in variables,Fetch a JSON string,JSON.Parse the JSON string","
<employees>,  <employee>,
    <firstName>John</firstName> <lastName>Doe</lastName>,
  </employee>,
  <employee>,
      <firstName>Anna</firstName> <lastName>Smith</lastName>,
    </employee>,
  <employee>,
      <firstName>Peter</firstName> <lastName>Jones</lastName>,
    </employee>,
</employees>,
",
JSON ,Syntax,"JSON Syntax Rules,JSON Data - A Name and a Value,JSON - Evaluates to JavaScript Objects,JSON Values,JavaScript Objects,JavaScript Arrays as JSON,JSON Files","Example,JSON,JavaScript,JSON,JavaScript,Example,Example,Example,Example,Example","The JSON syntax is a subset of the JavaScript syntax.,JSON syntax is derived from JavaScript object notation syntax:,JSON data is written as name/value pairs (aka key/value pairs).,A name/value pair consists of a field name (in double quotes), 
followed by a colon, followed by a value:,The JSON format is almost identical to JavaScript objects.,In JSON, , must be strings, written with double quotes:,In JavaScript, keys can be strings, numbers, or identifier names:,
,In ,, , must be one of the following data types:,In , values can be all of the above, plus any other valid JavaScript 
expression, including:,In JSON, , must be written with double quotes:,In JavaScript, you can write string values with double , single quotes:,Because JSON syntax is derived from JavaScript object notation, very little extra 
software is needed to work with JSON within JavaScript.,With JavaScript you can create an object and assign data to 
it, like this:,You can access a JavaScript object like this:,It can also be accessed like this:,Data can be modified like this:,It can also be modified like this:,You will learn how to convert JavaScript objects into JSON later in this 
tutorial. ,The same way JavaScript objects can be written as JSON, JavaScript arrays can 
also be written as JSON.,You will learn more about objects and arrays later in this tutorial.","Data is in name/value pairs,Data is separated by commas,Curly braces hold objects,Square brackets hold arrays,a string,a number,an object,an array,a boolean,null,a function,a date,undefined,The file type for JSON files is "".json"",The MIME type for JSON text is ""application/json""",,
JSON ,- Introduction,"JSON Example,What is JSON?,Why Use JSON?,Storing Data",,"This example is a JSON string:,It defines an object with 3 properties:,Each property has a value.,If you parse the JSON string with a JavaScript program, you can access the data
as an object:,The JSON format was originally specified by
,.,The JSON format is syntactically similar to the code for creating 
JavaScript objects.
Because of this, a JavaScript program 
can easily convert JSON data into JavaScript objects.,Since the format is text only, JSON data can easily be sent between computers,
and used by any programming language.,JavaScript has a built in function for converting JSON strings into JavaScript objects:,JavaScript also has a built in function for converting an object into a JSON string:,When storing data, the data has to be a certain format, and regardless of where you choose to store it, 
, is always one of the legal formats.,JSON makes it possible to store JavaScript objects as text.","name,age,car,JSON stands for ,ava,cript ,bject ,otation,JSON is a lightweight data-interchange format,JSON is plain text written in JavaScript object notation,JSON is used to send data between computers,JSON is language independent ",,
AJAX ,Examples,,,,,,
XML ,Applications,"The XML Document Used,Display XML Data in an HTML Table,Display the First CD in an HTML div Element,Navigate Between the CDs,Show Album Information When Clicking On a CD","Example,Example,Example,Example","This chapter demonstrates some HTML applications using 
XML, HTTP, DOM, and JavaScript.,In this chapter we will use the XML file called ,.,This example loops through each <CD> element, and displays the values of the <ARTIST> and the 
<TITLE> elements in an HTML table:,For more information about using JavaScript and the XML DOM, go to
,This example uses a function to display the first CD element in an HTML element with id=""showCD"":,To navigate between the CDs in the example above, create a 
, and , function:,
The last example shows how you can show album information when the user clicks on a CD:",,"
<table id=""demo""></table>,
,
<script>,
function loadXMLDoc() {,
  const xmlhttp = new XMLHttpRequest();,
  xmlhttp.onload = function() {,
    const xmlDoc = xml.responseXML;,
    const cd = xmlDoc.getElementsByTagName(""CD"");,
    myFunction(cd);,
  },
  xmlhttp.open(""GET"", ""cd_catalog.xml"");,  
xmlhttp.send();,
},
,
function myFunction(cd) {,
  let table=""<tr><th>Artist</th><th>Title</th></tr>"";,
  for (let i = 0; i < cd.length; i++) {,
    table += ""<tr><td>"" +,    cd[i].getElementsByTagName(""ARTIST"")[0].childNodes[0].nodeValue 
 +,    ""</td><td>"" +,    cd[i].getElementsByTagName(""TITLE"")[0].childNodes[0].nodeValue 
 +,    ""</td></tr>"";,  },  
 document.getElementById(""demo"").innerHTML = table;,},</script>,
,
</body>,
</html>",
AJAX ,Database Example,"AJAX Database Example,Example Explained - The showCustomer() Function,The AJAX Server Page","Example,showCustomer","AJAX can be used for interactive communication with a database.,The following example will demonstrate how a web page can fetch 
information from a database with AJAX:,When a user selects a customer in the dropdown list above, a function called , is executed. The 
function is triggered by the , event:,The , function does the following:,The page on the server called by the JavaScript above is a PHP file called ""getcustomer.php"".,The source code in ""getcustomer.php"" runs a query against a database, and returns the result in an HTML 
table:","Check if a customer is selected,Create an XMLHttpRequest object,Create the function to be executed when the server response is ready,Send the request off to a file on the server,Notice that a parameter (q) is added to the URL (with the content of the dropdown list)",,
AJAX ,ASP Example,"AJAX ASP Example,Example Explained,The ASP File - ""gethint.asp""","Example,Example","AJAX is used to create more interactive applications.,The following example will demonstrate how a web page can communicate with a 
web server while a user type characters in an input field:,In the example above, when a user types a character in the input field, a function 
called , is executed.,The function is triggered by the , event.,Here is the code:,Code explanation:,First, check if the input field is empty (str.length == 0). If it is, clear the 
content of the txtHint placeholder and exit the function.,However, if the input field is not empty, do the following:,The ASP file checks an array of names, and returns the corresponding name(s) to the 
browser:","Create an XMLHttpRequest object,Create the function to be executed when the server response is ready,Send the request off to an ASP file (gethint.asp) on the server,Notice that q parameter is added gethint.asp?q=""+str,The str variable holds the content of the input field","
<p>Start typing a name in the input field below:</p>,
<p>Suggestions: <span id=""txtHint""></span></p>,
<form>,
First name: <input type=""text"" onkeyup=""showHint(this.value)"">,</form>,
<script>,
function showHint(str) {,
  if (str.length == 0) { ,
    document.getElementById(""txtHint"").innerHTML = """";,
    return;,
  } else {,
    const xmlhttp = new XMLHttpRequest();,
    xmlhttp.onload = function() {,
      document.getElementById(""txtHint"").innerHTML = this.responseText;,
    },
  xmlhttp.open(""GET"", ""gethint.asp?q="" + str);,
  xmlhttp.send();,
  },
},
</script>
",
AJAX ,PHP Example,"AJAX PHP Example,Example Explained,The PHP File - ""gethint.php""","Example,Example","AJAX is used to create more interactive applications.,The following example demonstrates how a web page can communicate with a 
web server while a user types characters in an input field:,In the example above, when a user types a character in the input field, a function 
called , is executed.,The function is triggered by the , event.,Here is the code:,Code explanation:,First, check if the input field is empty (str.length == 0). If it is, clear the 
content of the txtHint placeholder and exit the function.,However, if the input field is not empty, do the following:,The PHP file checks an array of names, and returns the corresponding name(s) to the 
browser:","Create an XMLHttpRequest object,Create the function to be executed when the server response is ready,Send the request off to a PHP file (gethint.php) on the server,Notice that q parameter is added gethint.php?q=""+str,The str variable holds the content of the input field","
<p>Start typing a name in the input field below:</p>,
<p>Suggestions: <span id=""txtHint""></span></p>,
<form>,
First name: <input type=""text"" onkeyup=""showHint(this.value)"">,</form>,
<script>,
function showHint(str) {,
  if (str.length == 0) { ,
    document.getElementById(""txtHint"").innerHTML = """";,
    return;,
  } else {,
    const xmlhttp = new XMLHttpRequest();,
    xmlhttp.onload = function() {,
      document.getElementById(""txtHint"").innerHTML = this.responseText;,
    },
  xmlhttp.open(""GET"", ""gethint.php?q="" + str);,
  xmlhttp.send();,
  },
},
</script>
",
AJAX ,XML Example,"AJAX XML Example,Example Explained,The XML File",Example,"AJAX can be used for interactive communication with an XML file.,The following example will demonstrate how a web page can fetch information 
from an XML file with AJAX:,When a user clicks on the ""Get CD info"" button above, the , 
function is executed.,The , function creates an , object, adds the function 
to be executed when the server response is ready, and sends the request off to the server.,When the server response is ready, an HTML 
table is built, nodes (elements) are extracted from the XML file, and it finally updates the 
element ""demo"" with the HTML table filled with XML data:,The XML file used in the example above looks like this: "","".",,,
JavaScript Fetch API,,"Browser Support,A Fetch API Example","Example,Example,Example","The numbers in the table specify the first browser versions that fully support Fetch API:,The example below fetches a file and displays the content:,Since Fetch is based on async and await, the example above might be easier to understand like this:,Or even bettter: Use understandable names instead of x and y:",,,
Web Storage API,,"The localStorage Object,The setItem() Method,The getItem() Method,The sessionStorage Object,The setItem() Method,The getItem() Method,Storage Object Properties and Methods,Related Pages for Web Storage API","Example,Example,Example,Example,Example,Example","The Web Storage API is a simple syntax for storing and retrieving data in the browser.
It is very easy to use:,The Web Storage API is supported in all browsers:,The localStorage object provides access to a local storage for a particular Web Site.
It allows you to store, read, add, modify, and delete data items for that domain.,The data is stored with no expiration date, and will not be deleted when the browser is closed.,The data will be available for days, weeks, and years.,The localStorage.setItem() method stores a data item in a storage.,It takes a name and a value as parameters:,The localStorage.getItem() method retrieves a data item from the storage.,It takes a name as parameter:,The sessionStorage object is identical to the localStorage object.,The difference is that the sessionStorage object stores data for one session.,The data is deleted when the browser is closed.,The sessionStorage.setItem() method stores a data item in a storage.,It takes a name and a value as parameters:,The sessionStorage.getItem() method retrieves a data item from the storage.,It takes a name as parameter:",,,
AJAX - Server ,Response,"Server Response Properties,The responseText Property,The responseXML Property,Server Response Methods,The getAllResponseHeaders() Method,The getResponseHeader() Method","Example,Example,Example,Example","The , property returns the server response as a 
JavaScript string, and you can use it accordingly:,The XMLHttpRequest object has an in-built XML parser.,The , property returns the server response as an XML DOM object.,Using this property you can parse the response as an XML DOM object:,The , method returns all header information from the server response.,The , method returns specific header information from the server response.",,,
Web History API,,"The History back() Method,The History go() Method,History Object Properties,History Object Methods","Example,Example","The Web History API is supported in all browsers:,The back() method loads the previous URL in the windows.history list.,It is the same as clicking the ""back arrow"" in your browser.,
,The go() method loads a specific URL from the history list:",,"
<button onclick=""myFunction()"">Go Back</button>,
,<script>,
function myFunction() {,
  window.history.back();,
  },
</script>
,
 <button onclick=""myFunction()"">Go Back 2 Pages</button>,
 ,<script>,
function myFunction() {,
  window.history.go(-2);,
 },
</script>,
",
JavaScript ,Validation API,"Constraint Validation DOM Methods,Constraint Validation DOM Properties,Validity Properties,Examples","The checkValidity() Method,The rangeOverflow Property,The rangeUnderflow Property","If an input field contains invalid data, display a message:,The , of an input element contains a number 
of properties related to the validity of data: ,If the number in an input field is greater than 100 (the input's , 
attribute), display a message:,If the number in an input field is less than 100 (the input's , attribute), display a message:",,"
 <input id=""id1"" type=""number"" min=""100"" max=""300"" 
    required>,<button onclick=""myFunction()"">OK</button>,<p id=""demo""></p>,<script>,
 function myFunction() {,  const inpObj = document.getElementById(""id1"");,  if (!inpObj.checkValidity()) {,    document.getElementById(""demo"").innerHTML = inpObj.validationMessage;,
    },},</script>,
 <input id=""id1"" type=""number"" max=""100"">,<button onclick=""myFunction()"">OK</button>,
<p id=""demo""></p>,
<script>,
function myFunction() {,  let text = ""Value OK"";,
    if (document.getElementById(""id1"").validity.rangeOverflow) {,
      text = ""Value too large"";,
    },
},
</script>
,
 <input id=""id1"" type=""number"" min=""100"">,
<button onclick=""myFunction()"">OK</button>,
<p id=""demo""></p>,<script>,
function myFunction() {,  let text =  = ""Value OK"";,
    if (document.getElementById(""id1"").validity.rangeUnderflow) {,
      text = ""Value too small"";,
    },
},</script>,
 ",
Web APIs - Introduction,,"What is Web API?,Browser APIs,Third Party APIs",Example,"API stands for ,pplication ,rogramming ,nterface.,A Web API is an application programming interface for the Web.,A Browser API can extend the functionality of a web browser.,A Server API can extend the functionality of a web server.,All browsers have a set of built-in Web APIs 
to support complex operations, and to help accessing data.,For example, the Geolocation API can return the coordinates of where the browser is located.,Third party APIs are not built into your browser.,To use these APIs, you will have to download the code from the Web.,Examples:","It can extend the functionality of the browser,It can greatly simplify complex functions,It can provide easy syntax to complex code,YouTube API - Allows you to display videos on a web site.,Twitter API - Allows you to display Tweets on a web site.,Facebook API - Allows you to display Facebook info on a web site.",,
JavaScript ,Cookies,"What are Cookies?,Create a Cookie with JavaScript,Read a Cookie with JavaScript,Change a Cookie with JavaScript,Delete a Cookie with JavaScript,The Cookie String,JavaScript Cookie Example,A Function to Set a Cookie,A Function to Get a Cookie,A Function to Check a Cookie,All Together Now","Example,Example,Example,Example","Cookies let you store user information in web pages.,Cookies are data, stored in small text files, on your computer.,When a web server has sent a web page to a browser, the connection is 
shut down, and the server forgets everything about the user.,Cookies were invented to solve the problem ""how to remember information about 
the user"":,Cookies are saved in name-value pairs like:,When a browser requests a web page from a server, cookies belonging to the page are added to the request. This way the server 
gets the necessary data to ""remember"" information about users.,JavaScript can create, read, and delete cookies with the , 
property.,With JavaScript, a cookie can be created like this:,You can also add an expiry date (in UTC time).
By default, the cookie is deleted when the browser is closed:,With a path parameter, you can tell the browser what path the cookie belongs to.
By default, the cookie belongs to the current page.,With JavaScript, cookies can be read like this:,With JavaScript, you can change a cookie the same way as you create it:,The old cookie is overwritten.,Deleting a cookie is very simple.,You don't have to specify a cookie value when you delete a cookie.,Just set the expires parameter to a past date:,The , property looks like a normal text string. But it is not.,Even if you write a whole cookie string to document.cookie, when you read it out again, you can only see the 
name-value pair of it.,If you set a new cookie, older cookies are not overwritten.
The new cookie is added to document.cookie, so if you read document.cookie 
again you will get something like:,cookie1 = value; cookie2 = value;,
, 
, 
,
, 
,

,If you want to find the value of one specified cookie, you must write a JavaScript 
function that searches for the cookie value in the cookie string.,In the example to follow, we will create a cookie that stores the name of a visitor.,The first time a visitor arrives to the web page, he/she will be asked to fill in his/her name. The name is then stored in a cookie.,The next time the visitor arrives at the same page, he/she will get a welcome message.,For the example we will create 3 JavaScript functions:,First, we create a , that stores the name of the visitor in a cookie variable:,The parameters of the function above are the name of the cookie (cname), the value of the cookie 
(cvalue), and the number of days until the cookie should expire (exdays).,The function sets a cookie by adding together the cookiename, the cookie 
value, and the expires string.,Then, we create a , that returns the value of a specified cookie:,Take the cookiename as parameter (cname).,Create a variable (name) with the text to search for (cname + ""="").,Decode the cookie string, to handle cookies with special characters, e.g. '$',Split document.cookie on semicolons into an array called ca (ca = 
decodedCookie.split(';')).,Loop through the ca array (i = 0; i < ca.length; i++), and read out each value 
c = ca[i]).,If the cookie is found (c.indexOf(name) == 0), return the value of the cookie 
(c.substring(name.length, c.length).,If the cookie is not found, return """".,Last, we create the function that checks if a cookie is set.,If the cookie is set it will display a greeting.,If the cookie is not set, it will display a prompt box, asking for the name of the user,
and stores the username cookie for 365 days, by calling the , function:,The example above runs the , function when the page loads.","When a user visits a web page, his/her name can be stored in a cookie.,Next time the user visits the page, the cookie ""remembers"" his/her name.",,
Web Geolocation API,,"Locate the User's Position,Using the Geolocation API,Handling Errors and Rejections,Displaying the Result in a Map,Location-specific Information,The getCurrentPosition() Method - Return Data,Geolocation Object - Other interesting Methods","Example,Example,Example,Example","The HTML Geolocation API is used to get the geographical position of a user.,Since this can compromise privacy, the position is not available unless the user approves it.,The Geolocation API is supported in all browsers:,The , method is used to return the user's position.,The example below returns the latitude and longitude of the user's position:,Example explained:,The example above is a very basic Geolocation script, with no error handling.,The second parameter of the , method is used to handle 
errors. It specifies a function to run if it fails to get the user's location:,To display the result in a map, you need access to a map service, like Google 
Maps.,In the example below, the returned latitude and longitude is used to show the location in a Google 
Map (using a static image):,This page has demonstrated how to show a user's position on a map.,Geolocation is also very useful for location-specific information, like:,The , method returns an object on success. The latitude, 
longitude and accuracy properties are always returned. The other properties are returned 
if available:,The Geolocation object also has other interesting methods:,The example below shows the , method. You need an accurate GPS device to test this (like 
smartphone): ","Check if Geolocation is supported,If supported, run the getCurrentPosition() method. If not, display a message to the user,If the getCurrentPosition() method is successful, it returns a coordinates object to the function specified in the parameter (showPosition),The showPosition() function outputs the Latitude and Longitude,Up-to-date local information,Showing Points-of-interest near the user,Turn-by-turn navigation (GPS), - Returns the current position of the user and continues to 
return updated position as the user moves (like the GPS in a car)., - Stops the , method.","
 <script>,const x = document.getElementById(""demo"");,function getLocation() {,  if (navigator.geolocation) {,
      navigator.geolocation.getCurrentPosition(showPosition);,  } else {,
      x.innerHTML = ""Geolocation is not supported by this browser."";,
    },},
 function showPosition(position) {,  x.innerHTML = ""Latitude: "" + position.coords.latitude + ,  ""<br>Longitude: "" + position.coords.longitude; ,
 },</script>,
 <script>,const x = document.getElementById(""demo"");,function getLocation() {,
    if (navigator.geolocation) {,    navigator.geolocation.watchPosition(showPosition);,  } else {,
      x.innerHTML = ""Geolocation is not supported by this browser."";,
    },},
 function showPosition(position) {,  x.innerHTML = ""Latitude: "" + position.coords.latitude + ,  ""<br>Longitude: "" + position.coords.longitude; ,
 },</script>",
JavaScript ,Timing Events,"Timing Events,The setTimeout() Method,How to Stop the Execution?,The setInterval() Method,How to Stop the Execution?,More Examples","Example,Example,Example,Example","The , object allows execution of code at specified time intervals.,These time intervals are called timing events.,The two key methods to use with JavaScript are:,The , method can be written without the window prefix.,The first parameter is a function to be executed.,The second parameter indicates the number of milliseconds before execution. ,The , method stops the execution of the function 
specified in setTimeout().,The , method can be written without the window prefix.,The , method uses the variable 
returned from ,:,If the function has not already been executed, you can stop the execution by calling the , 
method:,The , method repeats a given function at every given 
time-interval.,The , method can be written without the window prefix.,The first parameter is the function to be executed.,The second parameter indicates the length of the time-interval between each 
execution.,This example executes a function called ""myTimer"" once every second (like a digital 
watch).,The , method stops the executions of the function 
specified in the setInterval() method.,The , method can be written without the window prefix.,The , method uses the variable returned from ,:","),Executes a function, after waiting a specified number of milliseconds.,),Same as setTimeout(), but repeats the execution 
    of the function continuously.","
 <button onclick=""setTimeout(myFunction, 3000)"">Try it</button>,
    <script>,function myFunction() {,  alert('Hello');,
    },</script>,
 <button onclick=""myVar = setTimeout(myFunction, 3000)"">Try it</button>,<button onclick=""clearTimeout(myVar)"">Stop it</button>,
 <p id=""demo""></p>,<button onclick=""clearInterval(myVar)"">Stop time</button>,
 ,<script>,
let myVar = setInterval(myTimer, 1000);,
 function myTimer() {,  const d = new Date();,  document.getElementById(""demo"").innerHTML = d.toLocaleTimeString();,},</script>",
JavaScript ,Popup Boxes,"Alert Box,Confirm Box,Prompt Box,Line Breaks","Example,Example,Example,Example","JavaScript has three kind of popup boxes: Alert box, Confirm box, and Prompt box.,An alert box is often used if you want to make sure information comes through to the user.,When an alert box pops up, the user will have to click ""OK"" to proceed. ,The , method can be written without the window 
prefix.,A confirm box is often used if you want the user to verify or accept something.,When a confirm box pops up, the user will have to click either ""OK"" or ""Cancel"" to proceed. ,If the user clicks ""OK"", the box returns ,. If the user clicks ""Cancel"", the box returns
,.,The , method can be written without the window prefix.,A prompt box is often used if you want the user to input a value before entering a page.,When a prompt box pops up, the user will have to click either ""OK"" or ""Cancel"" 
to proceed after entering an input value. ,If the user clicks ""OK"" the box returns the input value. If the user clicks ""Cancel"" the box returns null.,The , method can be written without the window prefix.,To display line breaks inside a popup box, use a back-slash followed by the character n.",,,
JavaScript ,Window History,"Window History,Window History Back,Window History Forward","Example,Example","The , object contains the 
browsers history.,The , object can be written without the window prefix.,To protect the privacy of the users, there are limitations to how JavaScript 
can access this object.,Some methods:,The , method loads the previous URL in the history list.,This is the same as clicking the Back button in the browser.,The , method loads the next URL in the history list.,This is the same as clicking the Forward button in the browser."," - same as clicking back in the browser, - same as clicking forward in the browser","
<html>,
<head>,
<script>,
function goBack() {,
  window.history.back(),
 },
</script>,
</head>,
<body>,
,
<input type=""button"" value=""Back"" onclick=""goBack()"">,
,
</body>,
</html>,
<html>,
<head>,
<script>,
function goForward() {,
  window.history.forward(),
 },
</script>,
</head>,
<body>,
,
<input type=""button"" value=""Forward"" onclick=""goForward()"">,
,
</body>,
</html>",
JavaScript ,Window Navigator,"Window Navigator ,Browser Cookies,Browser Application Name,Browser Application Code Name,The Browser Engine,The Browser Version,The Browser Agent,Warning !!!,The Browser Platform,The Browser Language,Is The Browser Online?,Is Java Enabled?","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","The , object contains information about the 
visitor's browser.,The , object can be written without the window prefix.,Some examples:,The , property returns true if cookies are enabled, otherwise 
false:,The , property returns the application name 
of the browser:,The , property returns the application code name 
of the browser:,The , property returns 
the product name of the browser engine:,The , property returns 
version information about the browser:,The , property returns the user-agent header sent by the browser to the server:,The information from the navigator object can often be misleading, and should 
not be used to detect browser versions because:,The , property returns the browser platform 
(operating system):,The , property returns the browser's language:,The , property returns true if the browser is online:,The , method returns true if , is enabled:","Different browsers can use the same name,The navigator data can 
be changed by the browser owner,Some browsers misidentify themselves to bypass site tests,Browsers cannot report new operating systems, released later than the browser","
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML =,""cookiesEnabled is "" + navigator.cookieEnabled;,
</script>,
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML =,""navigator.appName is "" + navigator.appName;,
</script>,
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML =,
 ""navigator.appCodeName is "" + navigator.appCodeName;,
</script>,
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML =,
 ""navigator.product is "" + navigator.product;,
</script>,
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML = navigator.appVersion;,
</script>,
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML = navigator.userAgent;,
</script>,
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML = navigator.platform;,
</script>,
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML = navigator.language;,
</script>,
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML = navigator.onLine;,
</script>,
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML = navigator.javaEnabled();,
</script>",
JavaScript ,Window Location,"Window Location,Window Location Href,Window Location Hostname,Window Location Pathname,Window Location Protocol,Window Location Port,Window Location Assign","Example,Example,Example,Example,Example,Example","The , object can be used to get 
the current page address (URL) and to redirect the browser to a new page.,The , object can be written without the window prefix.,Some examples:,The , property returns the URL of the current page.,The , property returns the name of the internet host (of the current page).,The , property returns the pathname of 
the current page.,The , property returns the web protocol of the page.,The , property returns the number of the internet host 
port (of the current page).,The , method loads a new document."," returns the href (URL) of the current page, returns the domain name of the web host, returns the path and filename of the current page, returns the web protocol used (http: or https:), loads a new document","
<html>,
<head>,
<script>,
function newDoc() {,  window.location.assign(""https://www.w3schools.com""),
 },
</script>,
</head>,
<body>,
,
<input type=""button"" value=""Load new document""
onclick=""newDoc()"">,
,
</body>,
</html>
",
AJAX ,Introduction,"AJAX Example Explained,What is AJAX?,How AJAX Works,Modern Browsers (Fetch API)","AJAX Example,HTML Page,Function loadDoc()","The HTML page contains a <div> section and a <button>.,The <div> 
section is used to display information from a server.,The <button> calls a function (if it is clicked).,The function requests data from a web 
server and displays it:,AJAX = ,synchronous ,avaScript ,nd
,ML.,AJAX is not a programming language.,AJAX just uses a combination of:,AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes.
This means that it is possible to update parts of a web page, without reloading the whole page.,Modern Browsers can use Fetch API instead of the XMLHttpRequest Object.,The Fetch API interface allows web browser to make HTTP requests to web servers.,If you use the XMLHttpRequest Object, Fetch can do the same in a simpler way.","Read data from a web server - after the page has loaded,Update a web page without reloading the page,Send data to a web server - in the background,A browser built-in , object (to request data from a web server),JavaScript and HTML DOM (to display or use the data),1. An event occurs in a web page (the page is loaded, a button is clicked),2. An XMLHttpRequest object is created by JavaScript,3. The XMLHttpRequest object sends a request to a web server,4. The server processes the request,5. The server sends a response back to the web page,6. The response is read by JavaScript,7. Proper action (like page update) is performed by JavaScript ","
<!DOCTYPE html>,<html>,
<body>,
<div id=""demo"">,  <h2>Let AJAX change this text</h2>, 
<button type=""button"" onclick=""loadDoc()"">Change Content</button>,
 </div>,
</body>,
</html>
",
JavaScript ,Window Screen,"Window Screen,Window Screen Width,Window Screen Height,Window Screen Available Width,Window Screen Available Height,Window Screen Color Depth,Window Screen Pixel Depth","Example,Example,Example,Example,Example,Example","The window.screen object contains information 
about the user's screen.,The , object can be written without the window prefix.,Properties:,The , property returns the width of the visitor's screen in 
pixels.,The , property returns the height of the visitor's screen in pixels.,The , property returns the width of the visitor's screen, in 
pixels, 
minus interface features like the Windows Taskbar.,The , property returns the height of the visitor's screen, 
in pixels, minus interface features like the Windows Taskbar.,The , property returns the number of bits used to display one color.,All modern computers use 24 bit or 32 bit hardware for color resolution:,Older computers used 16 bits: 65,536 different ""High Colors"" resolution.,Very old computers, and old cell phones used 8 bits: 256 different ""VGA colors"".,The , property returns the pixel depth of the screen.","24 bits =      16,777,216 different ""True Colors"",32 bits = 4,294,967,296 different ""Deep Colors""",,
JavaScript ,HTML DOM Node Lists,"The HTML DOM NodeList Object,HTML DOM Node List Length,The Difference Between an HTMLCollection and a NodeList","Example,Example,Example","A , object is a list (collection) of nodes extracted from a 
document.,A , object is almost the same as an , object.,Some (older) browsers return a NodeList object instead of an HTMLCollection 
for methods like ,.,All browsers return a NodeList object for the property ,.  ,Most browsers return a NodeList object for the method ,.,The following code selects all , nodes in a document:, The index starts at 0.,The , property defines the number of nodes in a node list:,The , property is useful when you want to loop through the nodes in a node 
list:,An , (previous chapter) is a collection of HTML elements.,A , is a collection of document nodes.,A NodeList and an HTML collection is very much the same thing. ,Both an HTMLCollection object and a NodeList object is 
an array-like list (collection) of objects.,Both have a length property defining the number of items in the list 
(collection).,Both provide an index (0, 1, 2, 3, 4, ...) to access each item like an array.,HTMLCollection items 
can be accessed by their name, id, or index number.,NodeList items can only be accessed by their index number.,Only the NodeList object can contain attribute nodes and text nodes.",,,
JavaScript H,TML DOM Collections,"The HTMLCollection Object,HTML HTMLCollection Length","Example,Example,Example","The , method returns an , object.,An , object is 
an array-like list (collection) of HTML elements.,The following code selects all , elements in a document:, The index starts at 0.,The , property defines the number of elements in an ,:,The , property is useful when you want to loop through the elements in a 
collection:",,,
AJAX - The XMLHttpRequest Object,,"The XMLHttpRequest Object,Create an XMLHttpRequest Object,Define a Callback Function,Send a Request,Access Across Domains,XMLHttpRequest Object Methods,XMLHttpRequest Object Properties,The onload Property,Multiple Callback Functions,The onreadystatechange Property","Example,Example,Example,Example","All modern browsers support the , object.,The , object can be used to exchange data with a web server behind the 
scenes. This means that it is possible to update parts of a web page, without 
reloading the whole page.,All modern browsers (Chrome, Firefox, IE, Edge, Safari, Opera) have a built-in , object.,Syntax for creating an , object:,A callback function is a function passed as a parameter to another function.,In this case, the callback function should contain the code to execute when the 
response is ready.,To send a request to a server, you can use the open() and send() methods of the
, object:,For security reasons, modern browsers do not allow access across domains.,This means that both the web page and the XML file it tries to load, must be located on the same server.,The examples on W3Schools all open XML files located on the W3Schools domain.,If you want to use the example above on one of your own web pages,
the XML files you load must be located on your own server.,With the , object you can define a callback function to be executed when 
the request receives an answer.,The function is defined in the , property of the , object:,If you have more than one AJAX task in a website, you should create one function for 
executing the , object, and one callback function for each 
AJAX task.,The function call should contain the URL and what function to call when the 
response is ready.,The , property holds the status of the XMLHttpRequest.,The , property defines a callback function to be executed when the readyState changes.,The , property and the , properties hold the status of the XMLHttpRequest object.,The , function is called every time the readyState changes. ,When , is 4 and status is 200, the response is ready:",,,
JavaScript ,HTML DOM Navigation,"DOM Nodes,Node Relationships,Navigating Between Nodes,Child Nodes and Node Values,InnerHTML,DOM Root Nodes,The nodeName Property,The nodeValue Property,The nodeType Property","Example:,Example,Example,Example,Example,Example,Example,Example","With the HTML DOM, you can navigate the node tree using node 
relationships.,According to the W3C HTML DOM standard, everything in an HTML document is a node:,With the HTML DOM, all nodes in the node tree can be accessed by JavaScript.,New nodes can be created, and all 
nodes can be modified or deleted. ,The nodes in the node tree have a hierarchical relationship to each other.,The terms parent, child, and sibling are used to describe the relationships. ,From the HTML above you can read:,and:,You can use the following node properties to navigate between nodes with 
JavaScript:,The element node 
, (in the example above) does , contain text.,It contains a , with the value ""DOM Tutorial"". ,The value of the text node can be accessed by the 
node's 
, property:
,Accessing the innerHTML property is the same as accessing the , 
of the first child:,Accessing the first child can also be done like this:,All the (3) following examples retrieves the text of an , element and copies it 
into a , element:,In this tutorial we use the innerHTML property to retrieve the content of an 
HTML element.,However, learning 
the other methods above is useful for understanding the tree structure and the 
navigation of the DOM.,There are two special properties that allow access to the full document:,The , property specifies the name of a node.,The , property specifies the value of a node.,The , property is read only. It returns the type of a node.,The most important nodeType properties are:","The entire document is a document node,Every HTML element is an element node,The text inside HTML elements are text nodes,Every HTML attribute is an attribute node (deprecated),All comments are comment nodes,In a node tree, the top node is called the root (or root node),Every node has exactly one parent, except the root (which has no parent),A node can have a number of children,Siblings (brothers or sisters) are nodes with the same parent, is the root node, has no parents , is the parent of , and , is the first child of , is the last child of , has one child: , has one child (a text node): ""DOM Tutorial"", has two children: , and , has one child: ""DOM Lesson one"", has one child: ""Hello world!"", and , are siblings, - The body of the document, - The full document,nodeName is read-only,nodeName of an element node is the same as the tag name,nodeName of an attribute node is the attribute name,nodeName of a text node is always #text,nodeName of the document node is always #document,nodeValue for element nodes is ,nodeValue for text nodes is the text itself,nodeValue for attribute nodes is the attribute value","
 <title 
 id=""demo"">DOM Tutorial</title>
,
<html>,
<body>,<h1 id=""id01"">My First Page</h1>,<p id=""id02""></p>,
<script>,
 document.getElementById(""id02"").innerHTML 
 = document.getElementById(""id01"").innerHTML;,
</script>,
</body>,
</html>,
<html>,
<body>,<h1 id=""id01"">My First Page</h1>,<p id=""id02""></p>,
<script>,
 document.getElementById(""id02"").innerHTML = document.getElementById(""id01"").firstChild.nodeValue;,
</script>,
</body>,
</html>,
<html>,
<body>,<h1 id=""id01"">My First Page</h1>,<p id=""id02"">Hello!</p>,
<script>,
 document.getElementById(""id02"").innerHTML = document.getElementById(""id01"").childNodes[0].nodeValue;,
</script>,
</body>,
</html>,
<html>,
<body>,
,
<h2>JavaScript HTMLDOM</h2>,<p>Displaying document.body</p>,<p 
id=""demo""></p>,<script>,document.getElementById(""demo"").innerHTML 
= document.body.innerHTML;,</script>,
,
</body>,
</html>,
<html>,
<body>,
,
<h2>JavaScript HTMLDOM</h2>,<p>Displaying document.documentElement</p>,
,<p id=""demo""></p>,<script>,
document.getElementById(""demo"").innerHTML = 
document.documentElement.innerHTML;,</script>,
,
</body>,
</html>,
  <h1 id=""id01"">My First Page</h1>,
 <p id=""id02""></p>,<script>,document.getElementById(""id02"").innerHTML 
 = document.getElementById(""id01"").nodeName;,</script>,
 <h1 id=""id01"">My First Page</h1>,
 <p id=""id02""></p>,<script>,document.getElementById(""id02"").innerHTML 
 = document.getElementById(""id01"").nodeType;,</script>",
JavaScript ,Window - The Browser Object Model,"The Browser Object Model (BOM),The Window Object,Window Size,Other Window Methods",Example,"The Browser Object Model (BOM) allows JavaScript to ""talk to"" 
the browser.,There are no official standards for the ,rowser ,bject
,odel (BOM).,Since modern browsers have implemented (almost) the same methods and 
properties for JavaScript interactivity, it is often referred to, as methods and 
properties of the BOM.,The , object is supported by all browsers. It represents 
the browser's window.,All global JavaScript objects, functions, and variables automatically become 
members of the window object.,Global variables are properties of the window object.,Global functions are methods of the window object.,Even the document object (of the HTML DOM) is a property of the window 
object: ,is the same as:,Two properties can be used to determine the size of the browser 
window.,Both properties return the sizes in 
pixels:,Some other methods:"," - the inner height of the browser window (in pixels), - the inner width of the browser window (in pixels), - open a new window, - close the current window, - move the current window, - resize the current window",,
JavaScript ,HTML DOM EventListener,"The addEventListener() method,Syntax,Add an Event Handler to an Element,Add Many Event Handlers to the Same Element,Add an Event Handler to the window Object,Passing Parameters,Event Bubbling or Event Capturing?,The removeEventListener() method,HTML DOM Event Object Reference","Example,Example,Example,Example,Example,Example,Example,Example,Example","The , method attaches an event handler to the specified element.,The , method attaches an event handler to an element without overwriting existing event handlers.,You can add many event handlers to one element.,You can add many event handlers of the same type to one element, i.e two ""click"" events.,You can add event listeners to any DOM object not only HTML elements. i.e the window object.,The , method makes it easier to control how the event reacts to bubbling.,When using the , method, the JavaScript is separated from the HTML markup, for better readability 
and allows you to add event listeners even when you do not control the HTML markup.,You can easily remove an event listener by using the , method.,The first parameter is the type of the event (like "","" or "","" 
or any other ,.),The second parameter is the function we want to call when the event occurs. ,The third parameter is a boolean value specifying whether to use event bubbling or event capturing. This parameter is optional.,You can also refer to an external ""named"" function:,The , method allows you to add many events to the same 
element, without overwriting existing events:,You can add events of different types to the same element:,The , method allows you to add event listeners on any HTML 
DOM object such as HTML elements, the HTML document, the window object, or other 
objects that support events, like the , object.,When passing parameter values, use 
an ""anonymous function"" that calls the specified function with the parameters:,There are two ways of event propagation in the HTML DOM, bubbling and capturing.,Event propagation is a way of defining the element order when an event occurs.
If you have a <p> element inside a <div> element, and the user clicks on the <p> element, which element's 
""click"" event should be handled first?,In ,the inner most element's event is handled first and then the outer:
the <p> element's click event is handled first, then the <div> element's click event.,In ,the outer most element's event is handled first and then the inner:
the <div> element's click event will be handled first, then the <p> element's click event.,With the addEventListener() method you can specify the propagation type by using the ""useCapture"" parameter:,The default value is false, which will use the bubbling propagation, when the value is set to true, the event uses the capturing propagation.,The , method removes event handlers that have been 
attached with the addEventListener() method:,For a list of all HTML DOM events, look at our complete ,.",,,
JavaScript ,HTML DOM Elements (Nodes),"Creating New HTML Elements (Nodes),Example Explained ,Creating new HTML Elements - insertBefore(),Removing Existing HTML Elements,Example Explained ,Removing a Child Node,Example Explained ,Replacing HTML Elements "," Example,Example,Example,Example,Example","Adding and Removing Nodes (HTML Elements),To add a new element to the HTML DOM, you must create the element (element node) first, 
and then append it to an existing element. ,This code creates a new , element:,To add text to the , element, you must create a text node first. This code creates a text node:,Then you must append the text node to the , element:,Finally you must append the new element to an existing element.,This code finds an existing element:,This code appends the new element to the existing element:,The , method in the previous example, appended the new element as 
the last child of the parent.,If you don't want that you can use the , method: ,To remove an HTML element, use the , 
method:,The HTML document contains a , element with two child nodes (two , 
elements):,Find the element you want to remove:,Then execute the remove() method on that element:,For browsers that does not support the , method, you have to find the 
parent node to remove an element:,This HTML document contains a , element with two child nodes (two , 
elements):,Find the element with ,:,Find the , element with ,:,Remove the child from the parent:,Here is a common workaround: Find the child you want to remove, and use its 
, property to find the parent:,To replace an element to the HTML DOM, use the , method:",,"
<div id=""div1"">,
 
<p id=""p1"">This is a paragraph.</p>,
 
<p id=""p2"">This is another paragraph.</p>,
</div>,<script>,
const para = document.createElement(""p"");,
const node = document.createTextNode(""This is new."");,
para.appendChild(node);,
const element = document.getElementById(""div1"");,
element.appendChild(para);,
</script>
,
<div id=""div1"">,
 
<p id=""p1"">This is a paragraph.</p>,
 
<p id=""p2"">This is another paragraph.</p>,
</div>,<script>,
const para = document.createElement(""p"");,
const node = document.createTextNode(""This is new."");,
para.appendChild(node);,
const element = document.getElementById(""div1"");,
const child = document.getElementById(""p1"");,element.insertBefore(para, child);,
</script>,
<div>,
 
<p id=""p1"">This is a paragraph.</p>,
 
<p id=""p2"">This is another paragraph.</p>,
</div>,<script>,
const elmnt = document.getElementById(""p1"");
elmnt.remove();,
</script>,
<div id=""div1"">,
 
<p id=""p1"">This is a paragraph.</p>,
 
<p id=""p2"">This is another paragraph.</p>,
</div>,<script>,
const parent = document.getElementById(""div1"");,
const child = document.getElementById(""p1"");,
parent.removeChild(child);,
</script>,
<div id=""div1"">,
 
<p id=""p1"">This is a paragraph.</p>,
 
<p id=""p2"">This is another paragraph.</p>,
</div>,<script>,
const para = document.createElement(""p"");,
const node = document.createTextNode(""This is new."");,para.appendChild(node);,
 ,const parent = document.getElementById(""div1"");,const child = document.getElementById(""p1"");,parent.replaceChild(para, child);,
</script>",
JavaScript ,HTML DOM Events,"Reacting to Events,HTML Event Attributes,Assign Events Using the HTML DOM,The onload and onunload Events,The onchange Event,The onmouseover and onmouseout Events,The onmousedown, onmouseup and onclick Events,More Examples,HTML DOM Event Object Reference","Example,Example,Example,Example,Example,Example","HTML DOM allows JavaScript to react to HTML events:,A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.,To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute:,Examples of HTML events:,In this example, the content of the , element is changed when a user clicks on it:,In this example, a function is called from the event handler:,To assign events to HTML elements you can use event attributes.,In the example above, a function named , will be executed 
when the button is clicked.,The HTML DOM allows you to assign events to HTML elements using JavaScript: ,In the example above, a function named , is assigned to 
an HTML element with the ,.,The function will be executed 
when the button is clicked.,The , and , events are triggered when the user enters or leaves the page.,The , event can be used to check the visitor's browser type and browser version, and load the proper version of the web page based on the information.,The , and , events can be used to deal with cookies.,The , event is often used in combination with validation of input fields.,Below is an example of how to use the onchange. The , 
function will be called when a user changes the content of an input field.,The , and , events can be used to trigger a function when the user mouses 
over, or out of, an HTML element:,
,
,The ,, ,, and , events are all parts of a 
mouse-click. First when a mouse-button is clicked, the onmousedown event is 
triggered, then, when the mouse-button 
is released, the onmouseup event is triggered, finally, when the mouse-click is completed, the onclick event is triggered.,
,
,
Change an image when a user holds down the mouse button.,
Display an alert box when the page has finished loading.,
Change the background-color of an input field when it gets focus.,
Change the color of an element when the cursor moves over it.,For a list of all HTML DOM events, look at our complete ,.","When a user clicks the mouse,When a web page has loaded,When an image has been loaded,When the mouse moves over an element,When an input field is changed,When an HTML form is submitted,When a user strokes a key ","
<!DOCTYPE html>,<html>,
<body>,
<h1 onclick=""this.innerHTML = 'Ooops!'"">Click on this text!</h1>,
</body>,</html>
,
<!DOCTYPE html>,<html>,<body>,
<h1 onclick=""changeText(this)"">Click on this text!</h1>,
 ,<script>,
function changeText(id) {
,
  id.innerHTML = ""Ooops!"";,
},
</script>,
</body>,</html>
,
<button onclick=""displayDate()"">Try it</button>
,
<script>,
document.getElementById(""myBtn"").onclick = displayDate;,
</script>
,
<body onload=""checkCookies()"">
,
<input type=""text"" id=""fname""
onchange=""upperCase()"">",
JavaScript HTML DOM Animation,,"A Basic Web Page,Create an Animation Container,Style the Elements,Animation Code,Create the Full Animation Using JavaScript","Example,Example,Example,Example,Example","Learn to create HTML animations using JavaScript.,To demonstrate how to create HTML animations with JavaScript, we will use a simple 
web page:,All animations should be relative to a container element.,The container element should be created with style = "","".,The animation element should be created with style = "","".,JavaScript animations are done by programming gradual changes in an element's 
style.,The changes are called by a timer. When the timer interval is small, the 
animation looks continuous.,The basic code is:",,"
<!DOCTYPE html>,<html>,<body>,<h1>My First 
 JavaScript Animation</h1>,
<div id=""animation"">My animation will go here</div>,
</body>,</html>,
<div id =""container"">,  <div id =""animate"">My 
 animation will go here</div>,</div>",
JavaScript ,HTML DOM - Changing CSS,"Changing HTML Style,Using Events,More Examples,HTML DOM Style Object Reference","Example,Example","The HTML DOM allows JavaScript to change the style of HTML elements.,To change the style of an HTML element, use this syntax:,The following example changes the style of a , element:,The HTML DOM allows you to execute code when an event occurs.,Events are generated by the browser when ""things happen"" to HTML elements:,You will learn more about events in the next chapter of this tutorial.,This example changes the style of the HTML element with ,, when the 
user clicks a button:,
How to make an element invisible. Do you want to show the element or not?,For all HTML DOM style properties, look at our complete
,.","An element is clicked on,The page has loaded,Input fields are changed","
<html>,
<body>,
<p id=""p2"">Hello World!</p>,
,
<script>,
document.getElementById(""p2"").style.color = ""blue"";,
</script>,
,
</body>,
</html>
,
<!DOCTYPE html>,<html>,<body>,<h1 id=""id1"">My Heading 1</h1>,
<button type=""button"" ,onclick=""document.getElementById('id1').style.color = 'red'"">,
Click Me!</button>,</body>,</html>",
Web Workers API,,"What is a Web Worker?,Browser Support,Web Workers Example,Check Web Worker Support,Create a Web Worker File,Create a Web Worker Object,Terminate a Web Worker,Reuse the Web Worker,Full Web Worker Example Code,Web Workers and the DOM","Example,Example","A web worker is a JavaScript running in the background, without affecting the performance of the page.,When executing scripts in an HTML page, the page becomes unresponsive until the script is finished.,A web worker is a JavaScript that runs in the background, independently 
of other scripts, without affecting the performance of the page. You can continue to do whatever you want: 
clicking, selecting things, etc., while the web worker runs in the background.,The numbers in the table specify the first browser versions that fully support Web Workers:,The example below creates a simple web worker that count numbers in the background:,Before creating a web worker, check whether the user's browser supports it:,Now, let's create our web worker in an external JavaScript.,Here, we create a script that counts. The script is stored in the ""demo_workers.js"" file:,The important part of the code above is the , method - which is used to post a message back to the HTML page., Normally web workers are not used for such simple scripts, but for more CPU intensive tasks.,Now that we have the web worker file, we need to call it from an HTML page.,The following lines checks if the worker already exists, if not - it creates a new web worker object and runs the code in 
""demo_workers.js"":,Then we can send and receive messages from the web worker.,Add an ""onmessage"" event listener to the web worker.,When the web worker posts a message, the code within the event listener is executed. The data 
from the web worker is stored in event.data.,When a web worker object is created, it will continue to listen for messages (even after the external script is finished) until it is terminated.,To terminate a web worker, and free browser/computer resources, use the 
, method:,If you set the worker variable to undefined, after it has been terminated, 
you can reuse the code:,We have already seen the Worker code in the .js file. Below is the code for the HTML page:,Since web workers are in external files, they do not have access to the following JavaScript objects:","The window object,The document object,The parent object","
<!DOCTYPE html>,
<html>,
<body>,
,
<p>Count numbers: <output id=""result""></output></p>,
<button onclick=""startWorker()"">Start Worker</button> ,
<button onclick=""stopWorker()"">Stop Worker</button>,
,
<script>,
let w;,
,
function startWorker()
{,
  if (typeof(w) == ""undefined"") {,
    w = new Worker(""demo_workers.js"");,
  },
  w.onmessage = function(event) {,
    document.getElementById(""result"").innerHTML = event.data;,
  };,
},
,
function stopWorker()
{ ,
  w.terminate();,  w = undefined;,
},
</script>,
,
</body>,
</html>",
JavaScript ,HTML DOM,"The HTML DOM (Document Object Model),What You Will Learn,What is the DOM?,What is the HTML DOM?",The HTML DOM Tree of Objects,"With the HTML DOM, JavaScript can access and change all the elements of an HTML 
document.,When a web page is loaded, the browser creates a ,ocument
,bject ,odel of the page. ,The , model is constructed as a tree of ,:,With the object model, JavaScript gets all the power it needs to create 
dynamic HTML: ,In the next chapters of this tutorial you will learn:,The DOM is a W3C (World Wide Web Consortium) standard.,The DOM defines a standard for accessing documents:,The W3C DOM standard is separated into 3 different parts:,The HTML DOM is a standard , model and , for HTML. It defines:,In other words:","JavaScript can change all the HTML elements in the page,JavaScript can change all the HTML attributes in the page,JavaScript can change all the CSS styles in the page,JavaScript can remove existing HTML elements and attributes,JavaScript can add new HTML elements and attributes,JavaScript can react to all existing HTML events in the page,JavaScript can create new HTML events in the page,How to change the content of HTML elements,How to change the style (CSS) of HTML elements,How to react to HTML DOM events,How to add and delete HTML elements,Core DOM - standard model for all document types,XML DOM - standard model for XML documents,HTML DOM - standard model for HTML documents,The HTML elements as ,
  ,The , of all HTML elements
  ,The , to access all HTML elements,The , for all HTML elements",,
JavaScript ,Forms,"JavaScript Form Validation,JavaScript Can Validate Numeric Input,Automatic HTML Form Validation,Data Validation,HTML Constraint Validation,Constraint Validation HTML Input Attributes,Constraint Validation CSS Pseudo Selectors","JavaScript Example,HTML Form Example,HTML Form Example","HTML form validation can be done by JavaScript.,If a form field (fname) is empty, this function alerts a message, and returns 
false, to prevent the form from being submitted:,The function can be called when the form is submitted:,JavaScript is often used to validate numeric input:,HTML form validation can be performed automatically by the browser:,If a form field (fname) is empty, the , attribute prevents this form from being 
submitted: ,Data validation is the process of ensuring that user input is clean, 
correct, and useful.,Typical validation tasks are:,Most often, the purpose of data validation is to ensure correct user input.,Validation can be defined by many different methods, and deployed in many 
different ways., is performed by a web server, after input has been sent to the 
server., is performed by a web browser, before input is sent to a web server.,HTML5 introduced a new HTML validation concept called ,.,HTML constraint validation is based on:,For a full list, go to ,.,For a full list, go to ,.","has the user filled in all required fields?,has the user entered a valid date?,has the user entered text in a numeric field?,Constraint validation , ,Constraint validation ,Constraint validation ","
<form name=""myForm"" action=""/action_page.php"" , 
method=""post"">,
 Name: <input type=""text"" name=""fname"">,
<input type=""submit"" value=""Submit"">,
</form>,
<form action=""/action_page.php"" method=""post"">,
  <input type=""text"" name=""fname"" ,>,
 
<input type=""submit"" value=""Submit"">,
</form>",
JavaScript ,HTML DOM - Changing HTML,"Changing HTML Content,Changing the Value of an Attribute,Dynamic HTML content,document.write()","Example,Example,Example,Example,Example","The HTML DOM allows JavaScript to change the content of HTML elements.,The easiest way to modify the content of an HTML element is by using the , property.,To change the content of an HTML element, use this syntax:,This example changes the content of a , element:,Example explained:,This example changes the content of an , element:,Example explained:,To change the value of an HTML attribute, use this syntax: ,This example changes the value of the src attribute of an , element:,Example explained:,JavaScript can create dynamic HTML content:,In JavaScript, , can be used to write directly to the HTML 
output stream:","The HTML document above contains a , element with ,We use the HTML DOM to get the element with ,A JavaScript changes the content (,) of that element to ""New 
  text!"",The HTML document above contains an , element with ,We use the HTML DOM to get the element with ,A JavaScript changes the content (,) of that element to ""New 
  Heading"",The HTML document above contains an , element with ,We use the HTML DOM to get the element with ,A JavaScript changes the , attribute of that element from ""smiley.gif"" to ""landscape.jpg""","
<html>,
<body>,
<p id=""p1"">Hello World!</p>,
<script>,
document.getElementById(""p1"").innerHTML = ""New text!"";,
</script>,
</body>,
</html>
,
<!DOCTYPE html>,<html>,
<body>,
,
<h1 id=""id01"">Old Heading</h1>,
,
<script>,
const element = document.getElementById(""id01"");,element.innerHTML = ""New Heading"";,
</script>,
,
</body>,
</html>
,
 <!DOCTYPE html>,<html>,
<body>,
,
<img id=""myImage"" src=""smiley.gif"">,
,
<script>,
document.getElementById(""myImage"").src = ""landscape.jpg"";,
</script>,
,
</body>,
</html>
,
 <!DOCTYPE html>,<html>,
<body>,
,
<script>,
document.getElementById(""demo"").innerHTML = ""Date : "" + Date();
</script>,
,
</body>,
</html>
,
 <!DOCTYPE html>,<html>,
<body>,
,
<p>Bla bla bla</p>,
,
<script>,
document.write(Date());,
</script>,
,
<p>Bla bla bla</p>,
,
</body>,
</html>
",
JavaScript - ,HTML DOM Methods ,"The DOM Programming Interface,Example,The getElementById Method,The innerHTML Property",Example,"HTML DOM methods are , you can perform (on HTML 
Elements).,HTML DOM properties are , (of HTML Elements) that you can 
set or change.,The HTML DOM can be accessed with JavaScript 
(and with other programming languages). ,In the DOM, all HTML elements are defined as ,.,The programming interface is 
the properties and methods of each object.,A , is a value that you can get or set (like changing the 
content of an HTML element).,A , is an action you can do (like add 
or deleting an HTML element).,The following example changes the content (the ,) of the , element with ,:,In the example above, , is a ,, while , is a 
,.,The most common way to access an HTML element is to use the , of the 
element.,In the example above the , method used , to find the 
element.,The easiest way to get the content of an element is by using the , property.,The , property is useful for getting or replacing the content of HTML elements.",,"
<html>,
<body>,
<p id=""demo""></p>,
<script>,
 document.getElementById(""demo"").innerHTML = ""Hello World!"";,
</script>,
</body>,
</html>",
JavaScript Async,,"Async Syntax,Await Syntax,Example,Browser Support","Example,Example,Example,Basic Syntax,Example without reject,Waiting for a Timeout,Waiting for a File","The keyword , before a function makes the function return a promise:,Here is how to use the Promise:,Or simpler, since you expect a normal value (a normal response, not an error):,The keyword  , before a function makes the function wait for a promise:,The , keyword can only be used inside an
, function.,Let's go slowly and learn how to use it.,ECMAScript 2017 introduced the JavaScript keywords
, and ,.,The following table defines the first browser version with full support for both:",,,
JavaScript Promises,,"JavaScript Promise Object,Promise Object Properties,Promise How To,JavaScript Promise Examples,Waiting for a Timeout,Waiting for a file,Browser Support","Promise Syntax,Example,Example Using Callback,Example Using Promise,Example using Callback,Example using Promise","A JavaScript Promise object contains both the producing code and calls to the consuming code:,When the producing code obtains the result, it should call one of the two callbacks:
,A JavaScript Promise object can be:,The Promise object supports two properties: , and ,.,While a Promise object is ""pending"" (working), the result is undefined.,When a Promise object is ""fulfilled"", the result is a value.,When a Promise object is ""rejected"", the result is an error object.,Here is how to use a Promise:,To demonstrate the use of promises, we will use the callback examples from the previous chapter:,ECMAScript 2015, also known as ES6, introduced the JavaScript Promise object.,The following table defines the first browser version with full support for Promise objects:","Pending,Fulfilled,Rejected,Waiting for a Timeout,Waiting for a File",,
JavaScript ,HTML DOM Elements,"Finding HTML Elements,Finding HTML Element by Id,Finding HTML Elements by Tag Name,Finding HTML Elements by Class Name,Finding HTML Elements by CSS Selectors,Finding HTML Elements by HTML Object Collections","Example,Example,Example,Example,Example,Example","This page teaches you how to find and access HTML elements in 
an HTML page.,Often, with JavaScript, you want to manipulate HTML elements.,To do so, you have to find the elements first. There are several ways to do this:,The easiest way to find an HTML element in the DOM, is by using the element id.,This example finds the element with ,:,If the element is found, the method will return the element as an object (in element).,If the element is not found, element will contain ,.,This example finds all , elements:,This example finds the element with ,, and then finds all , elements 
inside ,:,If you want to find all HTML elements with the same class name, use 
,.,
,This example returns a list of all elements with ,.,If you want to find all HTML elements that match a specified CSS selector 
(id, class names, types, attributes, values of attributes, etc), use the , method.,
,This example returns a list of all , elements with ,.,This example finds the form element with ,, in the forms 
collection, and displays all element 
values:,The following HTML objects (and object collections) are also accessible:","Finding HTML elements by id,Finding HTML elements by tag name ,Finding HTML elements by class name,Finding HTML elements by CSS selectors,Finding HTML elements by HTML object collections",,
JavaScript Callbacks,,"Function Sequence,Sequence Control,JavaScript Callbacks,When to Use a Callback?","Example,Example,Example,Example,Example","JavaScript functions are executed in the sequence they are called.
Not in the sequence they are defined.,This example will end up displaying ""Goodbye"":,This example will end up displaying ""Hello"":,Sometimes you would like to have better control over when to execute a function.,Suppose you want to do a calculation, and then display the result.,You could call a calculator function (,), save the result,
and then call another function (,) to display the result:,Or, you could call a calculator function (,),
and let the calculator function call the display function (,):,The problem with the first example above, is that you have to call two functions to display the result.,The problem with the second example, is that you cannot prevent the calculator function from 
displaying the result.,Now it is time to bring in a callback.,Using a callback, you could call the calculator function (,)
with a callback, and let the calculator function run the callback after the calculation is finished:,In the example above, , is the name of a function.,It is passed to , as an argument.,The examples above are not very exciting.,They are simplified to teach you the callback syntax.,Where callbacks really shine are in asynchronous functions, 
where one function has to wait for another function (like waiting for a file to load).,Asynchronous functions are covered in the next chapter.",,,
Asynchronous JavaScript,,"Asynchronous JavaScript,Waiting for a Timeout,Waiting for Intervals:,Waiting for Files","Example,Example,Example,Example,Waiting for a File:,mycar.html","The examples used in the previous chapter, was very simplified.,The purpose of the examples was to demonstrate the syntax of callback functions:,In the example above, , is the name of a function.,It is passed to , as an argument.,When using the JavaScript function ,,
you can specify a callback function to be executed on time-out:,In the example above, , is used as a callback., is passed to , as an argument.,3000 is the number of milliseconds before time-out, so
, will be called after 3 seconds.,Instead of passing the name of a function as an argument to another function,
you can always pass a whole function instead:,In the example above, ,
is used as a callback. It is a complete function.
The complete function is passed to setTimeout() as an argument.,3000 is the number of milliseconds before time-out, so
, will be called after 3 seconds.,When using the JavaScript function ,,
you can specify a callback function to be executed for each interval:,In the example above, , is used as a callback., is passed to , as an argument.,1000 is the number of milliseconds between intervals, so
, will be called every second.,If you create a function to load an external resource (like a script or a file),
you cannot use the content before it is fully loaded.,This is the perfect time to use a callback.,This example loads an HTML file (,), and displays the HTML file in a web page,
after the file is fully loaded:,In the example above, , is used as a callback., is passed to , as an argument.,Below is a copy of ,:",,"
,
<img src=""img_car.jpg"" alt=""Nice car"" style=""width:100%"">,
,
<p>A car is a wheeled, self-powered motor vehicle used for transportation.,
Most definitions of the term specify that cars are designed to run primarily on roads,
to have seating for one to eight people, to typically have four wheels.</p>,
<p>(Wikipedia)</p>,
,
",
JavaScript Static Methods,,,"Example,Example","If you want to use the myCar object inside the , method, you can send it 
as a parameter:",,,
JavaScript Class Inheritance,,"Class Inheritance,Getters and Setters,Hoisting","Example,Example,Example,Example,Example","To create a class inheritance, use the , 
keyword.,A class created with a class inheritance inherits all the methods from 
another class:,The , method refers to the parent 
class.,By calling the , method in the 
constructor method, we call the parent's constructor method and gets access to 
the parent's properties and methods.,Classes also allows you to use getters and setters.,It can be smart to use getters and setters for your properties, especially if 
you want to do something special with the value before returning them, or before 
you set them.,To add getters and setters in the class, use the , and , keywords.,The name of the getter/setter method cannot be the same as the name of the 
property, in this case ,.,

,Many programmers use an underscore character , 
before the property name to separate the getter/setter from the actual property:,To use a ,, use the same syntax as when you set a property value, without parentheses:,Unlike functions, and other JavaScript declarations, class declarations are not hoisted.,That means that you must declare a class before you can use it:",,,
JavaScript Classes,,"JavaScript Class Syntax,Using a Class,The Constructor Method,Class Methods,Browser Support,""use strict""","Syntax,Example,Example,Syntax,Example,Example,Example","Use the keyword , to create a class.,Always add a method named ,:,The example above creates a class named ""Car"".,The class has two initial properties: ""name"" and ""year"".,When you have a class, you can use the class to create objects:,The example above uses the , to create two ,.,The constructor method is a special method:,If you do not define a constructor method, JavaScript 
will add an empty constructor method.
,Class methods are created with the same syntax as object methods.,Use the keyword , to create a class.,Always add a , method.,Then add any number of methods.,Create a Class method named ""age"", that returns the Car age:,You can send parameters to Class methods:,The following table defines the first browser version with full support for 
Classes in JavaScript: ,The syntax in classes must be written in ""strict mode"".,You will get an 
error if you do not follow the ""strict mode"" rules.,Learn more about ""strict mode"" in: ,.","It has to have the exact name ""constructor"",It is executed automatically when a new object is created,It is used to initialize object properties",,
JavaScript Function bind(),,"Function Borrowing,Preserving ,What is ,?","Example,Example,Example,Example","With the , method, an object can borrow a method from another object.,The example below creates 2 objects (person and member).,The member object borrows the fullname method from the person object:,Sometimes the , method has to be used to prevent loosing ,.,In the following example, the person object has a display method. In the display method, , refers to the person object:,When a function is used as a callback, , is lost.,This example will try to display the person name after 3 seconds, but it will display , instead:,The , method solves this problem.,In the following example, the , method is used to bind person.display to person.,This example will display the person name after 3 seconds:,In JavaScript, the , keyword refers to an ,., object depends on how , is being invoked (used or called).,The , keyword refers to different objects depending on how it is used:",,,
JavaScript Function call(),,"Method Reuse,All Functions are Methods,What is ,?,The JavaScript call() Method,The call() Method with Arguments","Example,Example,Example,Example","With the , method, you can write a method that can be used on different 
objects. ,In JavaScript all functions are object methods.,If a function is not a method of a JavaScript object, it is a function of the 
global object (see previous chapter). ,The example below creates an object with 3 
properties, firstName, lastName, fullName.,In the example above, , refers to the ,.,I.E. , means the , property of ,.,I.E. , means the , property of ,.,In JavaScript, the , keyword refers to an ,., object depends on how , is being invoked (used or called).,The , keyword refers to different objects depending on how it is used:,The , method is a predefined 
JavaScript method.,It can be used to invoke (call) a method 
with an owner object as an argument (parameter).,This example calls the , method of person, using it on 
,:,This example calls the , method of person, using it on
,:,The , method can accept arguments:",,,
JavaScript ,HTML DOM Document,"The HTML DOM Document Object,Finding HTML Elements,Changing HTML Elements,Adding and Deleting Elements,Adding Events Handlers,Finding HTML Objects",,"The HTML DOM document object is the owner of all other objects in your web page.,The document object represents your web page.,If you want to access any element in an HTML page, you always start with accessing the 
document object.,Below are some examples of how you can use the document object to access and 
manipulate HTML.,The first HTML DOM Level 1 (1998), defined 11 HTML objects, object collections, and properties. These are still valid in HTML5.,Later, in HTML DOM Level 3, more objects, collections, and properties were added.",,,
JavaScript ,Function Invocation,"Invoking a JavaScript Function,Invoking a Function as a Function,What is ,?,The Global Object,Invoking a Function as a Method,Invoking a Function with a Function Constructor","Example,Example,Example,Example,Example,Example","The code inside a JavaScript , will execute when ""something"" invokes it.,The code inside a function is not executed when the function is ,.,The code inside a function is executed when the function is ,.,It is common to use the term "","" instead of "","".,It is also common to say ""call upon a function"", ""start a function"", or 
""execute a function"".,In this tutorial, we will use ,, because a 
JavaScript function can be invoked without being called.,The function above does not belong to any object. But in JavaScript there 
is always a default global object.,In HTML the default global object is the HTML page itself, so the function above ""belongs"" to the 
HTML page.,In a browser the page object is the browser window. The function above 
automatically becomes a window function.,myFunction() and window.myFunction() is the same function:,In JavaScript, the , keyword refers to an ,., object depends on how , is being invoked (used or called).,The , keyword refers to different objects depending on how it is used:,When a function is called without an owner object, the value of , 
becomes the global object.,In a web browser the global object is the browser window.,This example returns the window object as the value of ,:,In JavaScript you can define functions as object methods.,The following example creates an object (,), with two 
properties (, and ,), and a 
method (,):,The , method is a function. The function belongs to 
the object. , is the owner of the function.,The thing called ,, is the object that 
""owns"" the JavaScript code. In this case the value of , 
is ,. ,Test it! Change the , method to return the value of ,:,If a function invocation is preceded with the , keyword, 
it is a constructor invocation.,It looks like you create a new function, but since JavaScript functions are 
objects you actually create a new object:,A constructor invocation creates a new object. The new object inherits the 
properties and methods from its constructor. ",,,
JavaScript ,Closures,"Global Variables,Variable Lifetime,A Counter Dilemma,JavaScript Nested Functions,JavaScript Closures,Example Explained","Example,Example,Example,Example,Example,Example,Example,Example","JavaScript variables can belong to the , or
, scope.,Global variables can be made local (private) with ,.,A , can access all variables defined , the function, like this:,But a , can also access variables defined , the function, like this:,In the last example, , is a , 
variable. ,In a web page, global variables belong to the window object.,Global variables can be used 
(and changed) by all scripts in the page (and in the window). ,In the first example, , is a , 
variable.,A local variable can only be used inside the function where it is defined. It 
is hidden from other functions and other scripting code.,Global 
and local variables with the same name are  
different variables. Modifying one, does not modify the other. ,Global variables live until the page is discarded, like when you navigate 
to another page or close the window.,Local 
variables have short lives. They are created when the function is 
invoked, and deleted when the function is finished.,Suppose you want to use a variable for counting something, and you want this 
counter to be available to all functions.,You could use a global variable, and a , to increase the counter:,There is a problem with the solution above: Any code on the page can change the counter, without 
calling add().,The counter should be local to the , function, to prevent other code from changing 
it:,It did not work because we display the global counter instead of the local 
counter.,We can remove the global counter and access the local counter by letting the 
function return it:,It did not work because we reset the local counter every time we call the 
function., ,All functions have access to the global scope.   ,In fact, in JavaScript, all functions have access to the scope ""above"" them.,JavaScript supports nested functions. Nested functions have access to the 
scope ""above"" them. ,In this example, the inner function , has access 
to the , variable in the parent function:,This could have solved the counter dilemma, if we could reach the , 
function from the outside.,We also need to find a way to execute , only once.,Remember self-invoking functions? What does this function do?,The variable , is assigned to the return value of a self-invoking 
function.,The self-invoking function only runs once. It sets the counter to zero (0), 
and returns a function expression.,This way add becomes a function. The ""wonderful"" part is that it can access 
the counter in the parent scope. ,This is called a JavaScript , It makes it possible 
for a function to have "","" variables.,The counter is protected by the scope of the anonymous function, 
and can only be changed using the add function.",,,
JavaScript ,Function Parameters,"Function Parameters and Arguments,Parameter Rules,Default Parameters,The Arguments Object,Arguments are Passed by Value,Objects are Passed by Reference","Example,Example,Example","A JavaScript , does not perform any checking on 
parameter values (arguments).,Earlier in this tutorial, you learned that functions can have ,:,Function , are the , listed in 
the function definition.,Function , are the real , 
passed to (and received by) the function.,JavaScript function definitions do not specify data types for 
parameters.,JavaScript functions do not perform type checking on the passed 
arguments.,JavaScript functions do not check the number of arguments received.,If a function is called with , (less than declared), the missing values are set to
,.,Sometimes this is acceptable, but sometimes it is better to assign a default 
value to the parameter:,JavaScript functions have a built-in object called the arguments 
object.,The argument object contains an array of the arguments used when the function 
was called (invoked).,This way you can simply use a function to find (for instance) the highest 
value in a list of numbers:,Or create a function to sum all input values:,The parameters, in a function call, are the function's arguments.,JavaScript arguments are passed by ,: The function only 
gets to know the values, not the argument's locations.,If a function changes an argument's value, it does not change the parameter's 
original value.,In JavaScript, object references are values.,Because of this, objects will behave like they are passed by ,If a function changes an object property, it changes the original value.",,,
JavaScript ,Function Definitions,"Function Declarations,Function Expressions,The Function() Constructor,Function Hoisting,Self-Invoking Functions,Functions Can Be Used as Values,Functions are Objects,Arrow Functions","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","JavaScript functions are , with the
, keyword.,You can use a function , or a 
function ,.,Earlier in this tutorial, you learned that functions are , with the 
following syntax:,Declared functions are not executed immediately. They are ""saved for later use"", 
and will be executed later, when they are invoked (called upon).,A JavaScript function can also be defined using an ,.,A function expression can be stored in a variable:,After a function expression has been stored in a variable, the variable can 
be used as a function:,The function above is actually an , (a function without a 
name).,Functions stored in variables do not need function names. They are always 
invoked (called) using the variable name.,As you have seen in the previous examples, JavaScript functions are defined 
with the , keyword.,Functions can also be defined with a built-in JavaScript function constructor called 
,.,You actually don't have to use the function constructor. The example above is the same as writing:,Earlier in this tutorial, you learned about ""hoisting"" (,).,Hoisting is JavaScript's default behavior of moving , to the top of the 
current scope.,Hoisting applies to variable declarations and to function declarations.,Because of this, JavaScript functions can be called before they are declared:,Functions defined using an expression are not hoisted.,Function expressions can be made ""self-invoking"".,A self-invoking expression is invoked (started) automatically, without being called.,Function expressions will execute automatically if the expression is followed 
by ().,You cannot self-invoke a function declaration.,You have to add 
parentheses around the function to indicate that it is a function expression:,The function above is actually an , (function 
without name).,JavaScript functions can be used as values:,JavaScript functions can be used in expressions:,The , operator in JavaScript returns ""function"" for 
functions.,But, JavaScript functions can best be described as objects.,JavaScript functions have both , and ,.,The , property returns the number of arguments received when 
the function was invoked:,The , method returns the function as a string:,Arrow functions allows a short syntax for writing function expressions.,You don't need the , keyword, the , keyword, and the 
,.,Arrow functions do not have their own ,.
They are not well suited for defining ,.,Arrow functions are not hoisted. They must be defined , they are used.,Using ,
is safer than using ,, because a function expression is 
always constant value.,You can only omit the , keyword and the curly brackets if the function is a single statement. 
Because of this, it might be a good habit to always keep them:",,,
JavaScript ES5 Object Methods,,"Changing a Property Value,Changing Meta Data,Listing All Properties,Listing Enumerable Properties,Adding a Property,Adding Getters and Setters,A Counter Example","Managing Objects,Protecting Objects,Syntax,Example,Example,Example,Example,Example,Example","This example changes a property value:,ES5 allows the following property meta data to be changed:,ES5 allows getters and setters to be changed:,This example makes language read-only:,This example makes language not enumerable:,This example list all properties of an object:,This example list only the enumerable properties of an object:,This example adds a new property to an object:,The , method can also be used to add Getters and 
Setters:",,,
JavaScript Function apply(),,"Method Reuse,The JavaScript apply() Method,The Difference Between call() and apply(),The apply() Method with Arguments,Simulate a Max Method on Arrays,JavaScript Strict Mode","Example,Example,Example,Example,Example,Example,Example,Example","With the , method, you can write a method that can be used on different 
objects.,The , method is similar to the , method (previous chapter).,In this example the , method of , is , on ,:,The difference is:,The , method takes arguments ,.,The , method takes arguments as an ,.,The , method accepts arguments in an array:,Compared with the , method:,You can find the largest number (in a list of numbers) using the , method:,Since JavaScript , do not have a max() method, you can apply the 
, method instead.,The first argument (null) does not matter. It is not used in this example.,These examples will give the same result:,In JavaScript strict mode, if the first argument of the , method is not an object,
it becomes the owner (object) of the invoked function.
In ""non-strict"" mode, it becomes the global object.",,,
JavaScript Maps,,"Map Methods,How to Create a Map,new Map(),Map.set(),Map.get(),Map.size,Map.delete(),Map.clear(),Map.has(),Maps are Objects,JavaScript Objects vs Maps,Map.forEach(),Map.keys(),Map.values(),Map.entries(),Objects as Keys,Browser Support","Example,Example,Example,Example,Example,Example,Example,Example,Try This:,Example,Example,Example,Example,Example,Example,Example","You can create a JavaScript Map by:,You can create a Map by passing an Array to the , constructor:,You can add elements to a Map with the , method:,The , method can also be used to change existing Map values:,The , method gets the value of a key in a Map:,The , property returns the number of elements in a Map:,The , method removes a Map element:,The , method removes all the elements from a Map:,The , method returns true if a key exists in a Map:, returns object:, Map returns true:,The , method invokes a callback for each key/value pair in a Map:,The , method returns an iterator object with the keys in a Map:,The , method returns an iterator object with the values in a Map:,The , method returns an iterator object with the [key,values] in a Map:,Remember: The key is an object (apples), not a string (""apples""):,JavaScript Maps are supported in all browsers, except Internet Explorer:","Passing an Array to ,Create a Map and use ",,
AJAX - XMLHttpRequest,,"Send a Request To a Server,The url - A File On a Server,Asynchronous - True or False?,GET or POST?,GET Requests,POST Requests,Synchronous Request","Example,Example,Example,Example,Example,Example","The XMLHttpRequest object is used to request data from a server.,To send a request to a server, we use the open() and send() methods of the , object:,The url parameter of the , method, is an address to a file on a server:,The file can be any kind of file, like .txt and 
.xml, or server scripting files like .asp and .php (which can perform  
actions on the server before sending the response back).,Server requests should be sent asynchronously.,The async parameter of the open() 
method should be set to true:,By sending asynchronously, the 
JavaScript does not have to wait for the server response, but can instead:, is simpler and faster than ,, and can be used in most cases.,However, always use POST requests when:,A simple , request:,In the example above, you may get a cached result. To avoid this, add a unique ID to the URL:,If you want to send information with the , method, add the information to the URL:,How the server uses the input and how the server responds to a request, is explained in a later chapter.,A simple , request:,To POST data like an HTML form, add an HTTP header with ,. 
Specify the data you want to send in the , method:,To execute a synchronous request, change the third parameter in the , method to ,:,Sometimes async = false are used for quick testing. You will also find 
synchronous requests in older JavaScript code.,Since the code will wait for server completion, there is no need for an , 
function:","execute other scripts while waiting for server response,deal with the response after the response is ready,A cached file is not an option (update a file or database on the server).,Sending a large amount of data to the server (POST has no size limitations).,Sending user input (which can contain unknown characters), POST is more robust and secure than GET.",,
JavaScript ,Object Prototypes,"Prototype Inheritance,Adding Properties and Methods to Objects,Using the , Property","Example,Example,Example,Example,Example","All JavaScript objects inherit properties and methods 
from a prototype.,In the previous chapter we learned how to use an ,:,We also learned that you can , add a new property to an existing object constructor:,To add a new property to a constructor, you must add it to the 
constructor function:,All JavaScript objects inherit properties and methods from a prototype:,The , is on the top of the prototype inheritance chain:, objects, , objects, and , objects inherit from ,.,Sometimes you want to add new properties (or methods) to all existing objects of a given type.,Sometimes you want to add new properties (or methods) to an object 
constructor.,The JavaScript , property allows you to add new properties to object 
constructors:,The JavaScript , property also allows you to add new methods to objects 
constructors:"," objects inherit from , objects inherit from , objects inherit from ",,
JavaScript Display Objects,,"How to Display JavaScript Objects?,Displaying Object Properties,Displaying the Object in a Loop,Using Object.values(),Using JSON.stringify(),Stringify Dates,Stringify Functions,Stringify Arrays","Example,Example,Example,Example,Example,Example,Example,Example,Example","Displaying a JavaScript object will output ,.,Some common solutions to display JavaScript objects are:
,The properties of an object can be displayed as a string:,The properties of an object can be collected in a loop:,Any JavaScript object can be converted to an array using ,:, is now a JavaScript array, ready to be displayed:, is supported in all major browsers since 2016.,Any JavaScript object can be stringified (converted to a string) with the JavaScript function
,:, is now a JavaScript string, ready to be displayed:, is included in JavaScript and supported in all major browsers., converts dates into strings:, will not stringify functions:,This can be ""fixed"" if you convert the functions into strings before stringifying.,It is also possible to stringify JavaScript arrays:","Displaying the Object Properties by name,Displaying the Object Properties in a Loop,Displaying the Object using Object.values(),Displaying the Object using JSON.stringify()",,
JavaScript Sets,,"Set Methods,How to Create a Set,The new Set() Method,The add() Method,The forEach() Method,The values() Method,The keys() Method,The entries() Method,Sets are Objects","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","You can create a JavaScript Set by:,Pass an Array to the , constructor:,Create a Set and add literal values:,Create a Set and add variables:,If you add equal elements, only the first will be saved:,The , method invokes a function for each Set element:,The , method returns an Iterator object containing all the values in a Set:,Now you can use the Iterator object to access the elements:","Passing an Array to ,Create a new Set and use , to add values,Create a new Set and use , to add variables",,
JavaScript Iterables,,"Iterating Over a String,Iterating Over an Array,JavaScript Iterators,Home Made Iterable","Example,Example,Example,Example,Example","You can use a , loop to iterate over the elements of a string:,You can use a , loop to iterate over the elements of an Array:,The , defines how to produce a , from an object.,An object becomes an , when it implements a , method.,The , method must return an object with two properties:
,This iterable returns never ending: 10,20,30,40,.... Everytime , is called:,A JavaScript iterable is an object that has a ,.,The , is a function that returns a , function.,An iterable can be iterated over with the code: ,
,The Symbol.iterator method is called automatically by ,.
,But we can also do it ""manually"":
","value (the next value),done (true or false)",,
JavaScript ,Object Constructors,"Object Types (Blueprints) (Classes),What is ,?,Adding a Property to an Object,Adding a Method to an Object,Adding a Property to a Constructor,Adding a Method to a Constructor,Built-in JavaScript Constructors,Did You Know?,String Objects,Number Objects,Boolean Objects","Example,Example,Example,Example,Example,Example,Example,Now You Can Try:,Example","The examples from the previous chapters are limited. They only create single objects.,Sometimes we need a "","" for creating many objects of the same ""type"".,The way to create an ""object type"", is to use an ,.,In the example above, , is an object constructor function.,Objects of the same type are created by calling the constructor function with the , keyword:,In JavaScript, the , keyword refers to an ,., object depends on how , is being invoked (used or called).,The , keyword refers to different objects depending on how it is used:,Adding a new property to an existing object is easy: ,The property will be added to myFather. Not to myMother. (Not to any other person objects).,Adding a new method to an existing object is easy: ,The method will be added to myFather. Not to myMother. (Not to any other person objects).,You cannot add a new property to an object constructor the same way you 
add a new property to an existing object:,To add a new property to a constructor, you must add it to the 
constructor function:,Your constructor function can also define methods:,You cannot add a new method to an object constructor the same way you add a 
new method to an existing object.,Adding methods to an object constructor must be done inside the 
constructor function:,The changeName() function assigns the value of name to the person's 
lastName property.,JavaScript knows which person you are 
talking about by ""substituting"" , with ,.,JavaScript has built-in constructors for native objects:,As you can see above, JavaScript has object versions of the primitive 
data types ,, ,, and ,. But there is no reason to create complex objects. Primitive values 
are much faster:,Use string literals , instead of ,.,Use number literals , instead of ,.,Use boolean literals , instead of ,.,Use object literals , instead of ,.,Use array literals , instead of ,.,Use pattern literals , instead of ,.,Use function expressions , instead of ,.,Normally, strings are created as primitives: ,But strings can also be created as objects using the , keyword:,
,Learn why strings should not be created as object in the chapter
,. ,Normally, numbers are created as primitives: ,But numbers can also be created as objects using the , keyword:,
,Learn why numbers should not be created as object in the chapter
,. ,Normally, booleans are created as primitives: ,But booleans can also be created as objects using the , keyword:,
,Learn why booleans should not be created as object in the chapter
,. ",,,
JavaScript Object Accessors,,"JavaScript Accessors (Getters and Setters),JavaScript Getter (The get Keyword),JavaScript Setter (The set Keyword),JavaScript Function or Getter?,Data Quality,Why Using Getters and Setters?,Object.defineProperty()","Example,Example,Example 1,Example 2,Example,Example,A Counter Example","ECMAScript 5 (ES5 2009) introduced Getter and Setters.,Getters and setters allow you to define Object Accessors (Computed 
Properties).,This example uses a , property to , 
the value of the , property.,This example uses a , property to , 
the value of the , property.,What is the differences between these two examples?,Example 1 access fullName as a function: person.fullName().,Example 2 access fullName as a property: person.fullName.,The second example provides a simpler syntax.,JavaScript can secure better data quality when using getters and setters.,Using the , property, in this example, returns the value 
of the , property in upper case:,Using the , property, in this example, stores an upper case 
value in the , property:,The , method can also be used to add Getters and 
Setters:","It gives simpler syntax,It allows equal syntax for properties and methods,It can secure better data quality,It is useful for doing things behind-the-scenes",,
JavaScript ,Object Properties,"JavaScript Properties,Accessing JavaScript Properties,JavaScript for...in Loop,Adding New Properties,Deleting Properties,Nested Objects,Nested Arrays and Objects,Property Attributes,Prototype Properties","Example 1,Example 2,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","Properties are the most important part of any JavaScript object.,Properties are the values associated with a JavaScript object.,A JavaScript object is a collection of unordered properties.,Properties can usually be changed, added, and deleted, but some are read only.,The syntax for accessing the property of an object is:,or,or,The JavaScript , statement loops through the properties of an object.,The block of code inside of the , loop will be executed once for each property.,Looping through the properties of an object:,You can add new properties to an existing object by simply giving it a value. ,Assume that the person object already exists -
you can then give it new properties:,The , keyword deletes a property from an object:,or delete person[""age""];,The , keyword deletes both the value of the property and the property itself.,After deletion, the property cannot be used before it is added back again.,The 
, operator is designed to be used on object properties. It has no effect on 
variables or functions. 
,The , operator should not be used on predefined JavaScript object 
properties. It can crash your application.

,Values in an object can be another object:,You can access nested objects using the dot notation or the bracket notation:,or:,or:,or:,Values in objects can be arrays, and values in arrays can be objects:,To access arrays inside arrays, use a for-in loop for each array:,All properties have a name. In addition they also have a value.,The value is one of the property's attributes.,Other attributes are: enumerable, configurable, and writable.,These attributes define how the property can be accessed (is it readable?, is 
it writable?),In JavaScript, all attributes can be read, but only the value attribute can 
be changed (and only if the property is writable).,( ECMAScript 5 has methods for both getting and setting all property 
attributes),JavaScript objects inherit the properties of their prototype. ,The , keyword does not delete inherited properties, but if you delete a 
prototype property, it will affect all objects 
inherited from the prototype.",,,
JavaScript ,Object Methods,"What is ,?,JavaScript Methods,Accessing Object Methods,Adding a Method to an Object,Using Built-In Methods","Example,Example,Example,Example,Example","In JavaScript, the , keyword refers to an ,., object depends on how , is being invoked (used or called).,The , keyword refers to different objects depending on how it is used:,JavaScript methods are actions that can be performed on objects.,A JavaScript , is a property containing a ,.,You access an object method with the following syntax:,You will typically describe fullName() as a method of the person object, and 
fullName as a property. ,The fullName property will execute (as a function) when it is invoked with ().,This example accesses the fullName() , of a person object:,If you access the fullName ,, without (), it 
will return the ,:,Adding a new method to an object is easy: ,This example uses the , method of the String object, to convert a text 
to uppercase:,The value of x, after execution of the code above will be:",,,
JavaScript ,Objects,"JavaScript Primitives,Objects are Variables,Object Properties,Object Methods,Creating a JavaScript Object,Using an Object Literal,Using the JavaScript Keyword new,JavaScript Objects are Mutable","Example,Example,Example,Example,Example,Example,Example,Example","In JavaScript, almost ""everything"" is an object.,All JavaScript values, except primitives, are objects.,A , is a value that has no properties or methods.,A , is data that has a primitive value.,JavaScript defines 5 types of primitive data types:,Primitive values are immutable (they are hardcoded and therefore cannot be changed).,JavaScript variables can contain single values:,JavaScript variables can also contain many values.,Objects are variables too. But objects can contain many 
values. ,Object values are written as , pairs (name and value separated by a 
colon).,It is a common practice to declare objects with the , keyword.,The named values, in JavaScript objects, are called ,.,Objects written as name value pairs are similar to:,Methods are , that can be performed on objects.,Object properties can be both primitive values, other objects, and functions.,An , is an object property containing a ,.,You will learn more about methods in the next chapters.,With JavaScript, you can define and create your own objects.,There are different ways to create new objects:,This is the easiest way to create a JavaScript Object.,Using an object literal, you both define and create an object in one 
statement.,An object literal is a list of name:value pairs (like age:50) inside curly braces {}.,The following example creates a new JavaScript object with four properties:,Spaces and line breaks are not important. An object definition can span multiple lines:,This example creates an empty JavaScript object, 
and then adds 4 properties:,The following example create a new JavaScript object
using ,, 
and then adds 4 properties:,Objects are mutable: They are addressed by reference, not by value.,If person is an object, the following statement will not create a copy of person:,The object x is , of person. It , 
person. 
Both x and person are the same object.,Any changes to x will also change person, because x and person are the same object. ","Booleans can be objects (if defined with the , keyword),Numbers can be objects (if defined with the , keyword),Strings can be objects (if defined with the , keyword),Dates are always objects,Maths are always objects,Regular expressions are always objects,Arrays are always objects,Functions are always objects,Objects are always objects,Associative arrays in PHP,Dictionaries in Python,Hash tables in C,Hash maps in Java,Hashes in Ruby and Perl,Create a single object, using an object literal.,Create a single object, with the keyword ,.,Define an object constructor, and then create objects of the constructed type.,Create an object using ,.",,
JavaScript History,,"JavaScript / ECMAScript,The ECMA Technical Committee 39,From ES4 to ES6",," was invented by , in 1995.,It was developed for ,, and became the , standard in 1997.,After Netscape handed JavaScript over to ECMA, the Mozilla foundation 
continued to develop JavaScript for the Firefox browser.
Mozilla's latest version was 1.8.5. (Identical to ES5)., (IE4) was the first browser to support ECMA-262 Edition 1 (ES1).,In 1996, Netscape and Brendan Eich took JavaScript to the ECMA international standards organization,
and a technical committee (TC39) was created to develop the language.,ECMA-262 Edition 1 was released in June 1997.,When the TC39 committee got together in Oslo in 2008, to agree on ECMAScript 4, they were divided into
2 very different camps:
,:,
Microsoft and Yahoo who wanted an incremental upgrade from ES3.,:,
Adobe, Mozilla, Opera, and Google who wanted a massive ES4 upgrade.,August 13 2008, Brendan Eich wrote an
,:,The solution was to work together:,The planned new release (ES6) was codenamed ""Harmony"" (Because of the split it created?).,ES5 was a huge success. It was released in 2009, and all major browsers (including Internet Explorer) were fully
compliant by July 2013:,ES6 was also a huge success. It was released in 2015, and all major browsers were fully compliant by March  2017:","ECMAScript 4 was renamed to ES5,ES5 should be an incremental upgrade of ECMAScript 3.,Features of ECMAScript 4 should be picked up in later versions.,TC39 should develop a new major release, bigger in scope than ES5.",,
Internet Explorer / Edge,,"Microsoft Edge Legacy,The New Edge,Developers Support?,Older Applications,Government Recommendations",,"Edge was the default browser for Windows 10.,It was built with Microsoft's browser engine , 
and their , JavaScript engine.,The first versions of Edge (12-18), are now referred to as "","".
,The Microsoft support for Edge Legacy ended on March 9, 2021.,Future Windows updates will replace Edge Legacy with ,.,The new Microsoft Edge is , based with , and , engines.,It was released in January 2020, and is available for Windows 7, 8, and 10.,It can also be downloaded for macOS, iOS, and Android.,The new Edge follows the , (updates on an approx. six-week cycle).,IE 11 is still a component of many Windows operating system and follows the Lifecycle Policy
for the product on which it is installed:,Many older PCs (like in public libraries) are still using Internet Explorer.,Many legacy web applications are using Internet Explorer.,Many legacy web applications are using Internet Explorer runtime DLLs.,Many AJAX based applications are using Microsoft ActiveX components.,In order to ease the migration from Internet Explorer,
Microsoft Edge offers ,, providing backward compatibility
and enabling customers to continue to run legacy web applications.,Furthermore, some governments recommends continuing to support IE11:",,,
ECMAScript 2016,,"New Features in ECMAScript 2016,Exponentiation Operator,Exponentiation Assignment,JavaScript Array.includes()","Example,Example,Example,Example","This chapter introduces the new features in ECMAScript 2016:,The , operator (,) raises the first operand to the power of the second operand., produces the same result as ,:,Chrome 52 and Edge 14 was the first browsers to fully support the Exponentiation Operator:,ECMAScript 2016 introduced , to arrays.
This allows us to check if an element is present in an array:,All modern browsers support Array.prototype.includes:","JavaScript Exponentiation (**),JavaScript Exponentiation assignment (**=),JavaScript Array.prototype.includes",,
ECMAScript 2018,,"New Features in ECMAScript 2018,JavaScript Asynchronous Iteration,JavaScript Promise.finally,JavaScript Object Rest Properties,New JavaScript RegExp Features","Example,Example,Example","This chapter introduces the new features in ECMAScript 2018:,ECMAScript 2018 added asynchronous iterators and iterables.,With asynchronous iterables, we can use the ,
keyword in , loops.

,Firefox and Safari were the first browsers with support for JavaScript asynchronous iteration:,ECMAScript 2018 finalizes the full implementation of the Promise object with ,:,Chrome and Firefox were the first browsers with support for ,:,ECMAScript 2018 added rest properties.,This allows us to destruct an object and collect the leftovers onto a new object:,Chrome, Firefox, ans Opera were the first browsers with support for object rest properties:,ECMAScript 2018 added 4 new RegExp features:,Chrome and Firefox were the first browsers with support for all the new RegExp features:","Unicode Property Escapes (\p{...}),Lookbehind Assertions (?<= ) and (?<! ),Named Capture Groups,s (dotAll) Flag",,
ECMAScript 2017,,"New Features in ECMAScript 2017,JavaScript String Padding,JavaScript Object Entries,JavaScript Object Values,JavaScript Async Functions","Example,Example,Example,Example,Example,Example,Waiting for a Timeout","This chapter introduces the new features in ECMAScript 2017:,ECMAScript 2017 added two String methods: ,
and , to support padding at the beginning and at the end of a string.,String Padding is not supported in Internet Explorer.,Firefox and Safari were the first browsers with support for JavaScript string padding:,ECMAScript 2017 adds a new , method to objects.,The Object.entries() method returns an array of the key/value pairs in an object:,Object.entries() makes it simple to use objects in loops:,Object.entries() also makes it simple to convert objects to maps:,Chrome and Firefox were the first browsers with support for
,:, are similar to ,,
but returns a single dimension array of the object values:,Firefox and Chrome were the first browsers with support for
,:,Firefox and Chrome were the first browsers with support for async JavaScript functions:",JavaScript shared memory,,
Javascript ES6,,"New Features in ES6,Browser Support for ES6 (2015),JavaScript let,JavaScript const,Arrow Functions,The For/Of Loop,JavaScript Maps,JavaScript Sets,JavaScript Classes,Using a Class,JavaScript Promises,The Symbol Type,Default Parameter Values,Function Rest Parameter,String.includes(),String.startsWith(),String.endsWith(),Array.from(),Array keys(),Array find(),Array findIndex(),New Math Methods,The Math.trunc() Method,The Math.sign() Method,The Math.cbrt() Method,The Math.log2() Method,The Math.log10() Method,New Number Properties,New Number Methods,The Number.isInteger() Method,The Number.isSafeInteger() Method,New Global Methods,The isFinite() Method,The isNaN() Method,Object entries(),Modules","Example,Example,Example,Example,Example,Example,Example,Example,Syntax,Example,Example,Promise Syntax,Example Using a Promise,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Import from named exports,Import from default exports","Safari 10 and Edge 14 were the first browsers to fully support ES6:,The , keyword allows you to declare a variable with 
block scope.,Read more about , in the chapter: ,.,The , keyword allows you to declare a constant (a 
JavaScript variable with a constant value).,Constants are similar to let variables, except that the value cannot be changed.,Read more about , in the chapter: ,.,Arrow functions allows a short syntax for writing function expressions.,You don't need the , keyword, the , keyword, and the 
,.,Arrow functions do not have their own ,.
They are not well suited for defining ,.,Arrow functions are not hoisted. They must be defined , they are used.,Using ,
is safer than using ,, because a function expression is 
always a constant value.,You can only omit the , keyword and the curly brackets if the function is a single statement. 
Because of this, it might be a good habit to always keep them:,Learn more about Arrow Functions in the chapter: ,.,The JavaScript , statement loops 
through the values of an iterable objects., , lets you loop over data structures 
that are iterable such as Arrays, Strings, Maps, NodeLists, and more.,The , loop has the following syntax:, - For every iteration the value of the next property is 
assigned to the variable. , can be declared with
,, ,, or ,., - An object that has iterable properties.,Learn more in the chapter: ,.,Learn more about Map objects in the the chapter: ,.,Learn more about Set objects in the the chapter: ,.,JavaScript Classes are templates for JavaScript Objects.,Use the keyword , to create a class.,Always add a method named ,:,The example above creates a class named ""Car"".,The class has two initial properties: ""name"" and ""year"".,When you have a class, you can use the class to create objects:,Learn more about classes in the the chapter: ,.,A Promise is a JavaScript object that links ""Producing Code"" and ""Consuming Code"".,""Producing Code"" can take some time and ""Consuming Code"" must wait for the result.,Learn more about Promises in the the chapter: ,.,A JavaScript Symbol is a primitive datatype just like Number, String, or Boolean.,It represents a unique ""hidden"" identifier that no other code can accidentally access.,For instance, if different coders want to add a person.id property to a person object belonging to a third-party code,
they could mix each others values.,Using Symbol() to create a unique identifiers, solves this problem:,ES6 allows function parameters to have default values.,The rest parameter (...) allows a function to treat an indefinite number of arguments as an array:,The , method returns , if a string contains a specified value,
otherwise ,:,The , method returns ,
if a string begins with a specified value, otherwise ,:,The , method returns ,
if a string ends with a specified value, otherwise ,:,The , method returns an Array object from any object with a length 
property or any iterable object.,The , method returns an Array Iterator object with the keys of an array.,The , method returns the value of the first array element that passes a 
test function.,This example finds (returns the value of ) the first element that is larger 
than 18:,Note that the function takes 3 arguments:,The , method returns the index of the first array element that 
passes a test function.,This example finds the index of the first element that is larger than 18:,Note that the function takes 3 arguments:,ES6 added the following methods to the Math object:, returns the integer part of x:, returns if x is negative, null or positive:, returns the cube root of x:, returns the base 2 logarithm of x:, returns the base 10 logarithm of x:,ES6 added the following properties to the Number object:,ES6 added 2 new methods to the Number object:,The , method returns , if the argument is an integer.,A safe integer is an integer that can be exactly represented as a double precision number.,The , method returns , if the argument is a safe integer.,ES6 added 2 new global number methods:,The global , method returns , if the argument is , or ,.,Otherwise it returns ,:,The global , method returns , if the argument is ,. Otherwise it returns ,:,The , method returns an Array Iterator object with key/value pairs:,[0, ""Banana""],[1, ""Orange""],[2, ""Apple""],[3, ""Mango""],The , method does not change the original array.,Modules are imported i two differen ways:,Learn more about Modules in: ,.","The item value,The item index ,The array itself,The item value,The item index ,The array itself",,
JavaScript ,Performance,"Reduce Activity in Loops,Reduce DOM Access,Reduce DOM Size,Avoid Unnecessary Variables,Delay JavaScript Loading,Avoid Using with","Better Code:,Example,Example","How to speed up your JavaScript code.,Loops are often used in programming.,Each statement in a loop, including the for statement, is executed for each iteration of the 
loop.,Statements or assignments that can be placed outside the loop will make the 
loop run faster. ,The bad code accesses the length property of an array each time the loop is 
iterated.,The better code accesses the length property outside the loop and makes the 
loop run faster.,Accessing the HTML DOM is very slow, compared to other JavaScript statements.,If you expect to access a DOM element several times, access it once, and use 
it as a local variable:,Keep the number of elements in the HTML DOM small.,This will always 
improve page loading, and speed up rendering (page display), especially on smaller devices.,Every attempt to search the DOM (like getElementsByTagName) will benefit 
from a smaller DOM.,Don't create new variables if you don't plan to save values.,Often you can replace code like this:,With this:,Putting your scripts at the bottom of the page body lets the browser load the 
page first.,While a script is downloading, the browser will not start any other 
downloads. In addition all parsing and rendering activity might be blocked.,An alternative is to use , in the script tag. The 
defer attribute specifies that the script should be executed after the page has 
finished parsing, but it only works for external scripts.,If possible, you can add your script to the page by code, after the page has loaded:,Avoid using the , keyword. It has a negative effect on 
speed. It also clutters up JavaScript scopes.,The , keyword is , in strict mode.",,"
<script>,window.onload = function() {,  
const element = document.createElement(""script"");,  
element.src = ""myScript.js"";,  
document.body.appendChild(element);,};,</script>",
JavaScript ,Reserved Words,"Removed Reserved Words ,JavaScript Objects, Properties, and Methods,Java Reserved Words,Other Reserved Words,HTML Event Handlers",,"JavaScript can be used as the programming 
language in many applications.,In addition you should avoid using the name of all HTML event handlers.",,,
JavaScript ES5,,"ES5 Features,Browser Support,The ""use strict"" Directive,Property Access on Strings,Strings Over Multiple Lines,Reserved Words as Property Names,String trim(),Array.isArray(),Array forEach(),Array map(),Array filter(),Array reduce(),Array reduceRight(),Array every(),Array some(),Array indexOf(),Array lastIndexOf(),JSON.parse(),JSON.stringify(),Date.now(),Date toISOString(),Date toJSON(),Property Getters and Setters,Object.defineProperty(),E5 Object Methods,Function Bind(),Trailing Commas","Example,Example,Example,Example,Object Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Managing Objects,Protecting Objects,Example,Object Example,Array Example,JSON Objects:,JSON Arrays:"," is fully supported in all modern browsers:, defines that the JavaScript code should be executed in ""strict mode"".,With strict mode you can, for example, not use undeclared variables.,Read more in ,.,The , method returns the character at a specified 
index (position) in a string:,ES5 allows property access on strings:,A safer way to break up a string literal, is to use string 
addition:,ES5 allows reserved words as property names:,The , method removes whitespace from both sides of a string.,Read more in ,.,The , method checks whether an object is an array.,Read more in ,.,The , method calls a function once for each array element.,Learn more in ,.,This example multiplies each array value by 2: ,Learn more in ,.,This example creates a new array from elements with a value larger than 18:,Learn more in ,.,This example finds the sum of all numbers in an array:,Learn more in ,.,This example also finds the sum of all numbers in an array:,Learn more in ,.,This example checks if all values are over 18:,Learn more in ,.,This example checks if some values are over 18:,Learn more in ,.,Search an array for an element value and returns its position.,Learn more in ,., is the same as ,, but searches from the end of the array.,Learn more in ,.,A common use of JSON is to receive data from a web server.,Imagine you received this text string from a web server:,The JavaScript function , is used to convert the text into a JavaScript object:,Read more in our ,.,A common use of JSON is to send data to a web server.,When sending data to a web server, the data has to be 
a string.,Imagine we have this object in JavaScript:,Use the JavaScript function , to convert it into a string.,myJSON is now a string, and ready to be sent to a server:,Read more in our ,., returns the number of milliseconds since zero date (January 1. 
1970 00:00:00 UTC)., returns the same as getTime() performed on a , object.,Learn more in ,.,The , method converts a Date object to a string, using the ISO standard format:, converts a Date object into a string, formatted as a JSON date.,JSON dates have the same format as the ISO-8601 standard: YYYY-MM-DDTHH:mm:ss.sssZ:,ES5 lets you define object methods with a syntax that looks like getting or setting
a property.,This example creates a , for a property called fullName:,This example creates a , and a , for the language property:,This example uses a setter to secure upper case updates of language:,Learn more about Gettes and Setters in , is a new Object method in ES5.,It lets you define an object property and/or change a property's value and/or 
metadata.,Next example is the same code, except it hides the language property from enumeration:,This example creates a setter and a getter to secure upper case updates of language:,ES5 added a lot of new Object Methods to JavaScript:,Learn more in ,.,With the , method, an object can borrow a method from another object.,This example creates 2 objects (person and member).,The member object borrows the fullname method from the person object:,Learn more in ,.,ES5 allows trailing commas in object and array definitions:",,,
JavaScript ,Versions,"ECMAScript Editions,Browser Support,Browser Support for ES5 (2009),Browser Support for ES6 (2015),Browser Support for ECMAScript 2016",,ECMAScript 1 - 6 is fully supported in all modern browsers.,"The Original JavaScript ES1 ES2 ES3 (1997-1999),The First Main Revision ES5 (2009),The Second Revision ES6 (2015),Yearly Additions (2016, 2017, 2018)",,
JavaScript ,Common Mistakes,"Accidentally Using the Assignment Operator ,Expecting Loose Comparison,Confusing Addition & Concatenation ,Misunderstanding Floats ,Breaking a JavaScript String,Misplacing Semicolon,Breaking a Return Statement,Explanation,Accessing Arrays with Named Indexes,Ending Definitions with a Comma,Undefined is Not Null","Example,Example 1,Example 2,Example 3,Example 1,Example 2,Example 3,Example 4,Example 5,Example,Example:,Object Example:,Array Example:,JSON:,JSON:,Example:,Incorrect:,Incorrect:,Correct:","This chapter points out some common JavaScript mistakes.,JavaScript programs may generate unexpected results if a programmer 
accidentally uses an assignment operator (,), instead of a comparison operator 
(,) in an if statement. ,This , statement returns , (as 
expected) because x is 
not equal to 10:,This , statement returns , (maybe not 
as expected), because 10 is  
true:,This , statement returns , (maybe not 
as expected), because 0 is  
false:,In regular comparison, data type does not matter. This , statement returns 
true:,In strict comparison, data type does matter. This , statement returns false:,It is a common mistake to forget that , statements use strict 
comparison:,This , will display an alert:,This , will not display an alert:, is about adding ,., is about adding ,.,In JavaScript both operations use the same , operator.,Because of this, adding a number as a number will produce a different 
result from adding a number as a string:,When adding two variables, it can be difficult to anticipate the result:,All numbers in JavaScript are stored as 64-bits , 
(Floats).,All programming languages, including JavaScript, have difficulties with 
precise floating point values:,To solve the problem above, it helps to multiply and divide:,JavaScript will allow you to break a statement into two lines:,But, breaking a statement in the middle of a string will not work:,You must use a ""backslash"" if you must break a statement in a string:,Because of a misplaced semicolon, this code block will execute regardless of 
the value of x:,It is a default JavaScript behavior to close a statement automatically at the 
end of a line.,Because of this, these two examples will return the same result:,JavaScript will also allow you to break a statement into two lines.,Because of this, example 3 will also return the same result:,But, what will happen if you break the return statement in two lines like 
this:,
The function will return ,!,
Why? Because JavaScript thought you meant:,
If a statement is incomplete like:,
JavaScript will try to complete the statement by reading the next line:,
But since this statement is complete: ,
JavaScript will automatically close it like this:,
This happens because closing (ending) statements with semicolon is optional in 
JavaScript.,
JavaScript will close the return statement at the end of the line, because 
it is a complete statement.,Many programming languages support arrays with named indexes.,Arrays with named indexes are called associative 
arrays (or hashes).,JavaScript does , support arrays with named indexes.,In JavaScript, , use ,:   ,In JavaScript, , use ,. ,If you use a named index, when accessing an array, JavaScript will redefine 
the array to a standard object.,After the automatic redefinition, array methods and properties will produce undefined or 
incorrect results:,Trailing commas in object and array definition are legal in ECMAScript 5.,JavaScript objects, variables, properties, and methods can be ,.,In addition, empty JavaScript objects can have the value ,.,This can make it a little bit difficult to test if an object is empty.,You can test if an object exists by testing if the type is ,:,But you cannot test if an object is ,, because this will throw an error if the 
object is ,:,To solve this problem, you must test if an object is not ,, 
and not ,.,But this can still throw an error:,Because of this, you must test for not , before you can 
test for not ,:",,,
JavaScript ,JSON,"What is JSON?,JSON Example,The JSON Format Evaluates to JavaScript Objects,JSON Syntax Rules,JSON Data - A Name and a Value,JSON Objects,JSON Arrays,Converting a JSON Text to a JavaScript Object","JSON Example,Example","JSON is a format for storing and transporting data.,JSON is often used when data is sent from a server to a web 
page. ,* The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. 
Code for reading and generating JSON data can be written in any programming 
language.
,This JSON syntax defines an employees object: an array of 3 employee records (objects):,The JSON format is syntactically identical to the code for creating 
JavaScript objects.,Because of this similarity, a JavaScript program 
can easily convert JSON data into native 
JavaScript objects.,JSON data is written as name/value pairs, just like JavaScript object 
properties.,A name/value pair consists of a field name (in double quotes), 
followed by a colon, followed by a value:,JSON objects are written inside curly braces.,Just like in JavaScript, objects can contain multiple name/value pairs:,JSON arrays are written inside square brackets.,Just like in JavaScript, an array can contain objects:,In the example above, the object ""employees"" is an array. It contains three 
objects.,Each object is a record of a person (with a first name and a last name).,A common use of JSON is to read data from a web server, 
and display the data in a web page.,For simplicity, this can be demonstrated using a string as input.,First, create a JavaScript string containing JSON syntax:,Then, use the JavaScript built-in function , to convert the string into a JavaScript object:,Finally, use the new JavaScript object in your page:","JSON stands for ,ava,cript ,bject ,otation,JSON is a lightweight data interchange format,JSON is language independent ,JSON is ""self-describing"" and easy to understand,Data is in name/value pairs,Data is separated by commas,Curly braces hold objects,Square brackets hold arrays","
<p id=""demo""></p>,
,
<script>,
document.getElementById(""demo"").innerHTML =,
obj.employees[1].firstName + "" "" + obj.employees[1].lastName;,
</script>
",
JavaScript ,Debugging,"Code Debugging,JavaScript Debuggers,The console.log() Method,Setting Breakpoints,The debugger Keyword,Major Browsers' Debugging Tools,Chrome,Firefox,Edge,Opera,Safari,Did You Know?","Example,Example","Programming code might contain syntax errors, or logical errors.,Many of these errors are difficult to diagnose.,Often, when programming code contains errors, nothing will happen. There are 
no error messages, and you will get no indications where to search for errors.,Searching for (and fixing) errors in programming code is called code debugging.,Debugging is not easy. But fortunately, all modern browsers have a built-in 
JavaScript debugger.,Built-in debuggers can be turned on and off, forcing errors to be reported to 
the user.,With a debugger, you can also set breakpoints (places where code execution 
can be stopped), and examine variables while the code is executing.,Normally, otherwise follow the steps at the bottom of this page, you activate debugging in your browser with 
the F12 key, and select ""Console"" in the debugger menu.,If your browser supports debugging, you can use , to 
display JavaScript values in the debugger window:,In the debugger window, you can set breakpoints in the JavaScript code.,At each breakpoint, JavaScript will stop executing, and let you examine 
JavaScript values.,After examining values, you can resume the execution of code (typically with 
a play button).,The , keyword stops the execution of JavaScript, 
and calls (if available) the debugging function.,This has the same function as setting a breakpoint in the debugger.,If no debugging is available, the debugger statement has no effect.,With the debugger turned on, this code will stop executing before it 
executes the third line.,Normally, you activate debugging in your browser with F12, and select ""Console"" in the debugger menu.,Otherwise follow these steps:","Open the browser.,From the menu, select ""More tools"".,From tools, choose ""Developer tools"".,Finally, select Console.,Open the browser.,From the menu, select ""Web Developer"".,Finally, select ""Web Console"".,Open the browser.,From the menu, select ""Developer Tools"".,Finally, select ""Console"".,Open the browser.,From the menu, select ""Developer"".,From ""Developer"", select ""Developer tools"".,Finally, select ""Console"".,Go to Safari, Preferences, Advanced in the main menu.,Check ""Enable Show Develop menu in menu bar"".,When the new option ""Develop"" appears in the menu:,Choose ""Show Error 
 Console"".","
<!DOCTYPE html>,<html>,<body>,<h1>My First Web Page</h1>,
<script>,a = 5;,b = 6;,c = a + b;,console.log(c);,</script>,
,</body>,</html>",
"JavaScript Style Guide,JavaScript Coding Conventions",,"Variable Names,Spaces Around Operators,Code Indentation,Statement Rules,Object Rules,Line Length < 80,Naming Conventions,Loading JavaScript in HTML,Accessing HTML Elements,File Extensions,Use Lower Case File Names,Performance","Examples:,Functions:,Examples:,Functions:,Loops:,Conditionals:,Example,Example","Always use the same coding conventions for all your JavaScript 
projects.,Coding conventions are ,. 
They typically cover:,Coding conventions ,:,Coding conventions can be documented rules for teams to follow, or just be your individual coding practice.,At W3schools we use , for identifier names (variables and functions).,All names start with a ,.,At the bottom of this page, you will find a wider discussion about naming 
rules.,Always put spaces around operators ( = + - * / ), and after commas:,Always use 2 spaces for indentation of code blocks:,General rules for simple statements:,General rules for complex (compound) statements:,General rules for object definitions:,Short objects can be written compressed, on one line, using spaces only 
between properties, like this:,For readability, avoid lines longer than 80 
characters.,If a JavaScript statement does not fit on one line, the best place to break 
it, is after an operator or a comma.,Always use the same naming convention for all your code. For example:,Should you use ,, ,, or
, in variable names?,This is a question programmers often discuss. The answer depends on who you 
ask:,HTML5 attributes can start with data- (data-quantity, data-price).,CSS uses hyphens in property-names (font-size).,Many programmers prefer to use underscores (date_of_birth), especially in SQL 
databases.,Underscores are often used in PHP documentation.,PascalCase is often preferred by C programmers.,camelCase is used by JavaScript itself, by jQuery, and other JavaScript 
libraries.,Use simple syntax for loading external scripts (the type attribute is not 
necessary):,A consequence of using ""untidy"" HTML styles, might result in JavaScript errors.,These two JavaScript statements will produce different results:,If possible, use the same naming convention (as JavaScript) in HTML. ,.,HTML files should have a , extension (, is allowed).
,CSS files should have a , extension.,JavaScript files should have a , extension.,Most web servers (Apache, Unix) are case sensitive about file names:,london.jpg cannot be accessed as London.jpg. ,Other web servers (Microsoft, IIS) are not case sensitive:,london.jpg can be accessed as London.jpg or london.jpg.,If you use a mix of upper and lower case, you have to be extremely 
consistent.,If you move from a case insensitive, to a case sensitive server, even small 
errors can break your web site.,To avoid these problems, always use lower case file names (if possible). ,Coding conventions are not used by computers. Most rules have 
little impact on the execution of programs.,Indentation and extra spaces are not significant in small scripts.,For code in development, readability should be preferred. Larger production 
scripts should be minified.  ","Naming and declaration rules for variables and functions.,Rules for the use of white space, indentation, and comments.,Programming practices and principles,Improves code readability,Make code maintenance easier,Always end a simple statement with a semicolon.,Put the opening bracket at the end of the first line.,Use one space before the opening bracket.,Put the closing bracket on a new line, without leading spaces.,Do not end a complex statement with a semicolon.,Place the opening bracket on the same line as the object name.,Use colon plus one space between each property and its value.,Use quotes around string values, not around numeric values.,Do not add a comma after the last property-value pair.,Place the closing bracket on a new line, without 
 leading spaces.,Always end an object definition with a semicolon. ,Variable and function names written as ,Global variables written in ,(We don't, but it's 
quite common),Constants (like PI) written in ","
<script src=""myscript.js""></script>",
JavaScript ,Best Practices,"Avoid Global Variables,Always Declare Local Variables,Declarations on Top,Initialize Variables,Declare Objects with ,Declare Arrays with ,Don't Use new Object(),Beware of Automatic Type Conversions,Use === Comparison,Use Parameter Defaults,End Your Switches with Defaults,Avoid Number, String, and Boolean as Objects,Avoid Using eval()","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","Avoid global variables, avoid ,, avoid ,, avoid ,Minimize the use of global variables.,This includes all data types, objects, and functions.,Global variables and functions can be overwritten by other scripts.,Use local variables instead, and learn how to use 
,. ,All variables used in a function should be declared as , variables. ,Local variables , be declared with the , 
keyword or the , keyword,or the , keyword,
otherwise they will become global variables.,It is a good coding practice to put all declarations at the top of each script 
or function.,This will:,This also goes for loop variables:,It is a good coding practice to initialize variables when you declare them.,This will:,Declaring objects with const will prevent any accidental change of type:,Declaring arrays with const will prevent any accidential change of type:,JavaScript is loosely typed.,A variable can contain all data types.,A variable can change its data type:,Beware that numbers can accidentally be converted to strings or , (Not a 
Number).,When doing mathematical operations, JavaScript can convert numbers to strings:,Subtracting a string from a string, does not 
generate an error but returns , (Not a Number):,The , comparison operator always converts (to matching types) before 
comparison.,The , operator forces comparison of values and type: ,If a function is called with a missing argument, the value of the missing 
argument is set to
,.,Undefined values can break your code. It is a good habit to assign default 
values to arguments.,Read more about function parameters and arguments at ,Always end your , statements with a ,. Even if you think there is 
no need for it.,Always treat numbers, strings, or booleans as primitive values. Not as 
objects.,Declaring these types as objects, slows down execution speed, 
and produces nasty side effects:,Or even worse:,The , function is used to run text as code. In almost all cases, it 
should not be necessary to use it.,Because it allows arbitrary code to be run, it also represents a security 
problem.","Give cleaner code,Provide a single place to look for local variables,Make it easier to avoid unwanted (implied) global variables,Reduce the possibility of unwanted re-declarations,Give cleaner code,Provide a single place to initialize variables,Avoid undefined values,Use , instead of ,Use , instead of ,Use , instead of ,Use , instead of ,Use , instead of ,Use , instead of ,Use , instead of ",,
JavaScript Modules,,"Modules,Export,Named Exports,Default Exports,Import","In-line individually:,All at once at the bottom:,Example,Import from named exports,Import from default exports","JavaScript modules allow you to break up your code into separate files.,This makes it easier to maintain the code-base.,JavaScript modules rely on the , and , statements.,You can export a function or variable from any file.,Let us create a file named ,, and 
fill it with the things we want to export.,There are two types of exports: Named and Default.,You can create named exports two ways. In-line individually, or all at once at the bottom.,Let us create another file, named ,, and 
use it for demonstrating default export.,You can only have one default export in a file.,You can import modules into a file in two ways, based on if they are named 
exports or default exports.,Named exports are constructed using curly braces. Default exports are not.",,,
JavaScript ,Use Strict,"The ""use strict"" Directive,Declaring Strict Mode,The ""use strict""; Syntax,Why Strict Mode?,Not Allowed in Strict Mode,Future Proof!","Example,Example"," Defines that 
JavaScript code should be executed in 
""strict mode"".,The , directive was new in ECMAScript version 5.,It is not a statement, but a literal expression, ignored by earlier versions 
of JavaScript.,The purpose of , is to indicate that the code should be executed in ""strict mode"".,With strict mode, you can not, for example, use undeclared variables.,All modern browsers support ""use strict"" except Internet Explorer 9 and lower:,The numbers in the table specify the first browser version that fully supports the directive.,Strict mode is declared by adding , to the beginning of a 
script or a function.,Declared at the beginning of a script, it has global scope (all code 
in the script will execute in strict mode):,Declared inside a function, it has local scope (only the code inside the function is 
in strict mode):,The syntax, for declaring strict mode, was designed to be compatible with 
older versions of JavaScript.,Compiling a numeric literal (4 + 5;) or a string literal (""John Doe"";) in a 
JavaScript program has no side effects. It simply compiles to a non existing 
variable and dies.,So , only matters to new compilers that ""understand"" the meaning 
of it.,Strict mode makes it easier to write ""secure"" JavaScript.,Strict mode changes previously accepted ""bad syntax"" into real errors.,As an example, in normal JavaScript, mistyping a variable name creates a new 
global variable. In strict mode, this will throw an error, making it impossible 
to accidentally create a global variable.,In normal JavaScript, a developer will not receive any error feedback 
assigning values to non-writable properties. ,In strict mode, any assignment to a non-writable property, a getter-only 
property, a non-existing property, a non-existing variable, or a non-existing 
object, will throw an error.,Using a variable, without declaring it, is not allowed:,Using an object, without declaring it, is not allowed:,Deleting a variable (or object) is not allowed.,Deleting a function is not allowed.,Duplicating a parameter name is not allowed:,Octal numeric literals are not allowed:,Octal escape characters are not allowed:,Writing to a read-only property is not allowed:,Writing to a get-only property is not allowed:,Deleting an undeletable property is not allowed:,The word , cannot be used as a variable:,The word , cannot be used as a variable:,The , statement is not allowed:,For security reasons, , is not allowed to create  
variables in the scope from which it was called:,The , keyword in functions behaves 
differently in strict mode.,The , keyword refers to the object that 
called the function.,If the object is not specified, functions in strict mode 
will return , and functions in normal 
mode will return the global object (window):,
Keywords reserved for future JavaScript versions can NOT be used as variable 
names in strict mode.,
These are:","implements,interface,let,package,private,protected,public,static,yield",,
"The JavaScript , Keyword",,"What is ,?, in a Method, Alone, in a Function (Default), in a Function (Strict) , in Event Handlers,Object Method Binding,Explicit Function Binding,Function Borrowing, Precedence","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","In JavaScript, the , keyword refers to an ,., object depends on how , is being invoked (used or called).,The , keyword refers to different objects depending on how it is used:,When used in an object method, , refers to the ,.,In the example on top of this page, , refers to the , object.,Because the , method is a method of the , object.,When used alone, , refers to the ,.,Because , is running in the global scope.,In a browser window the global object is ,:, In ,, when used alone, , also refers to the ,:,In a function, the , is the default binding for ,.,In a browser window the global object is ,:,JavaScript , does not allow default binding.,So, when used in a function, in strict mode, , is ,.,In HTML event handlers, , refers to the HTML element that received the 
event:,In these examples, , is the ,:,i.e. , is the , property of , (the person object).,The , and , methods are predefined JavaScript methods.,They can both be used to call an object method with another object as argument.,The example below calls person1.fullName with person2 as an argument, , refers to person2,
even if fullName is a method of person1:,With the , method, an object can borrow a method from another object.,This example creates 2 objects (person and member).,The member object borrows the fullname method from the person object:,To determine which object , refers to; Use the following precedence of order.,Is , in a function being called using bind()?,Is , in a function is being called using apply()?,Is , in a function is being called using call()?,Is , in an object function (method)?
,Is , in a function in the global scope.",,"
  <button onclick=""this.style.display='none'"">,  Click to 
  Remove Me!,</button>",
JavaScript ,Hoisting,"JavaScript Declarations are Hoisted,The let and const Keywords,JavaScript Initializations are Not Hoisted,Declare Your Variables At the Top !","Example 1,Example 2,Example 1,Example 2,Example","Hoisting is JavaScript's default behavior of moving declarations to the 
top.,In JavaScript, a variable can be declared after it has been used.,In other words; a variable can be used before it has been declared., gives the same result as ,:,To understand this, you have to understand the term ""hoisting"".,Hoisting is JavaScript's default behavior of moving all declarations to the 
top of the current scope (to the top of the current script or the current function).,Variables defined with , and , are hoisted to the top 
of the block, but not ,.,Meaning: The block of code is aware of the 
variable, but it cannot be used until it has been declared.
,Using a , variable before it is declared will result in a
,.,The variable is in a ""temporal dead zone"" from the start 
of the block until it is declared:,Using a , variable before it is declared, is a syntax errror,
so the code will simply not run.,Read more about let and const in ,.,JavaScript only hoists declarations, not initializations., does , give the same result as
,:,Does it make sense that y is undefined in the last example?,This is because only the declaration (var y), not the initialization (=7) is hoisted to the top.,Because of hoisting, y has been declared before it is used, but because 
initializations are not hoisted, the value of y is undefined.,Example 2 is the same as writing:,Hoisting is (to many developers) an unknown or overlooked behavior of  
JavaScript.,
If a developer doesn't understand hoisting, programs may contain bugs (errors).,
To avoid bugs, always declare all variables at the beginning of 
every scope.,
Since this is how JavaScript interprets the 
code, it is always a good rule.
",,,
JavaScript Classes,,"JavaScript Class Syntax,Using a Class,The Constructor Method,Class Methods,Browser Support","Syntax,Example,Example,Syntax,Example,Example","Use the keyword , to create a class.,Always add a method named ,:,The example above creates a class named ""Car"".,The class has two initial properties: ""name"" and ""year"".,When you have a class, you can use the class to create objects:,The example above uses the , to create two ,.,The constructor method is a special method:,If you do not define a constructor method, JavaScript 
will add an empty constructor method.
,Class methods are created with the same syntax as object methods.,Use the keyword , to create a class.,Always add a , method.,Then add any number of methods.,Create a Class method named ""age"", that returns the Car age:,You can send parameters to Class methods:,The following table defines the first browser version with full support for 
Classes in JavaScript: ","It has to have the exact name ""constructor"",It is executed automatically when a new object is created,It is used to initialize object properties",,
JavaScript Arrow Function,,"What About ,?,Browser Support","Before:,With Arrow Function:,Arrow Functions Return Value by Default:,Arrow Function With Parameters:,Arrow Function Without Parentheses:,Example,Example","It gets shorter! If the function has only one statement, and the statement 
returns a value, you can remove the brackets , the
, keyword:,If you have parameters, you pass them inside the parentheses:,In fact, if you have only one parameter, you can skip the parentheses as well:,The handling of , is also different in arrow functions compared to regular 
functions.,In short, with arrow functions there are no binding of
,.,In regular functions the , keyword represented the object that called the 
function, which could be the window, the document, a button or whatever.,With arrow functions the , keyword , represents the 
object that 
defined the arrow function.,Let us take a look at two examples to understand the difference.,Both examples call a method twice, first when the page loads, and once again 
when the user clicks a button.,The first example uses a regular function, and the second example uses an 
arrow function.,The result shows that the first example returns two different objects (window and button), 
and the 
second example returns the window object twice, because the window object is the 
""owner"" of the function.,Remember these differences when you are working with functions. Sometimes the 
behavior of regular functions is what you want, if not, use arrow functions.,The following table defines the first browser versions with full support for 
Arrow Functions in JavaScript: ",,,
JavaScript Errors,,"Throw, and Try...Catch...Finally,Errors Will Happen!,JavaScript try and catch,JavaScript Throws Errors,The throw Statement,Input Validation Example,HTML Validation,The finally Statement,The Error Object,Error Object Properties,Error Name Values,Eval Error,Range Error,Reference Error,Syntax Error,Type Error,URI (Uniform Resource Identifier) Error,Non-Standard Error Object Properties,Complete Error Reference","Example,Syntax,Example,Example,Example,Example,Example,Example","The , statement defines a code block to run (to try).,The , statement defines a code block to handle any error.,The , statement defines a code block to run regardless of the result.,The , statement defines a custom error.,When executing JavaScript code, different errors can 
occur. ,Errors can be coding errors made by the programmer, errors due to wrong 
input, and other unforeseeable things.,The , statement allows you to define a block of code to be 
tested for errors while it is being executed.,The , statement allows you to define a block of code to 
be executed, if an error occurs in the try block.,The JavaScript statements , and , 
come in pairs:,When an error occurs, JavaScript will 
normally stop and generate an error message.,The technical term for this is: JavaScript will ,.,The , statement allows you to create a custom error.,Technically you can ,.,The exception can be a JavaScript ,, a ,, a , or an ,:,If you use , together with , and 
,, you can control program 
flow and generate custom error messages.,This example examines input. If the value is wrong, 
an exception (err) is thrown.,The exception (err) is caught by the catch statement and a custom error message is displayed:,The code above is just an example.,Modern browsers will often use a combination of JavaScript and built-in HTML 
validation, using predefined validation rules defined in HTML attributes: ,You can read more about forms validation in a later chapter of this tutorial.,The , statement lets you execute code, after try and 
catch, regardless of the result:,JavaScript has a built in error object that provides error information when 
an error occurs. ,The error object provides two useful properties: name and message.,Six different values can be returned by the error name property:,The six different values are described below.,An , indicates an error in the eval() function.,A , is thrown if you use a number that is outside 
the range of legal values.,For example: You cannot set the number of significant digits of a number to 
500. ,A , is thrown if you use (reference) a variable 
that has not been declared:,A , is thrown if you try to evaluate code with a 
syntax error.,A , is thrown if you use a value that is outside the 
range of expected types:,A , is thrown if you use illegal characters in a URI function:,For a complete reference of the Error object, go to our ,.",,"
 <p id=""demo""></p>,<script>,
try {,  adddlert(""Welcome guest!"");,},catch(err) {,  
document.getElementById(""demo"").innerHTML = err.message;,},</script>,
<!DOCTYPE html>,<html>,<body>,<p>Please input a number between 
5 and 10:</p>,<input id=""demo"" type=""text"">,<button type=""button"" 
onclick=""myFunction()"">Test Input</button>,<p id=""p01""></p>,
<script>,function myFunction() {,  const message = 
document.getElementById(""p01"");,  message.innerHTML = """";,
  let x = 
document.getElementById(""demo"").value;,  
try { ,    if(x == """") throw ""empty"";,
      
 if(isNaN(x)) throw ""not a number"";,    
 x = Number(x);,    if(x < 5) throw 
 ""too low"";,    if(x > 10) throw ""too 
 high"";,  },  catch(err) {,    message.innerHTML = 
""Input is "" + err;,  },},</script>,</body>,</html>
,
 <input id=""demo"" type=""number"" min=""5"" max=""10"" step=""1"">",
JavaScript ,Scope,"Block Scope,Local Scope,Function Scope,Global JavaScript Variables,Global Scope,JavaScript Variables,Automatically Global,Strict Mode,Global Variables in HTML,Warning,The Lifetime of JavaScript Variables,Function Arguments","Example,Example,Example,Example,Example,Example,Example","Before ES6 (2015), JavaScript had only , and ,.,ES6 introduced two important new JavaScript keywords: , and ,.,These two keywords provide , in JavaScript.,Variables declared inside a { } block cannot be accessed 
from outside the block:,Variables declared with the , keyword can NOT have block scope.,Variables declared inside a { } block can be accessed from 
outside the block. ,Variables declared within a JavaScript function, become , to 
the function.,Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.,Local variables are created when a function starts, and deleted when the function is completed.,JavaScript has function scope: Each function creates a new scope. ,Variables defined inside a function are not accessible (visible) from outside the 
function.,Variables declared with ,, ,
and , are 
quite similar when declared inside a function.,They all have ,:,A variable declared outside a function, becomes ,.,Variables declared , (outside any function) have
,., variables can be accessed from anywhere in a JavaScript program. ,Variables declared with ,, ,
and , are 
quite similar when declared outside a block.,They all have ,:,In JavaScript, objects and functions are also variables.,If you assign a value to a variable that has not been declared, it will automatically become a , variable.,This code example will declare a global variable ,, even if 
the value is assigned inside a function.,All modern browsers support running JavaScript in ""Strict Mode"".,You will learn more about how to use strict mode in a later chapter of this tutorial.,With JavaScript, the global scope is the JavaScript environment. ,In HTML, the global scope is the window object.,Global variables defined with the , keyword belong to the window object:,Global variables defined with the , keyword do not belong to the window object:,The lifetime of a JavaScript variable starts when it is declared.,Function (local) variables are deleted when the function is completed.,In a web browser, global variables are deleted when you close the browser 
window (or tab).,Function arguments (parameters) work as local variables inside functions.","Block scope,Function scope,Global scope",,
JavaScript Sets,,"Essential Set Methods,How to Create a Set,The new Set() Method,The add() Method,The forEach() Method,The values() Method","Example,Example,Example,Example,Example,Example,Example,Example","You can create a JavaScript Set by:,Pass an Array to the , constructor:,Create a Set and add values:,Create a Set and add variables:,If you add equal elements, only the first will be saved:,The , method invokes (calls) a function for each Set element:,The , method returns a new iterator object containing all the values in a Set:,Now you can use the Iterator object to access the elements:","Passing an Array to ,Create a new Set and use , to add values,Create a new Set and use , to add variables",,
JavaScript Iterables,,"The For Of Loop,Iterating,Iterating Over a String,Iterating Over an Array,Iterating Over a Set,Iterating Over a Map","Syntax,Example,Example,Example,Example","The JavaScript , statement loops 
through the elements of an iterable object.,Iterating is easy to understand.,It simply means looping over a sequence of elements.,Here are some easy examples:,You can use a , loop to iterate over the elements of a string:,You can use a , loop to iterate over the elements of an Array:,You can use a , loop to iterate over the elements of a Set:,You can use a , loop to iterate over the elements of a Map:","Iterating over a String,Iterating over an Array",,
JavaScript ,Type Conversion,"JavaScript Type Conversion,Converting Strings to Numbers,Number Methods,The Unary + Operator,Converting Numbers to Strings,More Methods,Converting Dates to Numbers,Converting Dates to Strings,Converting Booleans to Numbers,Converting Booleans to Strings,Automatic Type Conversion,Automatic String Conversion,JavaScript Type Conversion Table","Example,Example,Example,Example,Example","JavaScript variables can be converted to a new variable and another data type:,The global method , can convert strings to numbers.,Strings containing numbers (like ""3.14"") convert to numbers (like 3.14).,Empty strings convert to 0.,Anything else converts to , (Not a Number).,In the chapter ,, you 
will find more methods that can be used to convert strings to 
numbers:,The , can be used to 
convert a variable to a number:,
If the 
variable cannot be converted, it will still become a number, but with the value , 
(Not a Number):,The global method , can convert numbers to strings.,It can be used on any type of numbers, literals, variables, or expressions:,The Number method , does the same.,In the chapter ,, you 
will find more methods that can be used to convert numbers to 
strings:,The global method , can be used to convert dates to 
numbers.,The date method ,  does the same.,The global method , can convert dates to 
strings.,The Date method , does the same.,In the chapter ,, you 
will find more methods that can be used to convert dates to 
strings:,The global method , can also convert booleans to numbers.,The global method , can convert booleans to 
strings.,The Boolean method , does the same.,When JavaScript tries to operate on a ""wrong"" data type, it will try to 
convert the value to a ""right"" type.,The result is not always what you expect:,JavaScript automatically calls the variable's , function when you try 
to ""output"" an object or a variable:,Numbers and booleans are also converted, but this is not very visible:,This table shows the result of converting different JavaScript values to Number, String, and Boolean:,Values in quotes indicate string values., indicate values (some) programmers might not expect.","Converting Strings to Numbers,Converting Numbers to Strings,Converting Dates to Numbers,Converting Numbers to Dates,Converting Booleans to Numbers,Converting Numbers to Booleans,By the use of a JavaScript function, by JavaScript itself",,
JavaScript ,Regular Expressions,"What Is a Regular Expression?,Syntax,Using String Methods,Using String search() With a String,Using String search() With a Regular Expression,Using String replace() With a String,Use String replace() With a Regular Expression,Did You Notice?,Regular Expression Modifiers,Regular Expression Patterns,Using the RegExp Object,Using test(),Using exec(),Complete RegExp Reference","Example,Example,Example,Example,Example,Example","A regular expression is a sequence of characters that forms a 
search pattern.,The search pattern can be used for text search and text replace 
operations. ,A regular expression is a sequence of characters that forms a ,.,When you search for data in a text, you can use this search pattern to describe what you are searching for.,A regular expression can be a single character, or a more complicated pattern.,Regular expressions can be used to perform all types of , 
and , operations.,Example explained:,  is a regular expression.,  is a pattern (to be used in a search).,  is a modifier (modifies the search to be case-insensitive).,In JavaScript, regular expressions are often used with the two ,: , and ,.,The , method uses an expression to search for a 
match, and returns the position of the match.,The , method returns a modified string where the 
pattern is replaced.,The , method searches a string for a specified value and returns the position of the match:,The , method replaces a specified value with another value in a string:, can be used to perform case-insensitive more global searches:, are used to find a range of characters:, are characters with a special meaning:, define quantities:,In JavaScript, the RegExp object is a regular expression object with 
predefined properties and methods.,The , method is a RegExp expression method.,It searches a string for a pattern, and returns true 
or false, depending on the result.,The following example searches a string for the character ""e"":,The , method is a RegExp expression method.,It searches a string for a specified pattern, and returns the found text as 
an object. ,If no match is found, it returns an empty , object.,The following example searches a string for the character ""e"":,For a complete reference, go to our ,.,The reference contains descriptions and examples of all RegExp 
properties and methods.",,,
JavaScript ,While Loop,"The While Loop,The Do While Loop,Comparing For and While","Example,Example,Example,Example","Loops can execute a block of code
as long as a specified condition is true.,The , loop loops through a block of code as long as a specified condition is true.,In the following example, the code in the loop will run, over and over again, as long as 
a variable (i) is less than 10:,The , loop is a variant of the while loop. This loop will 
execute the code block once, before checking if the condition is true, then it will
repeat the loop as long as the condition is true.,The example below uses a , loop. The loop will always be 
executed at least once, even if the condition is false, because the code block 
is executed before the condition is tested:,Do not forget to increase the variable used in the condition, otherwise 
the loop will never end!,If you have read the previous chapter, about the for loop, you will discover that a while loop is 
much the same as a for loop, with statement 1 and statement 3 omitted.,The loop in this example uses a , loop to collect the car 
names from the cars array:,The loop in this example uses a , loop to collect the 
car names from the cars array:",,,
JavaScript For Of,,"The For Of Loop,Browser Support,Looping over an Array,Looping over a String,The While Loop","Syntax,Example,Example","The JavaScript , statement loops 
through the values of an iterable object.,It lets you loop over iterable data structures 
such as Arrays, Strings, Maps, NodeLists, and more:, - For every iteration the value of the next property is 
assigned to the variable. , can be declared with
,, ,, or ,., - An object that has iterable properties., was added to JavaScript in 2015 (,),Safari 7 was the first browser to support for of:, is not supported in Internet Explorer.,The , loop and the , loop are explained in the next chapter.",,,
JavaScript ,Break and Continue,"The Break Statement,The Continue Statement,JavaScript Labels","Example,Example,Example","The , statement ""jumps out"" of a loop.,The , statement ""jumps over"" one iteration in 
the loop.,You have already seen the , statement used in an earlier 
chapter of this tutorial. It was used to ""jump out"" of a , statement.,The , statement can also be used to jump out of a loop:,In the example above, the , statement ends the loop (""breaks"" the loop)
when the loop counter (i) is 3.,The , statement breaks one iteration (in the loop), if a specified 
condition occurs, and continues with the next iteration in the loop.,This example skips the value of 3: ,To label JavaScript statements you precede the statements with a label name 
and a colon:,The , and the , statements are the only JavaScript statements that 
can ""jump out of"" a code block.,Syntax:,
The , 
statement (with or without a label reference) can only be used to ,.,The , statement, without a label reference, can only be used to ,.,With a label reference, the break statement can be used to ,: ",,,
JavaScript ,Bitwise Operations,"JavaScript Bitwise Operators,Examples,JavaScript Uses 32 bits Bitwise Operands,Bitwise AND,Bitwise OR,Bitwise XOR,JavaScript Bitwise AND (&),JavaScript Bitwise OR (|),JavaScript Bitwise XOR (^),JavaScript Bitwise NOT (~),JavaScript (Zero Fill) Bitwise Left Shift (<<),JavaScript (Sign Preserving) Bitwise Right Shift (>>),JavaScript (Zero Fill) Right Shift (>>>),Binary Numbers,Converting Decimal to Binary,Converting Binary to Decimal","Example,Example,Example,Example,Example,Example,Example,Example,Example","JavaScript stores numbers as 64 bits floating point numbers, but all bitwise 
operations are performed on 32 bits binary numbers. ,Before a bitwise operation is performed, JavaScript converts numbers to 32 bits 
signed integers.,After the bitwise operation is performed, the result is converted back to 64 bits JavaScript 
numbers.,When a bitwise AND is performed on a pair of bits, it returns 1 if both bits are 1.,When a bitwise OR is performed on a pair of bits, it returns 1 if one of the bits are 1:,When a bitwise XOR is performed on a pair of bits, it returns 1 if the bits are different:,Bitwise AND returns 1 only if both bits are 1:,Bitwise OR returns 1 if one of the bits are 1:,Bitwise XOR returns 1 if the bits are different:,This is a zero fill left shift. One or more zero bits are pushed in from the right,
and the leftmost bits fall off:,This is a sign preserving right shift. Copies of the leftmost bit are pushed 
in from the left, and the rightmost bits fall off:,This is a zero fill right shift. One or more zero bits are pushed in from the left,
and the rightmost bits fall off:,Binary numbers with only one bit set is easy to understand:,Setting a few more bits reveals the binary pattern:,JavaScript binary numbers are stored in two's complement format.,This means that a negative number is the bitwise NOT of the number plus 1:",,,
JavaScript For In,,"The For In Loop,Example Explained,For In Over Arrays,Array.forEach()","Syntax,Example,Syntax,Example,Example,Example","The JavaScript , statement loops through the properties of an Object:,The JavaScript , statement can also loop over the properties of an Array:,The , method calls a function (a callback function) once for each array element.,Note that the function takes 3 arguments:,The example above uses only the value parameter. It can be rewritten to:","The , loop iterates over a , object,Each iteration returns a , (x),The key is used to access the , of the key,The value of the key is ,The item value,The item index ,The array itself",,
JavaScript ,For Loop,"JavaScript Loops,Different Kinds of Loops,The For Loop,Statement 1,Statement 2,Statement 3,Loop Scope,For/Of and For/In Loops,While Loops","Instead of writing:,You can write:,Example,Example,Example,Example,Example,Example","Loops can execute a block of code a number of times.,Loops are handy, if you want to run the same code over and over again, each 
time with a different value.,Often this is the case when working with arrays:,JavaScript supports different kinds of loops:,The , loop has the following syntax:, is executed (one time) before the execution of the code block., defines the condition for executing the code block., is executed (every time) after the code block has been executed.,From the example above, you can read:,Statement 1 sets a variable before the loop starts (let i = 0).,Statement 2 defines the condition for the loop to run (i must be less than 
5).,Statement 3 increases a value (i++) each time the code block in the loop has 
been executed.,Normally you will use statement 1 to initialize the variable used in the loop (let i = 0).,This is not always the case, JavaScript doesn't care. Statement 1 is 
optional.,You can initiate many values in statement 1 (separated by comma):,And you can omit statement 1 (like when your values are set 
before the loop starts):,Often statement 2 is used to evaluate the condition of the initial variable.,This is not always the case, JavaScript doesn't care. Statement 2 is 
also optional.,If statement 2 returns true, the loop will start over again, if it returns false, the 
loop will end.,Often statement 3 increments the value of the initial variable.,This is not always the case, JavaScript doesn't care, and statement 3 is 
optional.,Statement 3 can do anything like negative increment (i--), positive 
increment (i = i + 15), or anything else.,Statement 3 can also be omitted (like when you increment your values inside the loop): ,Using , in a loop:,Using , in a loop:,In the first example, using ,, the variable declared in 
the loop redeclares the variable outside the loop. ,In the second example, using ,, the variable declared in 
the loop does not redeclare the variable outside the loop. ,When , is used to declare the i variable in a loop, the i 
variable will only be visible within the loop. ,The , loop and the , loop are explained in the next chapter.,The , loop and the , are explained in the next chapters."," - loops through a block of code a number of times, - loops through the properties of an object, - loops through the values of an 
  iterable object , - loops through a block of code while a specified condition is true, - also loops through a block of code while a specified condition is true",,
JavaScript Maps,,"Essential Map Methods,How to Create a Map,The new Map() Method,The set() Method,The get() Method,The size Property,The delete() Method,The has() Method,JavaScript Objects vs Maps,The forEach() Method,The entries() Method,Browser Support","Example,Example,Example,Example,Example,Example,Example,Try This:,Example,Example","You can create a JavaScript Map by:,You can create a Map by passing an Array to the , constructor:,You can add elements to a Map with the , method:,The , method can also be used to change existing Map values:,The , method gets the value of a key in a Map:,The , property returns the number of elements in a Map:,The , method removes a Map element:,The , method returns true if a key exists in a Map:,The , method calls a function for each key/value pair in a Map:,The , method returns an iterator object with the [key, values] in a Map:,JavaScript Maps are supported in all browsers, except Internet Explorer:","Passing an Array to ,Create a Map and use ",,
"JavaScript , Statement",Switch,"The JavaScript Switch Statement,The break Keyword,The default Keyword,Common Code Blocks,Switching Details,Strict Comparison","Example,Example,Example,Example,Example","The , statement is used to perform different actions based on different conditions.,Use the , statement to select one of many code blocks to be executed.,This is how it works:,When JavaScript reaches a , 
keyword, it breaks out of the switch block.,This will stop the execution inside the switch block.,It is not necessary to break the last case in a switch block. The block breaks (ends) there anyway.,The , keyword specifies the code to run if there is no 
case match:,The , case does not have to be the last case in a switch 
block:,
Sometimes you will want different 
switch cases to use the same 
code.,
In this example case 4 and 5 share the same code block, and 0 and 6 share 
another code block:,
If multiple cases matches a case value, the , case is selected.,
If no matching cases are found, the program continues to the , label.,
If no default label is found, the program continues to the statement(s) ,.,Switch cases use , comparison (===).,The values must be of the same type to match.,A strict comparison can only be true if the operands are of the same type.,In this example there will be no match for x: ","The switch expression is evaluated once.,The value of the expression is compared with the values of each case.,If there is a match, the associated block of code is executed.,If there is no match, the default code block is executed.",,
JavaScript if else and else if,,"Conditional Statements,The if Statement,The else Statement,The else if Statement,More Examples","Example,Example,Example","Conditional statements are used to perform different actions based on different conditions.,Very often when you write code, you want to perform different actions for different decisions.,You can use conditional statements in your code to do this.,In JavaScript we have the following conditional statements:,Use the , statement to specify a block of JavaScript code to 
be executed if a condition is true.,Use the , statement to specify a block of code to be 
executed if the condition is 
false.,Use the , statement to specify a new condition if the first condition is false.,
This example will write a link to either W3Schools or to the World Wildlife 
Foundation (WWF). By using a random number, there is a 50% chance for each of the 
links.","Use , to specify a block of code to be executed, if a specified condition is true,Use , to specify a block of code to be executed, if the same condition is 
  false,Use , to specify a new condition to test, if the first condition is false,Use , to specify many alternative blocks of code to be executed",,
JavaScript Random,,"Math.random(),JavaScript Random Integers,A Proper Random Function","Example,Example,Example,Example,Example,Example,Example,Example,Example"," returns a random number between 0 (inclusive),  and 1 
(exclusive):, used with , can be used to return random integers.,As you can see from the examples above, it might be a good idea to create a proper random function
to use for all random integer purposes.,This JavaScript function always returns a random number between min (included) and 
max (excluded):,This JavaScript function always returns a random number between min and max (both included):",,,
"JavaScript , and ","Comparison,Logical Operators","Comparison Operators,How Can it be Used,Logical Operators,Conditional (Ternary) Operator,Comparing Different Types",,"Comparison and Logical operators are used to test for , or 
,.,Comparison operators are used in logical statements to determine equality or difference between variables or values. ,Given that ,, the table below explains the comparison operators:,Comparison operators can be used in conditional statements to compare values 
and take action depending on the result:,You will learn more about the use of conditional statements in the next chapter of this tutorial.,Logical operators are used to determine the logic between variables or values.,Given that , and ,, the table below explains the logical operators: ,JavaScript also contains a conditional operator that assigns a value to a variable based on some condition.,If the variable age is a value below 18, the value of the variable voteable 
will be ""Too young"", otherwise the value of voteable will be ""Old enough"".,Comparing data of different types may give unexpected results.,When comparing a string with a number, JavaScript will convert the string to 
a number when doing the comparison. An empty string converts to 0. A non-numeric 
string converts to , which is always ,.,When comparing two strings, ""2"" will be greater than ""12"", because 
(alphabetically) 1 is less than 2.,To secure a proper result, variables should be converted to the proper type 
before comparison:",,,
JavaScript typeof,,"The typeof Operator,Primitive Data,Complex Data,The Data Type of typeof,The constructor Property,Undefined,Empty Values ,Null,Difference Between Undefined and Null","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","In JavaScript there are 5 different data types that can contain values:,There are 6 types of objects:,And 2 data types that cannot contain values:,You can use the , operator to find the data type of a 
JavaScript variable.,Please observe:,A primitive data value is a single simple data value with no additional 
properties and methods.,The , operator can return one of these primitive types:,The , operator can return one of two complex types:,The , operator returns ""object"" for objects, arrays, and null.,The , operator does not return ""object"" for functions.,The ,operator is not a variable. It is an operator. Operators ( + - * / 
) do not have any data type. ,But, the , operator always , (containing 
the type of the operand).,The , property returns the constructor 
function for all JavaScript variables.,
You can check the constructor property to find out if an object is an , 
(contains the word ""Array""):,Or even simpler, you can check if the object is an ,:,
You can check the constructor property to find out if an object is a 
, (contains the word ""Date""):,Or even simpler, you can check if the object is a ,:,In JavaScript, a variable without a value, has the value ,. 
The type is also ,.,Any variable can be emptied, by setting the value to ,. 
The type will also be ,.,An empty value has nothing to do with ,.,An empty string has both a legal value and a type.,In JavaScript , is ""nothing"". It is supposed to be something that doesn't exist.,Unfortunately, in JavaScript, the data type of , is an object.,You can empty an object by setting it to ,:,You can also empty an object by setting it to ,:, and , are equal in value but different in type:","The data type of NaN is number,The data type of an array is object,The data type of a date is object,The data type of null is object,The data type of an undefined variable is , 
    *,The data type of a variable that has not been assigned a value is 
    also , *",,
JavaScript ,Math Object,"The Math Object,Math Properties (Constants),Math Methods,Number to Integer,Math.round(),Math.ceil(),Math.floor(),Math.trunc(),Math.sign(),Math.pow(),Math.sqrt(),Math.abs(),Math.sin(),Math.cos(),Math.min() and Math.max(),Math.random(),The Math.log() Method,The Math.log2() Method,The Math.log10() Method,JavaScript Math Methods","Example,Example,Examples,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Examples","Unlike other objects, the Math object has no constructor.,The Math object is static.,All methods and properties can be used without creating a Math object first.,The syntax for any Math property is : ,.,JavaScript provides 8 mathematical constants that can be accessed as Math properties:,The syntax for Math any methods is : ,There are 4 common methods to round a number to an integer:, returns the nearest integer:, returns the value of x rounded , to its nearest integer:, returns the value of x rounded , to its nearest integer:, returns the integer part of x:, returns if x is negative, null or positive:, returns the value of x to the power of y:, returns the square root of x:, returns the absolute (positive) value of x:, returns the sine (a value between -1 and 1) of the angle x (given in radians).,If you want to use degrees instead of radians, you have to convert degrees to radians:,Angle in radians = Angle in degrees x PI / 180., returns the cosine (a value between -1 and 1) of the angle x (given in radians).,If you want to use degrees instead of radians, you have to convert degrees to radians:,Angle in radians = Angle in degrees x PI / 180., and , can be used to find the lowest or highest value in a list of arguments:, returns a random number between 0 (inclusive), and 1 
(exclusive):, returns the natural logarithm of x.,The natural logarithm returns the time needed to reach a certain level of growth:,Math.E and Math.log() are twins., returns the base 2 logarithm of x., returns the base 10 logarithm of x.",,,
JavaScript ,Booleans,"Boolean Values,The Boolean() Function,Comparisons and Conditions,Everything With a ""Value"" is True,Everything Without a ""Value"" is False,JavaScript Booleans as Objects","Example,Example,Examples,Example","A JavaScript Boolean represents one of two values: , or 
,.,Very often, in programming, you will need a data type that can only have one 
of two values, like,For this, JavaScript has a , data type. It can only 
take the values , or ,.,You can use the , function to find out if an expression (or a variable) is 
true:,Or even easier:,The chapter JS Comparisons gives a full overview of comparison operators.,The chapter JS Conditions gives a full overview of conditional statements.,Here are some examples:,Normally JavaScript booleans are primitive values created from literals:,But booleans can also be defined as objects with the keyword ,:","YES / NO,ON / OFF,TRUE / FALSE",,
JavaScript ,Date Formats,"JavaScript Date Input,JavaScript Date Output,JavaScript ISO Dates,ISO Dates (Year and Month),ISO Dates (Only Year),ISO Dates (Date-Time),Time Zones,JavaScript Short Dates.,WARNINGS !,JavaScript Long Dates.,Date Input - Parsing Dates","Example (Complete date),Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","There are generally 3 types of JavaScript date input formats:,Independent of input format, JavaScript will (by default) output dates in full 
text string format:,ISO 8601 is the international standard for the representation of dates and 
times.,The ISO 8601 syntax (YYYY-MM-DD) is also the preferred JavaScript date format:,ISO dates can be written without specifying the day (YYYY-MM):,ISO dates can be written without month and day (YYYY):,ISO dates can be written with added hours, minutes, and seconds 
(YYYY-MM-DDTHH:MM:SSZ):,Date and time is separated with a capital T.,UTC time is defined with a capital letter Z.,If you want to modify the time relative to UTC, remove the Z and add +HH:MM or -HH:MM 
instead: ,When setting a date, without specifying the time zone, JavaScript will use 
the browser's time zone.,When getting a date, without specifying the time zone, the result is 
converted to the browser's time zone.,In other words: If a date/time is created in GMT (Greenwich Mean Time), the 
date/time will be converted to CDT (Central US Daylight Time) if a user browses 
from central US.,Short dates are written with an ""MM/DD/YYYY"" syntax like this:,Long dates are most often written with a ""MMM DD YYYY"" syntax like this: ,Month and day can be in any order:,And, month can be written in full (January), or abbreviated (Jan):,Commas are ignored. Names are case insensitive:,If you have a valid date string, you can use the , method to convert it to milliseconds., returns the number of milliseconds between the date and January 
1, 1970:,You can then use the number of milliseconds to , object:",,,
JavaScript Date Objects,,"JavaScript Date Output,Creating Date Objects,new Date(),new Date(,),Using 6, 4, 3, or 2 Numbers,Previous Century,new Date(,),JavaScript Stores Dates as Milliseconds,new Date(,),Date Methods,Displaying Dates","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","JavaScript , lets us work with dates:,By default, JavaScript will use the browser's time zone and display a date as a full text string:,Date objects are created with the 
, constructor.,There are , to create a new date object:, creates a new date object with the ,:, creates a new date object with a ,.,7 numbers specify year, month, day, hour, minute, second, and millisecond (in that order):,Specifying a month higher than 11, will not result in an error but add the overflow to the next year:,Specifying a day higher than max, will not result in an error but add the overflow to the next month:,6 numbers specify year, month, day, hour, minute, second:,5 numbers specify year, month, day, hour, and minute:,4 numbers specify year, month, day, and hour:,3 numbers specify year, month, and day:,2 numbers specify year and month:,One and two digit years will be interpreted as 19xx:, creates a new date object from a ,:,JavaScript stores dates as number of milliseconds since January 01, 1970, 00:00:00 UTC (Universal Time Coordinated).,Now the time is: , milliseconds past January 01, 1970, creates a new date object as,:,01 January 1970 , 100 000 000 000 milliseconds is approximately 03 March 1973:,January 01 1970 , 100 000 000 000 milliseconds is approximately October 31 1966:,When a Date object is created, a number of , allow you to operate on 
it.,Date methods allow you to get and set the year, month, day, hour, 
minute, second, and millisecond of date objects, using either local time or UTC 
(universal, or GMT) time.,JavaScript will (by default) output dates in full text string format:,When you display a date object in HTML, it is automatically converted to a 
string, with the , method.,The , method converts a date to a UTC string (a date display 
standard).,The , method converts a date to a more readable 
format:,The , method converts a Date object to a string, using the ISO standard format:",,,
JavaScript ,Get Date Methods,"The getTime() Method,The getFullYear() Method,The getMonth() Method,The getDate() Method,The getHours() Method,The getMinutes() Method,The getSeconds() Method,The getMilliseconds() Method,The getDay() Method,UTC Date Methods","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","These methods can be used for getting information from a date object:,The , method returns the number of milliseconds since January 1, 1970:,The , method returns the year of a date as a four digit number:,The , method returns the month of a date as a number (0-11):,You can use an array of names, and , to return the month as a name:,The , method returns the day of a date as a number (1-31):,The , method returns the hours of a date as a number (0-23):,The , method returns the minutes of a date as a number (0-59):,The , method returns the seconds of a date as a number (0-59):,The , method returns the milliseconds of a date as a number (0-999):,The , method returns the weekday of a date as a number (0-6):,You can use an array of names, and , to return the weekday as a name:,UTC date methods are used for working with UTC dates (Universal Time Zone dates):",,,
JavaScript ,Array Const,"ECMAScript 2015 (ES6),Cannot be Reassigned,Arrays are Not Constants,Elements Can be Reassigned,Browser Support,Assigned when Declared,Const Block Scope,Redeclaring Arrays","Example,Example,Example,Example,Example,Example,Example,Example,Example","in 2015, JavaScript introduced an important new keyword: ,.,It has become a common practice to declare arrays using ,:,An array declared with , cannot be reassigned:,The keyword , is a little misleading.,It does NOT define a constant array. It defines a constant reference to an array.,Because of this, we can still change the elements of a constant array.,You can change the elements of a constant array:,The , keyword is not supported in Internet Explorer 10 or earlier.,The following table defines the first browser versions with full support for the , keyword: ,JavaScript , variables must be assigned a value when they are declared:
,Meaning: An arrays declared with , must be initialized when it is declared.,Using , without initializing the array is a syntax 
error:,Arrays declared with , can be initialized at any time.,You can even use the array before it is declared:,An array declared with , has ,.,An array declared in a block is not the same as an array declared outside the block:,An array declared with , does not have block scope:,You can learn more about Block Scope in the chapter: ,.,Redeclaring an array declared with , is allowed anywhere in a program:,Redeclaring or reassigning an array to ,, in the same scope, or in 
the same block, is not allowed:,Redeclaring or reassigning an existing , array, in the same scope, or in 
the same block, is not allowed:,Redeclaring an array with ,, in another scope, or in another block, is allowed:",,,
JavaScript Array Iteration,,"JavaScript Array forEach(),JavaScript Array map(),JavaScript Array filter(),JavaScript Array reduce(),JavaScript Array reduceRight(),JavaScript Array every(),JavaScript Array some(),JavaScript Array indexOf(),JavaScript Array lastIndexOf(),JavaScript Array find(),Browser Support,JavaScript Array findIndex(),Browser Support,JavaScript Array.from(),Browser Support,JavaScript Array Keys(),Browser Support,Array entries(),Browser Support,JavaScript Array includes(),Browser Support","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","Array iteration methods operate on every array item.,The , method calls a function (a callback function) once for each array element.,Note that the function takes 3 arguments:,The example above uses only the value parameter. The example can be rewritten 
to:,The , method creates a new array by performing a function on each array element.,The , method does not execute the function for array 
elements without values.,The , method does not change the original array.,This example multiplies each array value by 2: ,Note that the function takes 3 arguments:,When a callback function uses only the value parameter, the index and array 
parameters can be omitted: ,The , method creates a new array with array elements that passes a test.,This example creates a new array from elements with a value larger than 18:,Note that the function takes 3 arguments:,In the example above, the callback function does not use the index and array 
parameters, so they can be omitted:,The , method runs a function on each array element to produce (reduce it to) a single value.,The , method works from left-to-right in the array. See also ,.,This example finds the sum of all numbers in an array:,Note that the function takes 4 arguments:,The example above does not use the index and array parameters. It can be 
rewritten to:,The , method can accept an initial value:,The , method runs a function on each array element to produce (reduce it to) a single value.,The , works from right-to-left in the array. See also ,.,This example finds the sum of all numbers in an array:,Note that the function takes 4 arguments:,The example above does not use the index and array parameters. It can be 
rewritten to:,The , method check if all array values pass a test.,This example check if all array values are larger than 18:,Note that the function takes 3 arguments:,When a callback function uses the first parameter only (value), the other 
parameters can be omitted:,The , method check if some array values pass a test.,This example check if some array values are larger than 18:,Note that the function takes 3 arguments:,The , method searches an array for an element value and returns its position., returns -1 if the item is not found.,If the item is present more than once, it returns the position of the first 
occurrence., is the same as ,, but 
returns the position of the last occurrence of the specified element.,The , method returns the value of the first array element that passes a 
test function.,This example finds (returns the value of) the first element that is larger 
than 18:,Note that the function takes 3 arguments:, is an ES6  feature (JavaScript 2015).,It is supported in all modern browsers:, is not supported in Internet Explorer.,The , method returns the index of the first array element that 
passes a test function.,This example finds the index of the first element that is larger than 18:,Note that the function takes 3 arguments:, is an ES6  feature (JavaScript 2015).,It is supported in all modern browsers:, is not supported in Internet Explorer.,The , method returns an Array object from any object with a length 
property or any iterable object., is an ES6  feature (JavaScript 2015).,It is supported in all modern browsers:, is not supported in Internet Explorer.,The , method returns an Array Iterator object with the keys of an array., is an ES6  feature (JavaScript 2015).,It is supported in all modern browsers:, is not supported in Internet Explorer.,The , method returns an Array Iterator object with key/value pairs:,[0, ""Banana""],[1, ""Orange""],[2, ""Apple""],[3, ""Mango""],The , method does not change the original array., is an ES6  feature (JavaScript 2015).,It is supported in all modern browsers:, is not supported in Internet Explorer.,ECMAScript 2016 introduced , to arrays.
This allows us to check if an element is present in an array (including NaN, unlike indexOf).,Array.includes() is not supported in Internet Explorer and Edge 12/13.,The first browser versions with full support are:, is an ECMAScript 2016 feature.,It is supported in all modern browsers:, is not supported in Internet Explorer.","The item value,The item index ,The array itself,The item value,The item index ,The array itself,The item value,The item index ,The array itself,The total (the initial value / previously returned value),The item value,The item index ,The array itself,The total (the initial value / previously returned value),The item value,The item index ,The array itself,The item value,The item index ,The array itself,The item value,The item index ,The array itself,The item value,The item index ,The array itself,The item value,The item index ,The array itself",,
JavaScript ,Const,"Cannot be Reassigned,Must be Assigned,Constant Objects and Arrays,Constant Arrays,Constant Objects,Browser Support,Block Scope,Redeclaring,Const Hoisting","Example,Correct,Example,Example,Example,Example,Example,Example,Example,Example","A , variable cannot be reassigned:,JavaScript , variables must be assigned a value when they are declared:,The keyword , is a little misleading.,It does not define a constant value. It defines a constant reference to a value.,Because of this you can NOT:,You can change the elements of a constant array:,But you can NOT reassign the array:,You can change the properties of a constant object:,But you can NOT reassign the object:,The , keyword is not supported in Internet Explorer 10 or earlier.,The following table defines the first browser versions with full support for the , keyword: ,Declaring a variable with , is similar to , 
when it comes to ,.,The x declared in the block, in this example, is not the same as the x declared outside the block:,You can learn more about block scope in the chapter ,.,Redeclaring a JavaScript , variable is allowed 
anywhere in a program:,Redeclaring an existing , or ,
variable to ,, in the same scope, is not allowed:,Reassigning an existing , variable, in the same scope, is not allowed:,Redeclaring a variable with ,, in another scope, or in another block, is allowed:,Variables defined with , are , to the top 
and can be initialized at any time.,Meaning: You can use the variable before it is declared:,If you want to learn more about hoisting, study the chapter ,.

,Variables defined with , are also hoisted to the top,
but not initialized.,Meaning: Using a , variable before it is declared will result in a 
,:","A new Array,A new Object,A new Function,A new RegExp,Reassign a constant value,Reassign a constant array,Reassign a constant object,Change the elements of constant array,Change the properties of constant object",,
JavaScript ,Syntax,"JavaScript Values,JavaScript Literals,JavaScript Variables,JavaScript Operators,JavaScript Expressions,JavaScript Keywords,JavaScript Comments,JavaScript Identifiers / Names,JavaScript is Case Sensitive,JavaScript and Camel Case,JavaScript Character Set",,"The JavaScript syntax defines two types of values:,Fixed values are called ,.,Variable values are called ,.,The two most important syntax rules for fixed values are:,1. , are written with or 
without decimals:,2. , are text, written within double or single quotes:,In a programming language, , 
are used to , data values.,JavaScript uses the keywords ,,
, and , to , variables.,An , is used to , to variables.,In this example, x is defined as a variable. Then, x is 
assigned (given) the value 
6:,JavaScript uses , ( , , , , ) to 
, values: ,JavaScript uses an , ( , ) to , 
values to variables: ,An expression is a combination of values, variables, and operators, 
which computes to a value.,The computation is called an evaluation.,For example, 5 * 10 evaluates to 50:,Expressions can also contain variable values:,The values can be of various types, such as numbers and strings.,For example, ""John"" + "" "" + ""Doe"", evaluates to ""John Doe"":,JavaScript , are used to 
identify actions to be performed.,The
, keyword tells the browser to create variables:,The
, keyword also tells the browser to create variables:,Not all JavaScript statements are ""executed"".,Code after double slashes
, or between , and , is treated as a ,.,Comments are ignored, and will not be 
executed:,Identifiers are JavaScript names.,Identifiers are used to name variables and keywords, and functions.,The rules for legal names are the same in most programming languages.,A JavaScript name must begin with:,Subsequent characters may be letters, digits, underscores, or dollar signs.,All JavaScript identifiers are 
,.  ,The variables , and ,, 
are two different variables:,JavaScript does not interpret , or , as the keyword ,.,Historically, programmers have used different ways of joining multiple words into one variable name:,first-name, last-name, master-card, inter-city.,first_name, last_name, master_card, inter_city.,FirstName, LastName, MasterCard, InterCity.,
,JavaScript programmers tend to use camel case that starts with a lowercase letter:,firstName, lastName, masterCard, interCity.,JavaScript uses the , character set.,Unicode covers (almost) all the characters, punctuations, and symbols in the world.,For a closer look, please study our ,.","Fixed values,Variable values,A letter (A-Z or a-z),A dollar sign ($),Or an underscore (_)",,
JavaScript Let,,"Cannot be Redeclared,Block Scope,Redeclaring Variables,Browser Support,Redeclaring,Let Hoisting","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","Variables defined with , cannot be ,.,You cannot accidentally redeclare a variable.,With , you can not do this:,With , you can:,Before ES6 (2015), JavaScript had only , and ,.,ES6 introduced two important new JavaScript keywords: , and ,.,These two keywords provide , in JavaScript.,Variables declared inside a { } block cannot be accessed 
from outside the block:,Variables declared with the , keyword can NOT have block scope.,Variables declared inside a { } block can be accessed from 
outside the block. ,Redeclaring a variable using the , keyword can impose problems.,Redeclaring a variable inside a block will also redeclare the variable 
outside the block:,Redeclaring a variable using the , keyword can solve this problem.,Redeclaring a variable inside a block will not redeclare the variable outside 
the block:,The , keyword is not fully supported in Internet Explorer 11 or earlier.,The following table defines the first browser versions with full support for the , keyword: ,Redeclaring a JavaScript variable with , is allowed 
anywhere in a program:,With ,, redeclaring a variable in the same block is NOT allowed:,Redeclaring a variable with ,, in another block, IS allowed:,Variables defined with , are , to the top 
and can be initialized at any time.
,Meaning: You can use the variable before it is declared:,If you want to learn more about hoisting, study the chapter ,.


,Variables defined with , are also hoisted to the top 
of the block, but not initialized.,Meaning: Using a , variable before it is declared will result in a 
,:",,,
JavaScript ,Set Date Methods,"Set Date Methods,The setFullYear() Method,The setMonth() Method,The setDate() Method,The setHours() Method,The setMinutes() Method,The setSeconds() Method,Compare Dates","Example,Example,Example,Example,Example,Example,Example,Example,Example","Set Date methods let you set date values (years, 
months, days, hours, minutes, seconds, milliseconds) for a Date Object.,Set Date methods are used for setting a part of a date:,The , method sets the year of a date object. In this example to 2020:,The , method can , set month and day:,The , method sets the month of a date object (0-11):,The , method sets the day of a date object (1-31):,The , method can also be used to , to a date:,The , method sets the hours of a date object (0-23):,The , method sets the minutes of a date object (0-59):,The , method sets the seconds of a date object (0-59):,Dates can easily be compared.,The following example compares today's date with January 14, 2100:",,,
JavaScript ,Variables,"What are Variables?,When to Use JavaScript const?,Just Like Algebra,JavaScript Identifiers,The Assignment Operator,JavaScript Data Types,Declaring a JavaScript Variable,One Statement, Many Variables,Value = undefined,Re-Declaring JavaScript Variables,JavaScript Arithmetic,JavaScript Dollar Sign $,JavaScript Underscore (_)","Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example,Example","Variables are containers for storing data (storing data values).,In this example, ,, ,, and ,,
are variables, declared with the , keyword:,In this example, ,, ,, and ,,
are variables, declared with the , keyword:,In this example, ,, ,, and ,,
are undeclared variables:,From all the examples above, you can guess:,If you want a general rule: always declare variables with ,.,If you think the value of the variable can change, use ,.,In this example, ,, ,, and ,, are variables:,The two variables , and ,
are declared with the , keyword.,These are constant values and cannot be changed.,The variable , is declared with the , keyword.,This is a value that can be changed.,Just like in algebra, variables hold values:,Just like in algebra, variables are used in expressions:,From the example above, you can guess that the total is calculated to be 11.,All JavaScript , must be
, with ,.,These unique names are called ,.,Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).,The general rules for constructing names for variables (unique identifiers) are:,In JavaScript, the equal sign (,) is an ""assignment"" operator, not an 
""equal to"" operator.,This is different from algebra. The following does not make sense in 
algebra:,In JavaScript, however, it makes perfect sense: it assigns the value of x + 5 to 
x.,(It calculates the value of x + 5 and puts the result into x. The value of x 
is incremented by 5.),JavaScript variables can hold numbers like 100 and text values like ""John 
Doe"".,In programming, text values are called text strings.,JavaScript can handle many types of data, but for now, just think of numbers and strings. ,Strings are written inside double or single quotes. Numbers are written 
without quotes.,If you put a number in quotes, it will be treated as a text string.,Creating a variable in JavaScript is called ""declaring"" a variable. ,You declare a JavaScript variable with the , or the , keyword:,After the declaration, the variable has no value (technically it is ,).,To , a value to the variable, use the equal sign:,You can also assign a value to the variable when you declare it:,In the example below, we create a variable called , and assign the value 
""Volvo"" to it.,Then we ""output"" the value inside an HTML paragraph with id=""demo"":,You can declare many variables in one statement.,Start the statement 
with , and separate the variables by ,:,A declaration can span multiple lines: ,In computer programs, variables are often declared without a value. The value 
can be something that has to be calculated, or something that will be provided 
later, like user input.,A variable declared without a value will have the value ,.,The variable carName will have the value , after the execution of this statement:,If you re-declare a JavaScript variable declared with ,, it will not lose its value.,The variable , will still have the value ""Volvo"" after the execution of these statements:,As with algebra, you can do arithmetic with JavaScript variables, using 
operators like , and ,: ,You can also add strings, but strings will be concatenated:,Also try this:,Now try this:,Since JavaScript treats a dollar sign as a letter, identifiers containing $ are valid variable names:,Using the dollar sign is not very common in JavaScript,
but professional programmers often use it 
as an alias for the main function in a JavaScript library.,In the JavaScript library jQuery, for instance, the main function
, is used to select HTML elements.
In jQuery , means ""select all p elements"".,Since JavaScript treats underscore as a letter, identifiers containing _ are valid variable names:,Using the underscore is not very common in JavaScript,

but a convention among professional programmers is to use it as an alias for
""private (hidden)"" variables.","Using ,Using ,Using ,Using nothing,x stores the value 5,y stores the value 6,z stores the value 11,Names can contain letters, digits, underscores, and dollar signs.,Names must begin with a letter,Names can also begin with $ and _ (but we will not use it in this tutorial),Names are case sensitive (y and Y are different variables),Reserved words (like JavaScript keywords) cannot be used as names","
<p id=""demo""></p>,<script>,
let carName = ""Volvo"";,
document.getElementById(""demo"").innerHTML = carName; ,</script>",
JavaScript ,Where To,"The <script> Tag,JavaScript Functions and Events,JavaScript in <head> or <body>,JavaScript in <head>,JavaScript in <body>,External JavaScript,External JavaScript Advantages,External References","Example,Example,Example,External file: myScript.js,Example,Example,Example,Example,Example","In HTML, JavaScript code is inserted between , and , tags.,A JavaScript , is a block of JavaScript code, that can be executed when ""called"" for.,For example, a function can be called when an , occurs, like when the user clicks a button.,You can place any number of scripts in an HTML document.,Scripts can be placed in the ,, or in the , section of an HTML page, or in both.,In this example, a JavaScript , is placed in the , section 
of an HTML page.,The function is invoked (called) when a button is clicked:,In this example, a JavaScript , is placed in the , section of an HTML page.,The function is invoked (called) when a button is clicked:,Scripts can also be placed in external files:,External scripts are practical when the same code is used in many different web pages. ,JavaScript files have the file extension ,.,To use an external script, put the name of the script file in the , (source) attribute of 
a , tag:,You can place an external script reference in , or , as you like.,The script will behave as if it was located exactly where the , tag is located.,Placing scripts in external files has some advantages:,To add several script files to one page  - use several script tags:,An external script can be referenced in 3 different ways:,This example uses a , to link to myScript.js: ,This example uses a , to link to myScript.js:,This example uses no path to link to myScript.js:","It separates HTML and code,It makes HTML and JavaScript easier to read and maintain,Cached JavaScript files can speed up page loads,With a full URL (a full web address),With a file path (like /js/),Without any path","
<script>,
document.getElementById(""demo"").innerHTML = ""My First JavaScript"";,
</script>
,
<!DOCTYPE html>,
<html>,
<head>,
<script>,
function myFunction() {,
  document.getElementById(""demo"").innerHTML = ""Paragraph changed."";,
},
</script>,
</head>,<body>
,
,
<!DOCTYPE html>,
<html>,
<body>
,<h2>Demo JavaScript in Body</h2>,
,
  <p id=""demo"">A Paragraph</p>,
,
  <button type=""button"" onclick=""myFunction()"">Try 
it</button>,
 ,<script>,
function myFunction() {,
    document.getElementById(""demo"").innerHTML = ""Paragraph changed."";,
},
</script>,
 ,</body>,
</html>
,
<script src=""myScript.js""></script>,
<script src=""myScript1.js""></script>,
<script src=""myScript2.js""></script>
,
<script src=""https://www.w3schools.com/js/myScript.js""></script>
,
<script src=""/js/myScript.js""></script>
,
<script src=""myScript.js""></script>
",
JavaScript ,Comments,"Single Line Comments,Multi-line Comments,Using Comments to Prevent Execution","Example,Example,Example,Example,Example","JavaScript comments can be used to explain JavaScript code, and 
to make it more readable.,JavaScript comments can also be used to prevent execution, when 
testing alternative code.,Single line comments start with ,.,Any text between , and the end of the line will be ignored by JavaScript 
(will not be executed).,This example uses a single-line comment before each code line:,This example uses a single line comment at the end of each line 
to explain the code:,Multi-line comments start with , and end with  ,.,Any text between , and , will be ignored by JavaScript.,This example uses a multi-line comment (a comment block) to explain the code:,Using comments to prevent execution of code is suitable for 
code testing.,Adding , in front of a code line changes the code lines from an executable line to 
a comment.,This example uses // to prevent execution of one of the code lines:,This example uses a comment block to prevent execution of 
multiple lines:",,,
JavaScript ,Operators,"JavaScript Arithmetic Operators,JavaScript Assignment Operators,JavaScript String Operators,Adding Strings and Numbers,JavaScript Comparison Operators,JavaScript Logical Operators,JavaScript Type Operators,JavaScript Bitwise Operators","Example,Assignment,Adding,Multiplying,Assignment,Example,Example,Example","The , operator (,) assigns a value to a variable.,The , operator (,) adds numbers:,The , operator (,) multiplies numbers.,Arithmetic operators are used to perform arithmetic on numbers:,Assignment operators assign values to JavaScript variables.,The , operator (,) adds a value to a variable.,The , operator can also be used to add (concatenate) strings.,The , assignment operator can also be used to add (concatenate) strings:,Adding two numbers, will return the sum, but adding a number and a string will return a string:,Bit operators work on 32 bits numbers.",,,
JavaScript ,Statements,"JavaScript Programs,JavaScript Statements,Semicolons ;,JavaScript White Space,JavaScript Line Length and Line Breaks,JavaScript Code Blocks,JavaScript Keywords","Example,Example,Examples,Example,Example","A , is a list of ""instructions"" to be 
""executed"" by a computer.,In a programming language, these programming instructions are called ,.,A , is a list of programming ,.,JavaScript statements are composed of:,Values, Operators, Expressions, Keywords, 
and Comments.,This statement tells the browser to write ""Hello Dolly."" 
inside an HTML element with id=""demo"":,Most JavaScript 
programs contain many JavaScript statements.,The statements are executed, one by one, in the 
same order as they are written.,Semicolons separate JavaScript statements.,Add a semicolon at the end of each executable statement: ,
When separated by semicolons, multiple statements on one line are allowed:,JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.,The following lines are equivalent:,A good practice is to put spaces around operators ( = + - * / ):,For best readability, programmers often like to avoid code lines longer than 80 
characters.,If a JavaScript statement does not fit on one line, the best place to break 
it is after an operator:,JavaScript statements can be grouped together in code blocks, inside curly 
brackets {...}.,The purpose of code blocks is to define statements to be executed together.,One place you will find statements grouped together in blocks, is in 
JavaScript functions:,JavaScript statements often start with a , 
to identify the JavaScript action to be performed.,Our , lists all JavaScript keywords.,Here is a list of some of the keywords you will learn about in 
this tutorial: ",,,
JavaScript ,Output,"JavaScript Display Possibilities,Using innerHTML,Using document.write(),Using window.alert(),Using console.log(),JavaScript Print","Example,Example,Example,Example,Example,Example,Example","JavaScript can ""display"" data in different ways:,To access an HTML element, JavaScript can use the , method. ,The , attribute defines the HTML element. The ,  property defines the HTML content:,For testing purposes, it is convenient to use ,:,You can use an alert box to display data:,You can skip the , keyword.,In JavaScript, the window object is the global scope object, that means that variables, properties, and methods by default belong to the window object.
This also means that specifying the , keyword is optional:,For debugging purposes, you can call the , method
in the browser to display data.,JavaScript does not have any print object or print methods.,You cannot access output devices from JavaScript.,The only exception is that you can call the , method in
the browser to print the content of the current window.","Writing into an HTML element, using ,.,Writing into the HTML output using ,.,Writing into an alert box, using ,.,Writing into the browser console, using ,.","
 <!DOCTYPE html>,<html>,
<body>,
,
<h1>My First Web Page</h1>,
 <p>My First Paragraph</p>,
    ,<p id=""demo""></p>,
,
<script>,
 document.getElementById(""demo"").innerHTML = 5 + 6;,
    </script>,
,
</body>,
</html>
,
 <!DOCTYPE html>,<html>,
<body>,<h1>My First Web Page</h1>,
 <p>My first paragraph.</p>,
 ,<script>,document.write(5 + 6);,</script>,
,
</body>,
</html>
,
<!DOCTYPE html>,
<html>,
<body>,
<h1>My First Web Page</h1>,
 <p>My first paragraph.</p>,
<button type=""button"" onclick=""document.write(5 + 6)"">Try it</button>,
</body>,
</html>
,
<!DOCTYPE html>,
<html>,
<body>,
<h1>My First Web Page</h1>,<p>My first paragraph.</p>,
 ,
<script>,window.alert(5 + 6);,
</script>,
,
</body>,
</html>
,
<!DOCTYPE html>,
<html>,
<body>,
<h1>My First Web Page</h1>,<p>My first paragraph.</p>,
 ,
<script>,alert(5 + 6);,
</script>,
,
</body>,
</html>
,
<!DOCTYPE html>,
<html>,
<body>,
 ,
<script>,
console.log(5 + 6);,
</script>,
,
</body>,
</html>
,
<!DOCTYPE html>,
<html>,<body>,
<button onclick=""window.print()"">Print this page</button>,
</body>,
</html>
",
JavaScript ,Introduction,"JavaScript Can Change HTML Content,JavaScript Can Change HTML Attribute Values,JavaScript Can Change HTML Styles (CSS),JavaScript Can Hide HTML Elements,JavaScript Can Show HTML Elements","Example,Example,The Light Bulb,Example,Example,Example","One of many JavaScript HTML methods is ,.,The example below ""finds"" an HTML element (with id=""demo""), 
and changes the element content (innerHTML) to ""Hello JavaScript"":,In this example JavaScript changes the value of the , (source) attribute of an , tag:,Changing the style of an HTML element, is a variant of changing an HTML 
attribute:,Hiding HTML elements can be done by changing the , style:,Showing hidden HTML elements can also be done by changing the , style:",,,
